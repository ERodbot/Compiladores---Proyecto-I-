
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizer;

import java_cup.runtime.*;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\157\000\002\002\004\000\002\041\002\000\002\002" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\004" +
    "\000\002\003\003\000\002\005\004\000\002\004\007\000" +
    "\002\042\002\000\002\004\011\000\002\004\007\000\002" +
    "\004\004\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\004\000\002\010\004\000" +
    "\002\011\007\000\002\011\007\000\002\040\006\000\002" +
    "\013\004\000\002\013\005\000\002\014\003\000\002\014" +
    "\004\000\002\015\003\000\002\016\007\000\002\016\011" +
    "\000\002\016\010\000\002\016\012\000\002\017\007\000" +
    "\002\017\010\000\002\020\011\000\002\020\015\000\002" +
    "\021\004\000\002\021\004\000\002\021\005\000\002\022" +
    "\005\000\002\022\004\000\002\023\003\000\002\023\003" +
    "\000\002\024\003\000\002\024\005\000\002\025\003\000" +
    "\002\025\005\000\002\026\007\000\002\026\010\000\002" +
    "\026\006\000\002\026\005\000\002\027\010\000\002\027" +
    "\006\000\002\027\006\000\002\027\004\000\002\027\006" +
    "\000\002\027\006\000\002\030\003\000\002\030\005\000" +
    "\002\030\005\000\002\030\003\000\002\031\004\000\002" +
    "\031\007\000\002\032\003\000\002\032\005\000\002\032" +
    "\002\000\002\012\004\000\002\033\003\000\002\033\003" +
    "\000\002\033\006\000\002\033\005\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\034\004\000\002\034\004\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\035\005\000\002\035\005" +
    "\000\002\035\005\000\002\035\004\000\002\035\004\000" +
    "\002\035\004\000\002\035\003\000\002\036\005\000\002" +
    "\036\005\000\002\036\004\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\037\005\000\002\037\005" +
    "\000\002\037\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\006\003\000\065\000\001\002\000\006\003" +
    "\010\065\013\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\004\015\165\001\002\000\012\002" +
    "\ufffb\003\ufffb\012\164\065\ufffb\001\002\000\010\002\uffff" +
    "\003\162\065\013\001\002\000\010\002\ufffe\003\ufffe\065" +
    "\ufffe\001\002\000\016\004\022\005\015\006\021\007\017" +
    "\010\014\037\016\001\002\000\004\067\uffe8\001\002\000" +
    "\004\067\uffe9\001\002\000\004\067\uffed\001\002\000\004" +
    "\067\uffec\001\002\000\004\067\026\001\002\000\004\067" +
    "\uffeb\001\002\000\006\064\023\067\uffea\001\002\000\004" +
    "\011\024\001\002\000\004\012\025\001\002\000\004\015" +
    "\ufff9\001\002\000\004\011\027\001\002\000\022\003\ufff8" +
    "\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\012\031\037" +
    "\ufff8\001\002\000\020\003\036\004\035\005\015\006\021" +
    "\007\017\010\014\037\016\001\002\000\004\015\ufff6\001" +
    "\002\000\006\012\157\017\156\001\002\000\006\012\uffb9" +
    "\017\uffb9\001\002\000\004\067\037\001\002\000\004\067" +
    "\uffea\001\002\000\006\012\uffb6\017\uffb6\001\002\000\010" +
    "\012\uffb5\013\040\017\uffb5\001\002\000\034\011\044\020" +
    "\045\021\041\022\061\023\043\036\055\050\056\052\057" +
    "\053\054\054\063\055\060\057\051\067\047\001\002\000" +
    "\046\012\ufff4\014\ufff4\017\ufff4\040\ufff4\041\ufff4\042\ufff4" +
    "\043\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4\056\ufff4\057" +
    "\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\070\ufff4\001\002" +
    "\000\046\012\uffaf\014\uffaf\017\uffaf\040\uffaf\041\uffaf\042" +
    "\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\056\uffaf" +
    "\057\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\070\uffaf\001" +
    "\002\000\046\012\ufff2\014\ufff2\017\ufff2\040\ufff2\041\ufff2" +
    "\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\056" +
    "\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\070\ufff2" +
    "\001\002\000\034\011\044\020\045\021\041\022\061\023" +
    "\043\036\055\050\056\052\057\053\054\054\063\055\060" +
    "\057\051\067\047\001\002\000\046\012\ufff3\014\ufff3\017" +
    "\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3" +
    "\046\ufff3\047\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\062" +
    "\ufff3\063\ufff3\070\ufff3\001\002\000\046\012\uffa8\014\uffa8" +
    "\017\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045" +
    "\uffa8\046\uffa8\047\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8" +
    "\062\uffa8\063\uffa8\070\uffa8\001\002\000\052\011\144\012" +
    "\uffae\013\143\014\uffae\017\uffae\040\uffae\041\uffae\042\uffae" +
    "\043\uffae\044\uffae\045\uffae\046\uffae\047\uffae\056\uffae\057" +
    "\uffae\060\uffae\061\uffae\062\uffae\063\uffae\070\uffae\001\002" +
    "\000\046\012\uffab\014\uffab\017\uffab\040\uffab\041\uffab\042" +
    "\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\056\uffab" +
    "\057\uffab\060\uffab\061\uffab\062\uffab\063\uffab\070\uffab\001" +
    "\002\000\034\011\044\020\045\021\041\022\061\023\043" +
    "\036\055\050\056\052\057\053\054\054\063\055\060\057" +
    "\051\067\047\001\002\000\046\012\uffaa\014\uffaa\017\uffaa" +
    "\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046" +
    "\uffaa\047\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa" +
    "\063\uffaa\070\uffaa\001\002\000\040\014\141\040\106\041" +
    "\076\042\113\043\101\044\102\045\111\046\100\047\075" +
    "\056\105\057\112\060\104\061\103\062\077\063\110\001" +
    "\002\000\046\012\uffef\014\uffef\017\uffef\040\uffef\041\uffef" +
    "\042\uffef\043\uffef\044\uffef\045\uffef\046\uffef\047\uffef\056" +
    "\uffef\057\uffef\060\uffef\061\uffef\062\uffef\063\uffef\070\uffef" +
    "\001\002\000\046\012\uffee\014\uffee\017\uffee\040\uffee\041" +
    "\uffee\042\uffee\043\uffee\044\uffee\045\uffee\046\uffee\047\uffee" +
    "\056\uffee\057\uffee\060\uffee\061\uffee\062\uffee\063\uffee\070" +
    "\uffee\001\002\000\034\011\044\020\045\021\041\022\061" +
    "\023\043\036\055\050\056\052\057\053\054\054\063\055" +
    "\060\057\051\067\047\001\002\000\046\012\ufff0\014\ufff0" +
    "\017\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\045" +
    "\ufff0\046\ufff0\047\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0" +
    "\062\ufff0\063\ufff0\070\ufff0\001\002\000\006\066\067\067" +
    "\136\001\002\000\046\012\ufff1\014\ufff1\017\ufff1\040\ufff1" +
    "\041\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047" +
    "\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1" +
    "\070\ufff1\001\002\000\046\012\uff9c\014\uff9c\017\uff9c\040" +
    "\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c" +
    "\047\uff9c\056\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c\063" +
    "\uff9c\070\uff9c\001\002\000\006\066\067\067\065\001\002" +
    "\000\046\012\uffa9\014\uffa9\017\uffa9\040\uffa9\041\uffa9\042" +
    "\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\056\uffa9" +
    "\057\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9\070\uffa9\001" +
    "\002\000\050\012\uff9d\013\132\014\uff9d\017\uff9d\040\uff9d" +
    "\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047" +
    "\uff9d\056\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d" +
    "\070\uff9d\001\002\000\046\012\uffa6\014\uffa6\017\uffa6\040" +
    "\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6" +
    "\047\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6\063" +
    "\uffa6\070\uffa6\001\002\000\016\004\035\005\015\006\021" +
    "\007\017\010\014\037\016\001\002\000\004\067\071\001" +
    "\002\000\004\013\072\001\002\000\036\011\044\014\073" +
    "\020\045\021\041\022\061\023\043\036\055\050\056\052" +
    "\057\053\054\054\063\055\060\057\051\067\047\001\002" +
    "\000\050\012\uffc3\014\uffc3\017\uffc3\040\uffc3\041\uffc3\042" +
    "\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\051\uffc3" +
    "\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\070" +
    "\uffc3\001\002\000\040\014\107\040\106\041\076\042\113" +
    "\043\101\044\102\045\111\046\100\047\075\056\105\057" +
    "\112\060\104\061\103\062\077\063\110\001\002\000\034" +
    "\011\044\020\045\021\041\022\061\023\043\036\055\050" +
    "\056\052\057\053\054\054\063\055\060\057\051\067\047" +
    "\001\002\000\034\011\044\020\045\021\041\022\061\023" +
    "\043\036\055\050\056\052\057\053\054\054\063\055\060" +
    "\057\051\067\047\001\002\000\034\011\044\020\045\021" +
    "\041\022\061\023\043\036\055\050\056\052\057\053\054" +
    "\054\063\055\060\057\051\067\047\001\002\000\034\011" +
    "\044\020\045\021\041\022\061\023\043\036\055\050\056" +
    "\052\057\053\054\054\063\055\060\057\051\067\047\001" +
    "\002\000\034\011\044\020\045\021\041\022\061\023\043" +
    "\036\055\050\056\052\057\053\054\054\063\055\060\057" +
    "\051\067\047\001\002\000\034\011\044\020\045\021\041" +
    "\022\061\023\043\036\055\050\056\052\057\053\054\054" +
    "\063\055\060\057\051\067\047\001\002\000\034\011\044" +
    "\020\045\021\041\022\061\023\043\036\055\050\056\052" +
    "\057\053\054\054\063\055\060\057\051\067\047\001\002" +
    "\000\034\011\044\020\045\021\041\022\061\023\043\036" +
    "\055\050\056\052\057\053\054\054\063\055\060\057\051" +
    "\067\047\001\002\000\034\011\044\020\045\021\041\022" +
    "\061\023\043\036\055\050\056\052\057\053\054\054\063" +
    "\055\060\057\051\067\047\001\002\000\034\011\044\020" +
    "\045\021\041\022\061\023\043\036\055\050\056\052\057" +
    "\053\054\054\063\055\060\057\051\067\047\001\002\000" +
    "\050\012\uffc2\014\uffc2\017\uffc2\040\uffc2\041\uffc2\042\uffc2" +
    "\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\051\uffc2\056" +
    "\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\070\uffc2" +
    "\001\002\000\034\011\044\020\045\021\041\022\061\023" +
    "\043\036\055\050\056\052\057\053\054\054\063\055\060" +
    "\057\051\067\047\001\002\000\034\011\044\020\045\021" +
    "\041\022\061\023\043\036\055\050\056\052\057\053\054" +
    "\054\063\055\060\057\051\067\047\001\002\000\034\011" +
    "\044\020\045\021\041\022\061\023\043\036\055\050\056" +
    "\052\057\053\054\054\063\055\060\057\051\067\047\001" +
    "\002\000\034\011\044\020\045\021\041\022\061\023\043" +
    "\036\055\050\056\052\057\053\054\054\063\055\060\057" +
    "\051\067\047\001\002\000\046\012\uff95\014\uff95\017\uff95" +
    "\040\uff95\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046" +
    "\100\047\075\056\uff95\057\uff95\060\uff95\061\uff95\062\uff95" +
    "\063\uff95\070\uff95\001\002\000\046\012\uffa5\014\uffa5\017" +
    "\uffa5\040\106\041\076\042\113\043\101\044\102\045\111" +
    "\046\100\047\075\056\uffa5\057\uffa5\060\104\061\103\062" +
    "\077\063\110\070\uffa5\001\002\000\046\012\uff94\014\uff94" +
    "\017\uff94\040\uff94\041\uff94\042\uff94\043\uff94\044\uff94\045" +
    "\uff94\046\100\047\075\056\uff94\057\uff94\060\uff94\061\uff94" +
    "\062\uff94\063\uff94\070\uff94\001\002\000\046\012\uffa1\014" +
    "\uffa1\017\uffa1\040\106\041\076\042\113\043\101\044\102" +
    "\045\111\046\100\047\075\056\uffa1\057\uffa1\060\uffa1\061" +
    "\uffa1\062\uffa1\063\uffa1\070\uffa1\001\002\000\046\012\uff98" +
    "\014\uff98\017\uff98\040\uff98\041\uff98\042\113\043\101\044" +
    "\102\045\111\046\100\047\075\056\uff98\057\uff98\060\uff98" +
    "\061\uff98\062\uff98\063\uff98\070\uff98\001\002\000\046\012" +
    "\uffa4\014\uffa4\017\uffa4\040\106\041\076\042\113\043\101" +
    "\044\102\045\111\046\100\047\075\056\uffa4\057\uffa4\060" +
    "\104\061\103\062\077\063\110\070\uffa4\001\002\000\046" +
    "\012\uffa2\014\uffa2\017\uffa2\040\106\041\076\042\113\043" +
    "\101\044\102\045\111\046\100\047\075\056\uffa2\057\uffa2" +
    "\060\uffa2\061\uffa2\062\077\063\110\070\uffa2\001\002\000" +
    "\046\012\uffa3\014\uffa3\017\uffa3\040\106\041\076\042\113" +
    "\043\101\044\102\045\111\046\100\047\075\056\uffa3\057" +
    "\uffa3\060\uffa3\061\uffa3\062\077\063\110\070\uffa3\001\002" +
    "\000\046\012\uff93\014\uff93\017\uff93\040\uff93\041\uff93\042" +
    "\uff93\043\uff93\044\uff93\045\uff93\046\100\047\075\056\uff93" +
    "\057\uff93\060\uff93\061\uff93\062\uff93\063\uff93\070\uff93\001" +
    "\002\000\046\012\uff96\014\uff96\017\uff96\040\uff96\041\uff96" +
    "\042\uff96\043\uff96\044\uff96\045\uff96\046\100\047\075\056" +
    "\uff96\057\uff96\060\uff96\061\uff96\062\uff96\063\uff96\070\uff96" +
    "\001\002\000\046\012\uff9b\014\uff9b\017\uff9b\040\uff9b\041" +
    "\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\075" +
    "\056\uff9b\057\uff9b\060\uff9b\061\uff9b\062\uff9b\063\uff9b\070" +
    "\uff9b\001\002\000\046\012\uffa0\014\uffa0\017\uffa0\040\106" +
    "\041\076\042\113\043\101\044\102\045\111\046\100\047" +
    "\075\056\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0" +
    "\070\uffa0\001\002\000\046\012\uff97\014\uff97\017\uff97\040" +
    "\uff97\041\uff97\042\113\043\101\044\102\045\111\046\100" +
    "\047\075\056\uff97\057\uff97\060\uff97\061\uff97\062\uff97\063" +
    "\uff97\070\uff97\001\002\000\046\012\uff9a\014\uff9a\017\uff9a" +
    "\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046" +
    "\uff9a\047\uff9a\056\uff9a\057\uff9a\060\uff9a\061\uff9a\062\uff9a" +
    "\063\uff9a\070\uff9a\001\002\000\036\011\044\014\133\020" +
    "\045\021\041\022\061\023\043\036\055\050\056\052\057" +
    "\053\054\054\063\055\060\057\051\067\047\001\002\000" +
    "\050\012\uffc0\014\uffc0\017\uffc0\040\uffc0\041\uffc0\042\uffc0" +
    "\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\051\uffc0\056" +
    "\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0\070\uffc0" +
    "\001\002\000\040\014\135\040\106\041\076\042\113\043" +
    "\101\044\102\045\111\046\100\047\075\056\105\057\112" +
    "\060\104\061\103\062\077\063\110\001\002\000\050\012" +
    "\uffc1\014\uffc1\017\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1" +
    "\044\uffc1\045\uffc1\046\uffc1\047\uffc1\051\uffc1\056\uffc1\057" +
    "\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\070\uffc1\001\002" +
    "\000\050\012\uff9e\013\132\014\uff9e\017\uff9e\040\uff9e\041" +
    "\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e" +
    "\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\070" +
    "\uff9e\001\002\000\046\012\uffa7\014\uffa7\017\uffa7\040\uffa7" +
    "\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047" +
    "\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7" +
    "\070\uffa7\001\002\000\046\012\uff99\014\uff99\017\uff99\040" +
    "\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99\046\uff99" +
    "\047\uff99\056\uff99\057\uff99\060\uff99\061\uff99\062\uff99\063" +
    "\uff99\070\uff99\001\002\000\006\012\uffb4\017\uffb4\001\002" +
    "\000\046\012\uff9f\014\uff9f\017\uff9f\040\106\041\076\042" +
    "\113\043\101\044\102\045\111\046\100\047\075\056\uff9f" +
    "\057\uff9f\060\104\061\103\062\077\063\110\070\uff9f\001" +
    "\002\000\034\011\044\020\045\021\041\022\061\023\043" +
    "\036\055\050\056\052\057\053\054\054\063\055\060\057" +
    "\051\067\047\001\002\000\040\011\044\012\uffb1\017\uffb1" +
    "\020\045\021\041\022\061\023\043\036\055\050\056\052" +
    "\057\053\054\054\063\055\060\057\051\067\047\001\002" +
    "\000\006\012\150\017\147\001\002\000\042\012\uffb3\017" +
    "\uffb3\040\106\041\076\042\113\043\101\044\102\045\111" +
    "\046\100\047\075\056\105\057\112\060\104\061\103\062" +
    "\077\063\110\001\002\000\034\011\044\020\045\021\041" +
    "\022\061\023\043\036\055\050\056\052\057\053\054\054" +
    "\063\055\060\057\051\067\047\001\002\000\046\012\uffdc" +
    "\014\uffdc\017\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044" +
    "\uffdc\045\uffdc\046\uffdc\047\uffdc\056\uffdc\057\uffdc\060\uffdc" +
    "\061\uffdc\062\uffdc\063\uffdc\070\uffdc\001\002\000\042\012" +
    "\uffb2\017\uffb2\040\106\041\076\042\113\043\101\044\102" +
    "\045\111\046\100\047\075\056\105\057\112\060\104\061" +
    "\103\062\077\063\110\001\002\000\040\014\153\040\106" +
    "\041\076\042\113\043\101\044\102\045\111\046\100\047" +
    "\075\056\105\057\112\060\104\061\103\062\077\063\110" +
    "\001\002\000\046\012\uffad\014\uffad\017\uffad\040\uffad\041" +
    "\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad" +
    "\056\uffad\057\uffad\060\uffad\061\uffad\062\uffad\063\uffad\070" +
    "\uffad\001\002\000\040\012\155\040\106\041\076\042\113" +
    "\043\101\044\102\045\111\046\100\047\075\056\105\057" +
    "\112\060\104\061\103\062\077\063\110\001\002\000\046" +
    "\012\uffac\014\uffac\017\uffac\040\uffac\041\uffac\042\uffac\043" +
    "\uffac\044\uffac\045\uffac\046\uffac\047\uffac\056\uffac\057\uffac" +
    "\060\uffac\061\uffac\062\uffac\063\uffac\070\uffac\001\002\000" +
    "\020\003\161\004\035\005\015\006\021\007\017\010\014" +
    "\037\016\001\002\000\004\015\ufff7\001\002\000\006\012" +
    "\uffb8\017\uffb8\001\002\000\006\012\uffb7\017\uffb7\001\002" +
    "\000\012\002\ufffc\003\ufffc\012\164\065\ufffc\001\002\000" +
    "\010\002\ufffd\003\ufffd\065\ufffd\001\002\000\004\015\ufff5" +
    "\001\002\000\032\003\210\015\165\016\172\024\201\027" +
    "\215\030\167\032\173\033\206\034\207\035\212\066\170" +
    "\067\176\001\002\000\010\002\ufffa\003\ufffa\065\ufffa\001" +
    "\002\000\030\003\210\015\165\024\201\027\215\030\167" +
    "\032\173\033\206\034\207\035\212\066\170\067\176\001" +
    "\002\000\016\004\035\005\015\006\021\007\017\010\014" +
    "\037\016\001\002\000\034\003\uffe1\015\uffe1\016\uffe1\024" +
    "\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1" +
    "\035\uffe1\066\uffe1\067\uffe1\001\002\000\044\002\uffdb\003" +
    "\uffdb\015\uffdb\016\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb" +
    "\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\065" +
    "\uffdb\066\uffdb\067\uffdb\001\002\000\036\011\044\020\045" +
    "\021\041\022\061\023\043\036\055\050\056\052\057\053" +
    "\054\054\063\055\060\057\051\067\047\070\317\001\002" +
    "\000\006\051\275\070\274\001\002\000\034\003\uffe5\015" +
    "\uffe5\016\uffe5\024\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5" +
    "\033\uffe5\034\uffe5\035\uffe5\066\uffe5\067\uffe5\001\002\000" +
    "\010\011\144\013\132\051\271\001\002\000\004\070\270" +
    "\001\002\000\032\003\uffd9\015\uffd9\016\uffd9\024\uffd9\027" +
    "\uffd9\030\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\066\uffd9" +
    "\067\uffd9\001\002\000\004\011\245\001\002\000\032\003" +
    "\210\015\165\016\243\024\201\027\215\030\167\032\173" +
    "\033\206\034\207\035\212\066\170\067\176\001\002\000" +
    "\034\003\uffe4\015\uffe4\016\uffe4\024\uffe4\027\uffe4\030\uffe4" +
    "\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\066\uffe4\067" +
    "\uffe4\001\002\000\034\003\uffe7\015\uffe7\016\uffe7\024\uffe7" +
    "\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035" +
    "\uffe7\066\uffe7\067\uffe7\001\002\000\032\003\uffd7\015\uffd7" +
    "\016\uffd7\024\uffd7\027\uffd7\030\uffd7\032\uffd7\033\uffd7\034" +
    "\uffd7\035\uffd7\066\uffd7\067\uffd7\001\002\000\004\070\242" +
    "\001\002\000\004\011\236\001\002\000\006\016\235\070" +
    "\234\001\002\000\034\003\uffe2\015\uffe2\016\uffe2\024\uffe2" +
    "\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035" +
    "\uffe2\066\uffe2\067\uffe2\001\002\000\004\011\230\001\002" +
    "\000\034\003\uffe3\015\uffe3\016\uffe3\024\uffe3\027\uffe3\030" +
    "\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\066\uffe3" +
    "\067\uffe3\001\002\000\034\003\uffe6\015\uffe6\016\uffe6\024" +
    "\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6" +
    "\035\uffe6\066\uffe6\067\uffe6\001\002\000\004\011\216\001" +
    "\002\000\004\067\217\001\002\000\004\051\220\001\002" +
    "\000\034\011\044\020\045\021\041\022\061\023\043\036" +
    "\055\050\056\052\057\053\054\054\063\055\060\057\051" +
    "\067\047\001\002\000\040\017\222\040\106\041\076\042" +
    "\113\043\101\044\102\045\111\046\100\047\075\056\105" +
    "\057\112\060\104\061\103\062\077\063\110\001\002\000" +
    "\034\011\044\020\045\021\041\022\061\023\043\036\055" +
    "\050\056\052\057\053\054\054\063\055\060\057\051\067" +
    "\047\001\002\000\040\017\224\040\106\041\076\042\113" +
    "\043\101\044\102\045\111\046\100\047\075\056\105\057" +
    "\112\060\104\061\103\062\077\063\110\001\002\000\034" +
    "\011\044\020\045\021\041\022\061\023\043\036\055\050" +
    "\056\052\057\053\054\054\063\055\060\057\051\067\047" +
    "\001\002\000\040\012\226\040\106\041\076\042\113\043" +
    "\101\044\102\045\111\046\100\047\075\056\105\057\112" +
    "\060\104\061\103\062\077\063\110\001\002\000\030\003" +
    "\210\015\165\024\201\027\215\030\167\032\173\033\206" +
    "\034\207\035\212\066\170\067\176\001\002\000\034\003" +
    "\uffcf\015\uffcf\016\uffcf\024\uffcf\027\uffcf\030\uffcf\031\uffcf" +
    "\032\uffcf\033\uffcf\034\uffcf\035\uffcf\066\uffcf\067\uffcf\001" +
    "\002\000\034\011\044\020\045\021\041\022\061\023\043" +
    "\036\055\050\056\052\057\053\054\054\063\055\060\057" +
    "\051\067\047\001\002\000\040\012\232\040\106\041\076" +
    "\042\113\043\101\044\102\045\111\046\100\047\075\056" +
    "\105\057\112\060\104\061\103\062\077\063\110\001\002" +
    "\000\004\070\233\001\002\000\034\003\uffdd\015\uffdd\016" +
    "\uffdd\024\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd" +
    "\034\uffdd\035\uffdd\066\uffdd\067\uffdd\001\002\000\034\003" +
    "\uffe0\015\uffe0\016\uffe0\024\uffe0\027\uffe0\030\uffe0\031\uffe0" +
    "\032\uffe0\033\uffe0\034\uffe0\035\uffe0\066\uffe0\067\uffe0\001" +
    "\002\000\034\003\uffdf\015\uffdf\016\uffdf\024\uffdf\027\uffdf" +
    "\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\066" +
    "\uffdf\067\uffdf\001\002\000\034\011\044\020\045\021\041" +
    "\022\061\023\043\036\055\050\056\052\057\053\054\054" +
    "\063\055\060\057\051\067\047\001\002\000\040\012\240" +
    "\040\106\041\076\042\113\043\101\044\102\045\111\046" +
    "\100\047\075\056\105\057\112\060\104\061\103\062\077" +
    "\063\110\001\002\000\004\070\241\001\002\000\034\003" +
    "\uffde\015\uffde\016\uffde\024\uffde\027\uffde\030\uffde\031\uffde" +
    "\032\uffde\033\uffde\034\uffde\035\uffde\066\uffde\067\uffde\001" +
    "\002\000\034\003\uffce\015\uffce\016\uffce\024\uffce\027\uffce" +
    "\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\066" +
    "\uffce\067\uffce\001\002\000\044\002\uffda\003\uffda\015\uffda" +
    "\016\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031" +
    "\uffda\032\uffda\033\uffda\034\uffda\035\uffda\065\uffda\066\uffda" +
    "\067\uffda\001\002\000\032\003\uffd8\015\uffd8\016\uffd8\024" +
    "\uffd8\027\uffd8\030\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8" +
    "\066\uffd8\067\uffd8\001\002\000\034\011\044\020\045\021" +
    "\041\022\061\023\043\036\055\050\056\052\057\053\054" +
    "\054\063\055\060\057\051\067\047\001\002\000\040\012" +
    "\247\040\106\041\076\042\113\043\101\044\102\045\111" +
    "\046\100\047\075\056\105\057\112\060\104\061\103\062" +
    "\077\063\110\001\002\000\004\015\165\001\002\000\040" +
    "\003\uffd6\015\uffd6\016\uffd6\024\uffd6\025\253\026\251\027" +
    "\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6" +
    "\066\uffd6\067\uffd6\001\002\000\004\015\165\001\002\000" +
    "\040\003\uffd4\015\uffd4\016\uffd4\024\uffd4\025\261\026\260" +
    "\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035" +
    "\uffd4\066\uffd4\067\uffd4\001\002\000\004\011\254\001\002" +
    "\000\034\011\044\020\045\021\041\022\061\023\043\036" +
    "\055\050\056\052\057\053\054\054\063\055\060\057\051" +
    "\067\047\001\002\000\040\012\256\040\106\041\076\042" +
    "\113\043\101\044\102\045\111\046\100\047\075\056\105" +
    "\057\112\060\104\061\103\062\077\063\110\001\002\000" +
    "\004\015\165\001\002\000\040\003\uffd2\015\uffd2\016\uffd2" +
    "\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032" +
    "\uffd2\033\uffd2\034\uffd2\035\uffd2\066\uffd2\067\uffd2\001\002" +
    "\000\004\015\165\001\002\000\004\011\262\001\002\000" +
    "\034\011\044\020\045\021\041\022\061\023\043\036\055" +
    "\050\056\052\057\053\054\054\063\055\060\057\051\067" +
    "\047\001\002\000\040\012\264\040\106\041\076\042\113" +
    "\043\101\044\102\045\111\046\100\047\075\056\105\057" +
    "\112\060\104\061\103\062\077\063\110\001\002\000\004" +
    "\015\165\001\002\000\040\003\uffd1\015\uffd1\016\uffd1\024" +
    "\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\066\uffd1\067\uffd1\001\002\000" +
    "\034\003\uffd3\015\uffd3\016\uffd3\024\uffd3\027\uffd3\030\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\066\uffd3\067" +
    "\uffd3\001\002\000\034\003\uffd5\015\uffd5\016\uffd5\024\uffd5" +
    "\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035" +
    "\uffd5\066\uffd5\067\uffd5\001\002\000\034\003\uffb0\015\uffb0" +
    "\016\uffb0\024\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033" +
    "\uffb0\034\uffb0\035\uffb0\066\uffb0\067\uffb0\001\002\000\034" +
    "\011\044\020\045\021\041\022\061\023\043\036\055\050" +
    "\056\052\057\053\054\054\063\055\060\057\051\067\047" +
    "\001\002\000\040\040\106\041\076\042\113\043\101\044" +
    "\102\045\111\046\100\047\075\056\105\057\112\060\104" +
    "\061\103\062\077\063\110\070\273\001\002\000\034\003" +
    "\uffbd\015\uffbd\016\uffbd\024\uffbd\027\uffbd\030\uffbd\031\uffbd" +
    "\032\uffbd\033\uffbd\034\uffbd\035\uffbd\066\uffbd\067\uffbd\001" +
    "\002\000\034\003\uffbc\015\uffbc\016\uffbc\024\uffbc\027\uffbc" +
    "\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\066" +
    "\uffbc\067\uffbc\001\002\000\036\011\044\015\277\020\045" +
    "\021\041\022\061\023\043\036\055\050\056\052\057\053" +
    "\054\054\063\055\060\057\051\067\047\001\002\000\004" +
    "\070\315\001\002\000\010\016\302\021\305\023\303\001" +
    "\002\000\040\040\106\041\076\042\113\043\101\044\102" +
    "\045\111\046\100\047\075\056\105\057\112\060\104\061" +
    "\103\062\077\063\110\070\301\001\002\000\034\003\uffba" +
    "\015\uffba\016\uffba\024\uffba\027\uffba\030\uffba\031\uffba\032" +
    "\uffba\033\uffba\034\uffba\035\uffba\066\uffba\067\uffba\001\002" +
    "\000\004\070\uffca\001\002\000\006\016\uffc5\017\uffc5\001" +
    "\002\000\006\016\uffc8\017\313\001\002\000\006\016\uffc7" +
    "\017\uffc7\001\002\000\006\016\uffc9\017\311\001\002\000" +
    "\004\016\310\001\002\000\004\070\uffcb\001\002\000\004" +
    "\021\312\001\002\000\006\016\uffc6\017\uffc6\001\002\000" +
    "\004\023\314\001\002\000\006\016\uffc4\017\uffc4\001\002" +
    "\000\034\003\uffbb\015\uffbb\016\uffbb\024\uffbb\027\uffbb\030" +
    "\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\066\uffbb" +
    "\067\uffbb\001\002\000\040\040\106\041\076\042\113\043" +
    "\101\044\102\045\111\046\100\047\075\056\105\057\112" +
    "\060\104\061\103\062\077\063\110\070\320\001\002\000" +
    "\034\003\uffcd\015\uffcd\016\uffcd\024\uffcd\027\uffcd\030\uffcd" +
    "\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\066\uffcd\067" +
    "\uffcd\001\002\000\034\003\uffcc\015\uffcc\016\uffcc\024\uffcc" +
    "\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035" +
    "\uffcc\066\uffcc\067\uffcc\001\002\000\004\067\322\001\002" +
    "\000\010\013\072\051\323\070\324\001\002\000\034\011" +
    "\044\020\045\021\041\022\061\023\043\036\055\050\056" +
    "\052\057\053\054\054\063\055\060\057\051\067\047\001" +
    "\002\000\034\003\uffbe\015\uffbe\016\uffbe\024\uffbe\027\uffbe" +
    "\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\066" +
    "\uffbe\067\uffbe\001\002\000\040\040\106\041\076\042\113" +
    "\043\101\044\102\045\111\046\100\047\075\056\105\057" +
    "\112\060\104\061\103\062\077\063\110\070\326\001\002" +
    "\000\034\003\uffbf\015\uffbf\016\uffbf\024\uffbf\027\uffbf\030" +
    "\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\066\uffbf" +
    "\067\uffbf\001\002\000\004\031\330\001\002\000\004\011" +
    "\331\001\002\000\034\011\044\020\045\021\041\022\061" +
    "\023\043\036\055\050\056\052\057\053\054\054\063\055" +
    "\060\057\051\067\047\001\002\000\040\012\333\040\106" +
    "\041\076\042\113\043\101\044\102\045\111\046\100\047" +
    "\075\056\105\057\112\060\104\061\103\062\077\063\110" +
    "\001\002\000\004\070\334\001\002\000\034\003\uffd0\015" +
    "\uffd0\016\uffd0\024\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0" +
    "\033\uffd0\034\uffd0\035\uffd0\066\uffd0\067\uffd0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\006\002\004\041\003\001\001\000\010\003" +
    "\010\004\006\005\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\165\001\001\000\002\001\001\000" +
    "\006\004\006\005\162\001\001\000\002\001\001\000\004" +
    "\007\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\027" +
    "\001\001\000\010\007\033\030\031\031\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\006\041\033\052\034\061\035\051\036\063" +
    "\037\045\040\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\006\041\033\153\034\061" +
    "\035\051\036\063\037\045\040\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\006\041\033\141\034\061\035\051\036\063\037" +
    "\045\040\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\006\041\033" +
    "\137\034\061\035\051\036\063\037\045\040\047\001\001" +
    "\000\002\001\001\000\004\026\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\006\041\033\073\034\061\035\051\036\063\037\045\040" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\006\041\033\130\034\061\035\051\036\063\037\045\040" +
    "\047\001\001\000\020\006\041\033\127\034\061\035\051" +
    "\036\063\037\045\040\047\001\001\000\020\006\041\033" +
    "\126\034\061\035\051\036\063\037\045\040\047\001\001" +
    "\000\020\006\041\033\125\034\061\035\051\036\063\037" +
    "\045\040\047\001\001\000\020\006\041\033\124\034\061" +
    "\035\051\036\063\037\045\040\047\001\001\000\020\006" +
    "\041\033\123\034\061\035\051\036\063\037\045\040\047" +
    "\001\001\000\020\006\041\033\122\034\061\035\051\036" +
    "\063\037\045\040\047\001\001\000\020\006\041\033\121" +
    "\034\061\035\051\036\063\037\045\040\047\001\001\000" +
    "\020\006\041\033\120\034\061\035\051\036\063\037\045" +
    "\040\047\001\001\000\020\006\041\033\117\034\061\035" +
    "\051\036\063\037\045\040\047\001\001\000\002\001\001" +
    "\000\020\006\041\033\116\034\061\035\051\036\063\037" +
    "\045\040\047\001\001\000\020\006\041\033\115\034\061" +
    "\035\051\036\063\037\045\040\047\001\001\000\020\006" +
    "\041\033\114\034\061\035\051\036\063\037\045\040\047" +
    "\001\001\000\020\006\041\033\113\034\061\035\051\036" +
    "\063\037\045\040\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\006\041\033\133\034\061\035\051\036\063\037\045\040" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\006\041" +
    "\033\151\034\061\035\051\036\063\037\045\040\047\001" +
    "\001\000\022\006\041\032\144\033\145\034\061\035\051" +
    "\036\063\037\045\040\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\006\041\033\150\034\061\035\051" +
    "\036\063\037\045\040\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\033\031\157\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\010\204\011\210\012\170\013\203\014\201\015\177" +
    "\016\174\020\202\021\212\026\173\027\213\040\176\001" +
    "\001\000\002\001\001\000\026\010\326\011\210\012\170" +
    "\013\203\016\174\020\202\021\212\026\173\027\213\040" +
    "\176\001\001\000\004\007\320\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\006\041\033\315\034\061\035" +
    "\051\036\063\037\045\040\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\010\204\011\210" +
    "\012\170\013\203\015\243\016\174\020\202\021\212\026" +
    "\173\027\213\040\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\006\041\033\220" +
    "\034\061\035\051\036\063\037\045\040\047\001\001\000" +
    "\002\001\001\000\020\006\041\033\222\034\061\035\051" +
    "\036\063\037\045\040\047\001\001\000\002\001\001\000" +
    "\020\006\041\033\224\034\061\035\051\036\063\037\045" +
    "\040\047\001\001\000\002\001\001\000\026\010\226\011" +
    "\210\012\170\013\203\016\174\020\202\021\212\026\173" +
    "\027\213\040\176\001\001\000\002\001\001\000\020\006" +
    "\041\033\230\034\061\035\051\036\063\037\045\040\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\006\041" +
    "\033\236\034\061\035\051\036\063\037\045\040\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\006\041\033\245\034\061\035\051\036\063\037\045" +
    "\040\047\001\001\000\002\001\001\000\004\013\247\001" +
    "\001\000\004\017\251\001\001\000\004\013\266\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\006\041\033" +
    "\254\034\061\035\051\036\063\037\045\040\047\001\001" +
    "\000\002\001\001\000\004\013\256\001\001\000\002\001" +
    "\001\000\004\013\265\001\001\000\002\001\001\000\020" +
    "\006\041\033\262\034\061\035\051\036\063\037\045\040" +
    "\047\001\001\000\002\001\001\000\004\013\264\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\006\041\033\271\034\061\035\051" +
    "\036\063\037\045\040\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\006\041\022\275" +
    "\033\277\034\061\035\051\036\063\037\045\040\047\001" +
    "\001\000\002\001\001\000\010\023\306\024\305\025\303" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\006\041\033\324\034\061\035\051\036\063\037" +
    "\045\040\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\006\041\033\331\034\061\035\051\036\063\037\045" +
    "\040\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


  LexerCup lex;
  public ArrayList<String> errores = new ArrayList<String>();
  @SuppressWarnings("deprecation")
  public Sintax(LexerCup lex){
    this.lex=lex;
    this.symbolFactory= new DefaultSymbolFactory();
  };
/*
public void syntax_error(Symbol cur_token){

     
    if (cur_token!=null){
        String cadenaError="Error de sintaxis en la línea " + (cur_token.left+1) + " y columna " + (cur_token.right+1)+ ". Token que generó el error: "+ lex.yytext();
        System.err.println(cadenaError);
        this.errores.add(cadenaError);
        
    }
    else{
        String cadenaError="Error de sintaxis en la línea " + (cur_token.left+1) + " y columna " + (cur_token.right+1)+". Token: "+ cur_token.value;
        System.err.println(cadenaError);
        this.errores.add(cadenaError);
    }
	
}

public void unrecovered_syntax_error(Symbol token) throws java.lang.Exception {
    if (token!=null){
        throw new Exception("Error de sintaxis no puede ser recuperado. Encontrado en la línea " + (token.left+1) + " columna " + (token.right+1) + ". Token que generó el error: " + lex.yytext());
  
    }
    else{
        throw new Exception("Error de sintaxis no puede ser recuperado. Encontrado en la línea " + (token.left+1) + " columna " + (token.right+1) + ". Token que generó el error: " + token.value);
    }
    
}
*/
public void syntax_error(Symbol cur_token){

     
    if (cur_token!=null){
        String cadenaError="Error de sintaxis en la línea " + (cur_token.left+1) + " y columna " + (cur_token.right+1)+ ". Token que generó el error: "+ lex.yytext();
        System.err.println(cadenaError);
        this.errores.add(cadenaError);
        
    }
    else{
        String cadenaError="Error de sintaxis en la línea " + (cur_token.left+1) + " y columna " + (cur_token.right+1)+". Token: "+ cur_token.value;
        System.err.println(cadenaError);
        this.errores.add(cadenaError);
    }
	
}

public void unrecovered_syntax_error(Symbol token) throws java.lang.Exception {
    if (token!=null){
        throw new Exception("Error de sintaxis no puede ser recuperado. Encontrado en la línea " + (token.left+1) + " columna " + (token.right+1) + ". Token que generó el error: " + lex.yytext());
  
    }
    else{
        throw new Exception("Error de sintaxis no puede ser recuperado. Encontrado en la línea " + (token.left+1) + " columna " + (token.right+1) + ". Token que generó el error: " + token.value);
    }
    
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {



    HashMap<String, ArrayList<SymbolT>> listaTablasSimbolos = new HashMap<String, ArrayList<SymbolT>>();
    String currentHash;

    public void imprimirTablaSimbolos(){
        for (String key: listaTablasSimbolos.keySet()){

            System.out.println("\n\n\n°-------------------------------------------------------------------------------------°");
            System.out.println("\n\t\t\t\tTabla de simbolos: " + key + "\n");
            System.out.println("\t~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
            System.out.println("\t\t\t\t\tValores:");
            System.out.println("\t~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

            System.out.println("\t\t" + String.format("%-20s %-20s %-20s", "valor", "tipo", "lexema") + "\n");
            for (SymbolT item: listaTablasSimbolos.get(key)) {
                System.out.println("\t\t" + item.toString());
            }
            System.out.println("\n\t~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
            System.out.println("");
            System.out.println("°-------------------------------------------------------------------------------------°");
        }
    }

    String MarkdownFilePath = (System.getProperty("user.dir") +"/testExamples/SymbolTable.md");
    
    public void guardarTablaSimbolos(){
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(MarkdownFilePath))) {
            for (Map.Entry<String, ArrayList<SymbolT>> entry : listaTablasSimbolos.entrySet()) {
                writer.write("## " + entry.getKey() + "\n\n");
                writer.write("| Valor | Tipo | Lexema |\n");
                writer.write("|-------|------|--------|\n");
                for (SymbolT symbol : entry.getValue()) {
                    writer.write("| " + symbol.getValor() + " | " + symbol.getTipo() + " | " + symbol.getLexema() + " |\n");
                }
                writer.write("\n");
            }
            System.out.println("Markdown file created successfully: " + MarkdownFilePath);
        } catch (IOException e) {
            System.err.println("Error writing the file: " + e.getMessage());
        }
    }

    

    public void definirHash(String hash) {
        currentHash = hash;
        listaTablasSimbolos.put(hash, new ArrayList<SymbolT>());
    }

    public void anadirSimbolo(SymbolT sym){
        listaTablasSimbolos.get(currentHash).add(sym);
    }


  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= navidad EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
System.out.println("Inicio de parseo");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // navidad ::= NT$0 navidadAux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		imprimirTablaSimbolos(); guardarTablaSimbolos(); System.out.println("Fin de parseo");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("navidad",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // navidadAux ::= saco_function_definition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("navidadAux",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // navidadAux ::= navidadAux saco_function_definition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("navidadAux",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // navidadAux ::= navidadAux error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("navidadAux",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // navidadAux ::= error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("navidadAux",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // saco_function_definition ::= saco_function_definition_aux calcetin_compound_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("saco_function_definition",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // saco_function_definition_aux ::= RECORRIDO NOEL MAINNAVIDAD ABRECUENTO CIERRACUENTO 
            {
              Object RESULT =null;
		definirHash("main");
                                                                                                         anadirSimbolo(new SymbolT("function", "integer", "Main"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("saco_function_definition_aux",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$1 ::= 
            {
              Object RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
definirHash(id.toString());
                                                                                                         anadirSimbolo(new SymbolT("function", ty.toString(), id.toString()));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$1",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // saco_function_definition_aux ::= RECORRIDO gorro_navidad_type_specifier PERSONA ABRECUENTO NT$1 pesebre_args CIERRACUENTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("saco_function_definition_aux",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // saco_function_definition_aux ::= RECORRIDO gorro_navidad_type_specifier PERSONA ABRECUENTO CIERRACUENTO 
            {
              Object RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		definirHash(id.toString());
                                                                                                         anadirSimbolo(new SymbolT("function", ty.toString(), id.toString()));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("saco_function_definition_aux",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // saco_function_definition_aux ::= error CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("saco_function_definition_aux",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // arbol_constant ::= l_NOEL 
            {
              Object RESULT =null;
		int l_intleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int l_intright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l_int = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = l_int;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // arbol_constant ::= l_NICOLAS 
            {
              Object RESULT =null;
		int l_floleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int l_floright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l_flo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = l_flo;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // arbol_constant ::= l_COLACHO 
            {
              Object RESULT =null;
		int l_chleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int l_chright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l_ch = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = l_ch;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // arbol_constant ::= l_SANTA 
            {
              Object RESULT =null;
		int l_stleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int l_stright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l_st = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = l_st;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // arbol_constant ::= l_t_CLAUS 
            {
              Object RESULT =null;
		int l_tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int l_tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l_t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = l_t;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // arbol_constant ::= l_f_CLAUS 
            {
              Object RESULT =null;
		int l_fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int l_fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l_f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = l_f;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // arbol_constant ::= NARIZROJA 
            {
              Object RESULT =null;
		int nilleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nilright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object nil = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = nil;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // gorro_navidad_type_specifier ::= SINREGALO 
            {
              Object RESULT =null;
		int srleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int srright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object sr = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = sr;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("gorro_navidad_type_specifier",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // gorro_navidad_type_specifier ::= COLACHO 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = c;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("gorro_navidad_type_specifier",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // gorro_navidad_type_specifier ::= SANTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = s;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("gorro_navidad_type_specifier",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // gorro_navidad_type_specifier ::= NOEL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = n;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("gorro_navidad_type_specifier",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // gorro_navidad_type_specifier ::= NICOLAS 
            {
              Object RESULT =null;
		int nileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int niright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ni = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = ni;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("gorro_navidad_type_specifier",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // gorro_navidad_type_specifier ::= CLAUS 
            {
              Object RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = cl;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("gorro_navidad_type_specifier",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement_risa_santa ::= calcetin_compound_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_risa_santa",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement_risa_santa ::= candelabro_assignment_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_risa_santa",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement_risa_santa ::= deseos_selection_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_risa_santa",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement_risa_santa ::= caramelo_iteration_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_risa_santa",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement_risa_santa ::= calcetin_jump_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_risa_santa",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement_risa_santa ::= lazo_io_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_risa_santa",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement_risa_santa ::= belen_function_call_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_risa_santa",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement_risa_santa ::= error FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_risa_santa",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement_risa_santa ::= error CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_risa_santa",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lazo_io_statement ::= NARRA ABRECUENTO incienzo_expression CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lazo_io_statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lazo_io_statement ::= ESCUCHA ABRECUENTO incienzo_expression CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lazo_io_statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // belen_function_call_expression ::= PERSONA ABRECUENTO reyes_magicos_list_expr CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("belen_function_call_expression",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // calcetin_compound_statement ::= ABREREGALO CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("calcetin_compound_statement",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // calcetin_compound_statement ::= ABREREGALO empaque_block_item_list CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("calcetin_compound_statement",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // empaque_block_item_list ::= carta_block_item 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("empaque_block_item_list",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // empaque_block_item_list ::= empaque_block_item_list carta_block_item 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("empaque_block_item_list",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // carta_block_item ::= statement_risa_santa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("carta_block_item",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // deseos_selection_statement ::= ELFO ABRECUENTO incienzo_expression CIERRACUENTO calcetin_compound_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("deseos_selection_statement",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // deseos_selection_statement ::= ELFO ABRECUENTO incienzo_expression CIERRACUENTO calcetin_compound_statement DUENDE calcetin_compound_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("deseos_selection_statement",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // deseos_selection_statement ::= ELFO ABRECUENTO incienzo_expression CIERRACUENTO calcetin_compound_statement tradicion_elif_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("deseos_selection_statement",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // deseos_selection_statement ::= ELFO ABRECUENTO incienzo_expression CIERRACUENTO calcetin_compound_statement tradicion_elif_statement DUENDE calcetin_compound_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("deseos_selection_statement",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tradicion_elif_statement ::= HADA ABRECUENTO incienzo_expression CIERRACUENTO calcetin_compound_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tradicion_elif_statement",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tradicion_elif_statement ::= tradicion_elif_statement HADA ABRECUENTO incienzo_expression CIERRACUENTO calcetin_compound_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tradicion_elif_statement",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // caramelo_iteration_statement ::= HACE statement_risa_santa REVISA ABRECUENTO incienzo_expression CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("caramelo_iteration_statement",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // caramelo_iteration_statement ::= ENVUELVE ABRECUENTO PERSONA ENTREGA incienzo_expression CHIMENEA incienzo_expression CHIMENEA incienzo_expression CIERRACUENTO statement_risa_santa 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("caramelo_iteration_statement",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // calcetin_jump_statement ::= CORTA FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("calcetin_jump_statement",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // calcetin_jump_statement ::= ENVIA FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("calcetin_jump_statement",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // calcetin_jump_statement ::= ENVIA incienzo_expression FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("calcetin_jump_statement",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // nochebuena_initializer ::= ABREREGALO pino_initializer_list CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("nochebuena_initializer",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // nochebuena_initializer ::= ABREREGALO CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("nochebuena_initializer",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // pino_initializer_list ::= campanas_initializer_list_integer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pino_initializer_list",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // pino_initializer_list ::= guirnaldas_initializer_list_char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pino_initializer_list",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // campanas_initializer_list_integer ::= l_NOEL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("campanas_initializer_list_integer",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // campanas_initializer_list_integer ::= campanas_initializer_list_integer CHIMENEA l_NOEL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("campanas_initializer_list_integer",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // guirnaldas_initializer_list_char ::= l_COLACHO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("guirnaldas_initializer_list_char",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // guirnaldas_initializer_list_char ::= guirnaldas_initializer_list_char CHIMENEA l_COLACHO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("guirnaldas_initializer_list_char",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // estrella_assign_array ::= LOCALCOLOCARREGALO gorro_navidad_type_specifier PERSONA ABREEMPAQUE CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		anadirSimbolo(new SymbolT("variable local", ty.toString(), id.toString()));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estrella_assign_array",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // estrella_assign_array ::= LOCALCOLOCARREGALO gorro_navidad_type_specifier PERSONA ABREEMPAQUE incienzo_expression CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		anadirSimbolo(new SymbolT("variable local", ty.toString(), id.toString()));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estrella_assign_array",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // estrella_assign_array ::= PERSONA ABREEMPAQUE incienzo_expression CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estrella_assign_array",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // estrella_assign_array ::= PERSONA ABREEMPAQUE CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estrella_assign_array",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // candelabro_assignment_expression ::= LOCALCOLOCARREGALO gorro_navidad_type_specifier PERSONA ENTREGA incienzo_expression FINREGALO 
            {
              Object RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		anadirSimbolo(new SymbolT("variable local", ty.toString(), id.toString()));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("candelabro_assignment_expression",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // candelabro_assignment_expression ::= LOCALCOLOCARREGALO gorro_navidad_type_specifier PERSONA FINREGALO 
            {
              Object RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		anadirSimbolo(new SymbolT("variable local", ty.toString(), id.toString()));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("candelabro_assignment_expression",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // candelabro_assignment_expression ::= PERSONA ENTREGA incienzo_expression FINREGALO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("candelabro_assignment_expression",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // candelabro_assignment_expression ::= estrella_assign_array FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("candelabro_assignment_expression",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // candelabro_assignment_expression ::= estrella_assign_array ENTREGA nochebuena_initializer FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("candelabro_assignment_expression",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // candelabro_assignment_expression ::= estrella_assign_array ENTREGA incienzo_expression FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("candelabro_assignment_expression",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // pesebre_args ::= pesebre_arg 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pesebre_args",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // pesebre_args ::= pesebre_args CHIMENEA pesebre_arg 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pesebre_args",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // pesebre_args ::= pesebre_args CHIMENEA error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pesebre_args",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // pesebre_args ::= error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pesebre_args",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // pesebre_arg ::= gorro_navidad_type_specifier PERSONA 
            {
              Object RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		anadirSimbolo(new SymbolT("argumento de funcion", ty.toString(), id.toString()));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pesebre_arg",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // pesebre_arg ::= gorro_navidad_type_specifier PERSONA ABREEMPAQUE incienzo_expression CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		anadirSimbolo(new SymbolT("argumento de funcion", ty.toString(), id.toString()));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pesebre_arg",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // reyes_magicos_list_expr ::= incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reyes_magicos_list_expr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // reyes_magicos_list_expr ::= reyes_magicos_list_expr CHIMENEA incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reyes_magicos_list_expr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // reyes_magicos_list_expr ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reyes_magicos_list_expr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // belen_function_call_statement ::= belen_function_call_expression FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("belen_function_call_statement",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // incienzo_expression ::= arbol_constant 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // incienzo_expression ::= PERSONA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // incienzo_expression ::= PERSONA ABREEMPAQUE incienzo_expression CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // incienzo_expression ::= ABRECUENTO incienzo_expression CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // incienzo_expression ::= belen_function_call_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // incienzo_expression ::= bastoncillo_arithmetic_expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // incienzo_expression ::= galleta_logic_expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // incienzo_expression ::= leche_relational_expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // diciembre_operation_array ::= QUIEN estrella_assign_array 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("diciembre_operation_array",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // diciembre_operation_array ::= GRINCH estrella_assign_array 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("diciembre_operation_array",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // bastoncillo_arithmetic_expr ::= incienzo_expression TRUENO incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // bastoncillo_arithmetic_expr ::= incienzo_expression RODOLFO incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // bastoncillo_arithmetic_expr ::= incienzo_expression JUGUETON incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // bastoncillo_arithmetic_expr ::= incienzo_expression RELAMPAGO incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // bastoncillo_arithmetic_expr ::= incienzo_expression CUPIDO incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // bastoncillo_arithmetic_expr ::= incienzo_expression COMETA incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // bastoncillo_arithmetic_expr ::= TRUENO incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // bastoncillo_arithmetic_expr ::= QUIEN PERSONA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // bastoncillo_arithmetic_expr ::= GRINCH PERSONA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // bastoncillo_arithmetic_expr ::= diciembre_operation_array 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // galleta_logic_expr ::= incienzo_expression GASPAR incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("galleta_logic_expr",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // galleta_logic_expr ::= incienzo_expression MELCHOR incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("galleta_logic_expr",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // galleta_logic_expr ::= BALTASAR incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("galleta_logic_expr",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // leche_relational_expr ::= incienzo_expression ALABASTRO incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("leche_relational_expr",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // leche_relational_expr ::= incienzo_expression EVERGEEN incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("leche_relational_expr",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // leche_relational_expr ::= incienzo_expression MINSTIX incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("leche_relational_expr",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // leche_relational_expr ::= incienzo_expression UPATREE incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("leche_relational_expr",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // leche_relational_expr ::= incienzo_expression OPENSLAE incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("leche_relational_expr",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // leche_relational_expr ::= incienzo_expression MARY incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("leche_relational_expr",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
