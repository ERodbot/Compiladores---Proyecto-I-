
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizer;

import java_cup.runtime.*;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\165\000\002\002\004\000\002\042\002\000\002\002" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\004" +
    "\000\002\003\003\000\002\005\004\000\002\004\007\000" +
    "\002\043\002\000\002\004\011\000\002\004\007\000\002" +
    "\004\004\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\004\000\002\010\004\000" +
    "\002\011\007\000\002\011\007\000\002\011\007\000\002" +
    "\041\006\000\002\041\005\000\002\013\004\000\002\013" +
    "\005\000\002\014\003\000\002\014\004\000\002\015\003" +
    "\000\002\016\007\000\002\016\011\000\002\016\010\000" +
    "\002\016\012\000\002\017\007\000\002\017\010\000\002" +
    "\044\002\000\002\020\012\000\002\045\002\000\002\046" +
    "\002\000\002\047\002\000\002\050\002\000\002\020\021" +
    "\000\002\021\004\000\002\021\004\000\002\021\005\000" +
    "\002\022\005\000\002\022\004\000\002\023\003\000\002" +
    "\023\003\000\002\024\003\000\002\024\005\000\002\025" +
    "\003\000\002\025\005\000\002\026\007\000\002\026\010" +
    "\000\002\026\005\000\002\027\006\000\002\030\010\000" +
    "\002\030\006\000\002\030\006\000\002\030\004\000\002" +
    "\030\006\000\002\030\006\000\002\031\003\000\002\031" +
    "\005\000\002\031\005\000\002\031\003\000\002\032\004" +
    "\000\002\032\007\000\002\033\003\000\002\033\005\000" +
    "\002\012\004\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\005\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\035\004" +
    "\000\002\035\004\000\002\036\005\000\002\036\005\000" +
    "\002\036\005\000\002\036\005\000\002\036\005\000\002" +
    "\036\005\000\002\036\004\000\002\036\004\000\002\036" +
    "\004\000\002\036\003\000\002\037\005\000\002\037\005" +
    "\000\002\037\004\000\002\040\005\000\002\040\005\000" +
    "\002\040\005\000\002\040\005\000\002\040\005\000\002" +
    "\040\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\006\003\000\065\000\001\002\000\006\003" +
    "\010\065\013\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\004\015\154\001\002\000\012\002" +
    "\ufffb\003\ufffb\012\153\065\ufffb\001\002\000\010\002\uffff" +
    "\003\151\065\013\001\002\000\010\002\ufffe\003\ufffe\065" +
    "\ufffe\001\002\000\016\004\022\005\015\006\021\007\017" +
    "\010\014\037\016\001\002\000\004\067\uffe8\001\002\000" +
    "\004\067\uffe9\001\002\000\004\067\uffed\001\002\000\004" +
    "\067\uffec\001\002\000\004\067\026\001\002\000\004\067" +
    "\uffeb\001\002\000\006\064\023\067\uffea\001\002\000\004" +
    "\011\024\001\002\000\004\012\025\001\002\000\004\015" +
    "\ufff9\001\002\000\004\011\027\001\002\000\022\003\ufff8" +
    "\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\012\031\037" +
    "\ufff8\001\002\000\020\003\036\004\035\005\015\006\021" +
    "\007\017\010\014\037\016\001\002\000\004\015\ufff6\001" +
    "\002\000\006\012\146\017\145\001\002\000\006\012\uffb2" +
    "\017\uffb2\001\002\000\004\067\037\001\002\000\004\067" +
    "\uffea\001\002\000\006\012\uffaf\017\uffaf\001\002\000\010" +
    "\012\uffae\013\040\017\uffae\001\002\000\034\011\044\020" +
    "\045\021\041\022\061\023\043\036\055\050\056\052\057" +
    "\053\054\054\063\055\060\057\051\067\047\001\002\000" +
    "\046\012\ufff4\014\ufff4\017\ufff4\040\ufff4\041\ufff4\042\ufff4" +
    "\043\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4\056\ufff4\057" +
    "\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\070\ufff4\001\002" +
    "\000\046\012\uffa9\014\uffa9\017\uffa9\040\uffa9\041\uffa9\042" +
    "\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\056\uffa9" +
    "\057\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9\070\uffa9\001" +
    "\002\000\046\012\ufff2\014\ufff2\017\ufff2\040\ufff2\041\ufff2" +
    "\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\056" +
    "\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\070\ufff2" +
    "\001\002\000\034\011\044\020\045\021\041\022\061\023" +
    "\043\036\055\050\056\052\057\053\054\054\063\055\060" +
    "\057\051\067\047\001\002\000\046\012\ufff3\014\ufff3\017" +
    "\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3" +
    "\046\ufff3\047\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\062" +
    "\ufff3\063\ufff3\070\ufff3\001\002\000\046\012\uffa2\014\uffa2" +
    "\017\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045" +
    "\uffa2\046\uffa2\047\uffa2\056\uffa2\057\uffa2\060\uffa2\061\uffa2" +
    "\062\uffa2\063\uffa2\070\uffa2\001\002\000\052\011\134\012" +
    "\uffa8\013\070\014\uffa8\017\uffa8\040\uffa8\041\uffa8\042\uffa8" +
    "\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\056\uffa8\057" +
    "\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8\070\uffa8\001\002" +
    "\000\046\012\uffa6\014\uffa6\017\uffa6\040\uffa6\041\uffa6\042" +
    "\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\056\uffa6" +
    "\057\uffa6\060\uffa6\061\uffa6\062\uffa6\063\uffa6\070\uffa6\001" +
    "\002\000\034\011\044\020\045\021\041\022\061\023\043" +
    "\036\055\050\056\052\057\053\054\054\063\055\060\057" +
    "\051\067\047\001\002\000\046\012\uffa4\014\uffa4\017\uffa4" +
    "\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046" +
    "\uffa4\047\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4" +
    "\063\uffa4\070\uffa4\001\002\000\040\014\132\040\103\041" +
    "\072\042\110\043\076\044\077\045\104\046\075\047\073" +
    "\056\102\057\107\060\101\061\100\062\074\063\106\001" +
    "\002\000\046\012\uffef\014\uffef\017\uffef\040\uffef\041\uffef" +
    "\042\uffef\043\uffef\044\uffef\045\uffef\046\uffef\047\uffef\056" +
    "\uffef\057\uffef\060\uffef\061\uffef\062\uffef\063\uffef\070\uffef" +
    "\001\002\000\046\012\uffee\014\uffee\017\uffee\040\uffee\041" +
    "\uffee\042\uffee\043\uffee\044\uffee\045\uffee\046\uffee\047\uffee" +
    "\056\uffee\057\uffee\060\uffee\061\uffee\062\uffee\063\uffee\070" +
    "\uffee\001\002\000\034\011\044\020\045\021\041\022\061" +
    "\023\043\036\055\050\056\052\057\053\054\054\063\055" +
    "\060\057\051\067\047\001\002\000\046\012\ufff0\014\ufff0" +
    "\017\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\045" +
    "\ufff0\046\ufff0\047\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0" +
    "\062\ufff0\063\ufff0\070\ufff0\001\002\000\004\067\127\001" +
    "\002\000\046\012\ufff1\014\ufff1\017\ufff1\040\ufff1\041\ufff1" +
    "\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\056" +
    "\ufff1\057\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1\070\ufff1" +
    "\001\002\000\046\012\uff96\014\uff96\017\uff96\040\uff96\041" +
    "\uff96\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96\047\uff96" +
    "\056\uff96\057\uff96\060\uff96\061\uff96\062\uff96\063\uff96\070" +
    "\uff96\001\002\000\004\067\066\001\002\000\046\012\uffa3" +
    "\014\uffa3\017\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044" +
    "\uffa3\045\uffa3\046\uffa3\047\uffa3\056\uffa3\057\uffa3\060\uffa3" +
    "\061\uffa3\062\uffa3\063\uffa3\070\uffa3\001\002\000\046\012" +
    "\uffa7\014\uffa7\017\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7" +
    "\044\uffa7\045\uffa7\046\uffa7\047\uffa7\056\uffa7\057\uffa7\060" +
    "\uffa7\061\uffa7\062\uffa7\063\uffa7\070\uffa7\001\002\000\050" +
    "\012\uff97\013\070\014\uff97\017\uff97\040\uff97\041\uff97\042" +
    "\uff97\043\uff97\044\uff97\045\uff97\046\uff97\047\uff97\056\uff97" +
    "\057\uff97\060\uff97\061\uff97\062\uff97\063\uff97\070\uff97\001" +
    "\002\000\046\012\uffa0\014\uffa0\017\uffa0\040\uffa0\041\uffa0" +
    "\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\056" +
    "\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0\070\uffa0" +
    "\001\002\000\034\011\044\020\045\021\041\022\061\023" +
    "\043\036\055\050\056\052\057\053\054\054\063\055\060" +
    "\057\051\067\047\001\002\000\040\014\105\040\103\041" +
    "\072\042\110\043\076\044\077\045\104\046\075\047\073" +
    "\056\102\057\107\060\101\061\100\062\074\063\106\001" +
    "\002\000\034\011\044\020\045\021\041\022\061\023\043" +
    "\036\055\050\056\052\057\053\054\054\063\055\060\057" +
    "\051\067\047\001\002\000\034\011\044\020\045\021\041" +
    "\022\061\023\043\036\055\050\056\052\057\053\054\054" +
    "\063\055\060\057\051\067\047\001\002\000\034\011\044" +
    "\020\045\021\041\022\061\023\043\036\055\050\056\052" +
    "\057\053\054\054\063\055\060\057\051\067\047\001\002" +
    "\000\034\011\044\020\045\021\041\022\061\023\043\036" +
    "\055\050\056\052\057\053\054\054\063\055\060\057\051" +
    "\067\047\001\002\000\034\011\044\020\045\021\041\022" +
    "\061\023\043\036\055\050\056\052\057\053\054\054\063" +
    "\055\060\057\051\067\047\001\002\000\034\011\044\020" +
    "\045\021\041\022\061\023\043\036\055\050\056\052\057" +
    "\053\054\054\063\055\060\057\051\067\047\001\002\000" +
    "\034\011\044\020\045\021\041\022\061\023\043\036\055" +
    "\050\056\052\057\053\054\054\063\055\060\057\051\067" +
    "\047\001\002\000\034\011\044\020\045\021\041\022\061" +
    "\023\043\036\055\050\056\052\057\053\054\054\063\055" +
    "\060\057\051\067\047\001\002\000\034\011\044\020\045" +
    "\021\041\022\061\023\043\036\055\050\056\052\057\053" +
    "\054\054\063\055\060\057\051\067\047\001\002\000\034" +
    "\011\044\020\045\021\041\022\061\023\043\036\055\050" +
    "\056\052\057\053\054\054\063\055\060\057\051\067\047" +
    "\001\002\000\034\011\044\020\045\021\041\022\061\023" +
    "\043\036\055\050\056\052\057\053\054\054\063\055\060" +
    "\057\051\067\047\001\002\000\046\012\uffb9\014\uffb9\017" +
    "\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9" +
    "\046\uffb9\047\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\062" +
    "\uffb9\063\uffb9\070\uffb9\001\002\000\034\011\044\020\045" +
    "\021\041\022\061\023\043\036\055\050\056\052\057\053" +
    "\054\054\063\055\060\057\051\067\047\001\002\000\034" +
    "\011\044\020\045\021\041\022\061\023\043\036\055\050" +
    "\056\052\057\053\054\054\063\055\060\057\051\067\047" +
    "\001\002\000\034\011\044\020\045\021\041\022\061\023" +
    "\043\036\055\050\056\052\057\053\054\054\063\055\060" +
    "\057\051\067\047\001\002\000\046\012\uff8f\014\uff8f\017" +
    "\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f" +
    "\046\075\047\073\056\uff8f\057\uff8f\060\uff8f\061\uff8f\062" +
    "\uff8f\063\uff8f\070\uff8f\001\002\000\046\012\uff9f\014\uff9f" +
    "\017\uff9f\040\103\041\072\042\110\043\076\044\077\045" +
    "\104\046\075\047\073\056\uff9f\057\uff9f\060\101\061\100" +
    "\062\074\063\106\070\uff9f\001\002\000\046\012\uff9b\014" +
    "\uff9b\017\uff9b\040\103\041\072\042\110\043\076\044\077" +
    "\045\104\046\075\047\073\056\uff9b\057\uff9b\060\uff9b\061" +
    "\uff9b\062\uff9b\063\uff9b\070\uff9b\001\002\000\046\012\uff8e" +
    "\014\uff8e\017\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044" +
    "\uff8e\045\uff8e\046\075\047\073\056\uff8e\057\uff8e\060\uff8e" +
    "\061\uff8e\062\uff8e\063\uff8e\070\uff8e\001\002\000\046\012" +
    "\uff92\014\uff92\017\uff92\040\uff92\041\uff92\042\110\043\076" +
    "\044\077\045\104\046\075\047\073\056\uff92\057\uff92\060" +
    "\uff92\061\uff92\062\uff92\063\uff92\070\uff92\001\002\000\046" +
    "\012\uff9e\014\uff9e\017\uff9e\040\103\041\072\042\110\043" +
    "\076\044\077\045\104\046\075\047\073\056\uff9e\057\uff9e" +
    "\060\101\061\100\062\074\063\106\070\uff9e\001\002\000" +
    "\046\012\uff9c\014\uff9c\017\uff9c\040\103\041\072\042\110" +
    "\043\076\044\077\045\104\046\075\047\073\056\uff9c\057" +
    "\uff9c\060\uff9c\061\uff9c\062\074\063\106\070\uff9c\001\002" +
    "\000\046\012\uff9d\014\uff9d\017\uff9d\040\103\041\072\042" +
    "\110\043\076\044\077\045\104\046\075\047\073\056\uff9d" +
    "\057\uff9d\060\uff9d\061\uff9d\062\074\063\106\070\uff9d\001" +
    "\002\000\046\012\uff8d\014\uff8d\017\uff8d\040\uff8d\041\uff8d" +
    "\042\uff8d\043\uff8d\044\uff8d\045\uff8d\046\075\047\073\056" +
    "\uff8d\057\uff8d\060\uff8d\061\uff8d\062\uff8d\063\uff8d\070\uff8d" +
    "\001\002\000\046\012\uff90\014\uff90\017\uff90\040\uff90\041" +
    "\uff90\042\uff90\043\uff90\044\uff90\045\uff90\046\075\047\073" +
    "\056\uff90\057\uff90\060\uff90\061\uff90\062\uff90\063\uff90\070" +
    "\uff90\001\002\000\046\012\uff95\014\uff95\017\uff95\040\uff95" +
    "\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95\047" +
    "\073\056\uff95\057\uff95\060\uff95\061\uff95\062\uff95\063\uff95" +
    "\070\uff95\001\002\000\046\012\uff9a\014\uff9a\017\uff9a\040" +
    "\103\041\072\042\110\043\076\044\077\045\104\046\075" +
    "\047\073\056\uff9a\057\uff9a\060\uff9a\061\uff9a\062\uff9a\063" +
    "\uff9a\070\uff9a\001\002\000\046\012\uff94\014\uff94\017\uff94" +
    "\040\uff94\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046" +
    "\uff94\047\uff94\056\uff94\057\uff94\060\uff94\061\uff94\062\uff94" +
    "\063\uff94\070\uff94\001\002\000\046\012\uff91\014\uff91\017" +
    "\uff91\040\uff91\041\uff91\042\110\043\076\044\077\045\104" +
    "\046\075\047\073\056\uff91\057\uff91\060\uff91\061\uff91\062" +
    "\uff91\063\uff91\070\uff91\001\002\000\050\012\uff98\013\070" +
    "\014\uff98\017\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044" +
    "\uff98\045\uff98\046\uff98\047\uff98\056\uff98\057\uff98\060\uff98" +
    "\061\uff98\062\uff98\063\uff98\070\uff98\001\002\000\046\012" +
    "\uffa1\014\uffa1\017\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1" +
    "\044\uffa1\045\uffa1\046\uffa1\047\uffa1\056\uffa1\057\uffa1\060" +
    "\uffa1\061\uffa1\062\uffa1\063\uffa1\070\uffa1\001\002\000\046" +
    "\012\uff93\014\uff93\017\uff93\040\uff93\041\uff93\042\uff93\043" +
    "\uff93\044\uff93\045\uff93\046\uff93\047\uff93\056\uff93\057\uff93" +
    "\060\uff93\061\uff93\062\uff93\063\uff93\070\uff93\001\002\000" +
    "\006\012\uffad\017\uffad\001\002\000\046\012\uff99\014\uff99" +
    "\017\uff99\040\103\041\072\042\110\043\076\044\077\045" +
    "\104\046\075\047\073\056\uff99\057\uff99\060\101\061\100" +
    "\062\074\063\106\070\uff99\001\002\000\036\011\044\012" +
    "\135\020\045\021\041\022\061\023\043\036\055\050\056" +
    "\052\057\053\054\054\063\055\060\057\051\067\047\001" +
    "\002\000\046\012\uffda\014\uffda\017\uffda\040\uffda\041\uffda" +
    "\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047\uffda\056" +
    "\uffda\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda\070\uffda" +
    "\001\002\000\006\012\141\017\140\001\002\000\042\012" +
    "\uffac\017\uffac\040\103\041\072\042\110\043\076\044\077" +
    "\045\104\046\075\047\073\056\102\057\107\060\101\061" +
    "\100\062\074\063\106\001\002\000\034\011\044\020\045" +
    "\021\041\022\061\023\043\036\055\050\056\052\057\053" +
    "\054\054\063\055\060\057\051\067\047\001\002\000\046" +
    "\012\uffdb\014\uffdb\017\uffdb\040\uffdb\041\uffdb\042\uffdb\043" +
    "\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\056\uffdb\057\uffdb" +
    "\060\uffdb\061\uffdb\062\uffdb\063\uffdb\070\uffdb\001\002\000" +
    "\042\012\uffab\017\uffab\040\103\041\072\042\110\043\076" +
    "\044\077\045\104\046\075\047\073\056\102\057\107\060" +
    "\101\061\100\062\074\063\106\001\002\000\040\012\144" +
    "\040\103\041\072\042\110\043\076\044\077\045\104\046" +
    "\075\047\073\056\102\057\107\060\101\061\100\062\074" +
    "\063\106\001\002\000\046\012\uffa5\014\uffa5\017\uffa5\040" +
    "\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5" +
    "\047\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5\062\uffa5\063" +
    "\uffa5\070\uffa5\001\002\000\020\003\150\004\035\005\015" +
    "\006\021\007\017\010\014\037\016\001\002\000\004\015" +
    "\ufff7\001\002\000\006\012\uffb1\017\uffb1\001\002\000\006" +
    "\012\uffb0\017\uffb0\001\002\000\012\002\ufffc\003\ufffc\012" +
    "\153\065\ufffc\001\002\000\010\002\ufffd\003\ufffd\065\ufffd" +
    "\001\002\000\004\015\ufff5\001\002\000\032\003\177\015" +
    "\154\016\161\024\167\027\204\030\156\032\162\033\174" +
    "\034\176\035\201\066\157\067\165\001\002\000\010\002" +
    "\ufffa\003\ufffa\065\ufffa\001\002\000\030\003\uffce\015\uffce" +
    "\024\uffce\027\uffce\030\uffce\032\uffce\033\uffce\034\uffce\035" +
    "\uffce\066\uffce\067\uffce\001\002\000\016\004\035\005\015" +
    "\006\021\007\017\010\014\037\016\001\002\000\034\003" +
    "\uffe1\015\uffe1\016\uffe1\024\uffe1\027\uffe1\030\uffe1\031\uffe1" +
    "\032\uffe1\033\uffe1\034\uffe1\035\uffe1\066\uffe1\067\uffe1\001" +
    "\002\000\044\002\uffd9\003\uffd9\015\uffd9\016\uffd9\024\uffd9" +
    "\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\034\uffd9\035\uffd9\065\uffd9\066\uffd9\067\uffd9\001\002" +
    "\000\036\011\044\020\045\021\041\022\061\023\043\036" +
    "\055\050\056\052\057\053\054\054\063\055\060\057\051" +
    "\067\047\070\317\001\002\000\006\051\274\070\275\001" +
    "\002\000\034\003\uffe5\015\uffe5\016\uffe5\024\uffe5\027\uffe5" +
    "\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\066" +
    "\uffe5\067\uffe5\001\002\000\010\011\134\013\270\051\267" +
    "\001\002\000\004\070\266\001\002\000\004\011\243\001" +
    "\002\000\032\003\177\015\154\016\241\024\167\027\204" +
    "\030\156\032\162\033\174\034\176\035\201\066\157\067" +
    "\165\001\002\000\034\003\uffe4\015\uffe4\016\uffe4\024\uffe4" +
    "\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035" +
    "\uffe4\066\uffe4\067\uffe4\001\002\000\032\003\uffd7\015\uffd7" +
    "\016\uffd7\024\uffd7\027\uffd7\030\uffd7\032\uffd7\033\uffd7\034" +
    "\uffd7\035\uffd7\066\uffd7\067\uffd7\001\002\000\034\003\uffe7" +
    "\015\uffe7\016\uffe7\024\uffe7\027\uffe7\030\uffe7\031\uffe7\032" +
    "\uffe7\033\uffe7\034\uffe7\035\uffe7\066\uffe7\067\uffe7\001\002" +
    "\000\004\070\240\001\002\000\032\003\uffd5\015\uffd5\016" +
    "\uffd5\024\uffd5\027\uffd5\030\uffd5\032\uffd5\033\uffd5\034\uffd5" +
    "\035\uffd5\066\uffd5\067\uffd5\001\002\000\004\011\234\001" +
    "\002\000\006\016\233\070\232\001\002\000\034\003\uffe2" +
    "\015\uffe2\016\uffe2\024\uffe2\027\uffe2\030\uffe2\031\uffe2\032" +
    "\uffe2\033\uffe2\034\uffe2\035\uffe2\066\uffe2\067\uffe2\001\002" +
    "\000\004\011\223\001\002\000\034\003\uffe3\015\uffe3\016" +
    "\uffe3\024\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3" +
    "\034\uffe3\035\uffe3\066\uffe3\067\uffe3\001\002\000\034\003" +
    "\uffe6\015\uffe6\016\uffe6\024\uffe6\027\uffe6\030\uffe6\031\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\035\uffe6\066\uffe6\067\uffe6\001" +
    "\002\000\004\011\205\001\002\000\004\067\206\001\002" +
    "\000\004\051\207\001\002\000\034\011\044\020\045\021" +
    "\041\022\061\023\043\036\055\050\056\052\057\053\054" +
    "\054\063\055\060\057\051\067\047\001\002\000\040\017" +
    "\uffcc\040\103\041\072\042\110\043\076\044\077\045\104" +
    "\046\075\047\073\056\102\057\107\060\101\061\100\062" +
    "\074\063\106\001\002\000\004\017\212\001\002\000\034" +
    "\011\044\020\045\021\041\022\061\023\043\036\055\050" +
    "\056\052\057\053\054\054\063\055\060\057\051\067\047" +
    "\001\002\000\040\017\uffcb\040\103\041\072\042\110\043" +
    "\076\044\077\045\104\046\075\047\073\056\102\057\107" +
    "\060\101\061\100\062\074\063\106\001\002\000\004\017" +
    "\215\001\002\000\034\011\uffca\020\uffca\021\uffca\022\uffca" +
    "\023\uffca\036\uffca\050\uffca\052\uffca\053\uffca\054\uffca\055" +
    "\uffca\057\uffca\067\uffca\001\002\000\034\011\044\020\045" +
    "\021\041\022\061\023\043\036\055\050\056\052\057\053" +
    "\054\054\063\055\060\057\051\067\047\001\002\000\040" +
    "\012\uffc9\040\103\041\072\042\110\043\076\044\077\045" +
    "\104\046\075\047\073\056\102\057\107\060\101\061\100" +
    "\062\074\063\106\001\002\000\004\012\221\001\002\000" +
    "\030\003\177\015\154\024\167\027\204\030\156\032\162" +
    "\033\174\034\176\035\201\066\157\067\165\001\002\000" +
    "\034\003\uffc8\015\uffc8\016\uffc8\024\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\066\uffc8\067" +
    "\uffc8\001\002\000\004\067\224\001\002\000\006\012\230" +
    "\013\070\001\002\000\004\012\226\001\002\000\004\070" +
    "\227\001\002\000\034\003\uffdc\015\uffdc\016\uffdc\024\uffdc" +
    "\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035" +
    "\uffdc\066\uffdc\067\uffdc\001\002\000\004\070\231\001\002" +
    "\000\034\003\uffdd\015\uffdd\016\uffdd\024\uffdd\027\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\066\uffdd" +
    "\067\uffdd\001\002\000\034\003\uffe0\015\uffe0\016\uffe0\024" +
    "\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\035\uffe0\066\uffe0\067\uffe0\001\002\000\034\003\uffdf\015" +
    "\uffdf\016\uffdf\024\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf" +
    "\033\uffdf\034\uffdf\035\uffdf\066\uffdf\067\uffdf\001\002\000" +
    "\034\011\044\020\045\021\041\022\061\023\043\036\055" +
    "\050\056\052\057\053\054\054\063\055\060\057\051\067" +
    "\047\001\002\000\006\012\236\017\140\001\002\000\004" +
    "\070\237\001\002\000\034\003\uffde\015\uffde\016\uffde\024" +
    "\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde" +
    "\035\uffde\066\uffde\067\uffde\001\002\000\034\003\uffc7\015" +
    "\uffc7\016\uffc7\024\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7" +
    "\033\uffc7\034\uffc7\035\uffc7\066\uffc7\067\uffc7\001\002\000" +
    "\044\002\uffd8\003\uffd8\015\uffd8\016\uffd8\024\uffd8\025\uffd8" +
    "\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034" +
    "\uffd8\035\uffd8\065\uffd8\066\uffd8\067\uffd8\001\002\000\032" +
    "\003\uffd6\015\uffd6\016\uffd6\024\uffd6\027\uffd6\030\uffd6\032" +
    "\uffd6\033\uffd6\034\uffd6\035\uffd6\066\uffd6\067\uffd6\001\002" +
    "\000\034\011\044\020\045\021\041\022\061\023\043\036" +
    "\055\050\056\052\057\053\054\054\063\055\060\057\051" +
    "\067\047\001\002\000\040\012\245\040\103\041\072\042" +
    "\110\043\076\044\077\045\104\046\075\047\073\056\102" +
    "\057\107\060\101\061\100\062\074\063\106\001\002\000" +
    "\004\015\154\001\002\000\040\003\uffd4\015\uffd4\016\uffd4" +
    "\024\uffd4\025\251\026\247\027\uffd4\030\uffd4\031\uffd4\032" +
    "\uffd4\033\uffd4\034\uffd4\035\uffd4\066\uffd4\067\uffd4\001\002" +
    "\000\004\015\154\001\002\000\040\003\uffd2\015\uffd2\016" +
    "\uffd2\024\uffd2\025\257\026\256\027\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\035\uffd2\066\uffd2\067\uffd2\001" +
    "\002\000\004\011\252\001\002\000\034\011\044\020\045" +
    "\021\041\022\061\023\043\036\055\050\056\052\057\053" +
    "\054\054\063\055\060\057\051\067\047\001\002\000\040" +
    "\012\254\040\103\041\072\042\110\043\076\044\077\045" +
    "\104\046\075\047\073\056\102\057\107\060\101\061\100" +
    "\062\074\063\106\001\002\000\004\015\154\001\002\000" +
    "\040\003\uffd0\015\uffd0\016\uffd0\024\uffd0\025\uffd0\026\uffd0" +
    "\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035" +
    "\uffd0\066\uffd0\067\uffd0\001\002\000\004\015\154\001\002" +
    "\000\004\011\260\001\002\000\034\011\044\020\045\021" +
    "\041\022\061\023\043\036\055\050\056\052\057\053\054" +
    "\054\063\055\060\057\051\067\047\001\002\000\040\012" +
    "\262\040\103\041\072\042\110\043\076\044\077\045\104" +
    "\046\075\047\073\056\102\057\107\060\101\061\100\062" +
    "\074\063\106\001\002\000\004\015\154\001\002\000\040" +
    "\003\uffcf\015\uffcf\016\uffcf\024\uffcf\025\uffcf\026\uffcf\027" +
    "\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf" +
    "\066\uffcf\067\uffcf\001\002\000\034\003\uffd1\015\uffd1\016" +
    "\uffd1\024\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1" +
    "\034\uffd1\035\uffd1\066\uffd1\067\uffd1\001\002\000\034\003" +
    "\uffd3\015\uffd3\016\uffd3\024\uffd3\027\uffd3\030\uffd3\031\uffd3" +
    "\032\uffd3\033\uffd3\034\uffd3\035\uffd3\066\uffd3\067\uffd3\001" +
    "\002\000\034\003\uffaa\015\uffaa\016\uffaa\024\uffaa\027\uffaa" +
    "\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\066" +
    "\uffaa\067\uffaa\001\002\000\034\011\044\020\045\021\041" +
    "\022\061\023\043\036\055\050\056\052\057\053\054\054" +
    "\063\055\060\057\051\067\047\001\002\000\004\014\271" +
    "\001\002\000\006\051\uffba\070\uffba\001\002\000\040\040" +
    "\103\041\072\042\110\043\076\044\077\045\104\046\075" +
    "\047\073\056\102\057\107\060\101\061\100\062\074\063" +
    "\106\070\273\001\002\000\034\003\uffb6\015\uffb6\016\uffb6" +
    "\024\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034" +
    "\uffb6\035\uffb6\066\uffb6\067\uffb6\001\002\000\036\011\044" +
    "\015\277\020\045\021\041\022\061\023\043\036\055\050" +
    "\056\052\057\053\054\054\063\055\060\057\051\067\047" +
    "\001\002\000\034\003\uffb5\015\uffb5\016\uffb5\024\uffb5\027" +
    "\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5" +
    "\066\uffb5\067\uffb5\001\002\000\004\070\315\001\002\000" +
    "\010\016\302\021\305\023\303\001\002\000\040\040\103" +
    "\041\072\042\110\043\076\044\077\045\104\046\075\047" +
    "\073\056\102\057\107\060\101\061\100\062\074\063\106" +
    "\070\301\001\002\000\034\003\uffb3\015\uffb3\016\uffb3\024" +
    "\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3" +
    "\035\uffb3\066\uffb3\067\uffb3\001\002\000\004\070\uffc3\001" +
    "\002\000\006\016\uffbe\017\uffbe\001\002\000\006\016\uffc1" +
    "\017\313\001\002\000\006\016\uffc0\017\uffc0\001\002\000" +
    "\006\016\uffc2\017\311\001\002\000\004\016\310\001\002" +
    "\000\004\070\uffc4\001\002\000\004\021\312\001\002\000" +
    "\006\016\uffbf\017\uffbf\001\002\000\004\023\314\001\002" +
    "\000\006\016\uffbd\017\uffbd\001\002\000\034\003\uffb4\015" +
    "\uffb4\016\uffb4\024\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4" +
    "\033\uffb4\034\uffb4\035\uffb4\066\uffb4\067\uffb4\001\002\000" +
    "\040\040\103\041\072\042\110\043\076\044\077\045\104" +
    "\046\075\047\073\056\102\057\107\060\101\061\100\062" +
    "\074\063\106\070\320\001\002\000\034\003\uffc6\015\uffc6" +
    "\016\uffc6\024\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033" +
    "\uffc6\034\uffc6\035\uffc6\066\uffc6\067\uffc6\001\002\000\034" +
    "\003\uffc5\015\uffc5\016\uffc5\024\uffc5\027\uffc5\030\uffc5\031" +
    "\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\066\uffc5\067\uffc5" +
    "\001\002\000\004\067\322\001\002\000\010\013\325\051" +
    "\324\070\323\001\002\000\034\003\uffb7\015\uffb7\016\uffb7" +
    "\024\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034" +
    "\uffb7\035\uffb7\066\uffb7\067\uffb7\001\002\000\034\011\044" +
    "\020\045\021\041\022\061\023\043\036\055\050\056\052" +
    "\057\053\054\054\063\055\060\057\051\067\047\001\002" +
    "\000\036\011\044\014\326\020\045\021\041\022\061\023" +
    "\043\036\055\050\056\052\057\053\054\054\063\055\060" +
    "\057\051\067\047\001\002\000\006\051\uffbc\070\uffbc\001" +
    "\002\000\040\014\330\040\103\041\072\042\110\043\076" +
    "\044\077\045\104\046\075\047\073\056\102\057\107\060" +
    "\101\061\100\062\074\063\106\001\002\000\006\051\uffbb" +
    "\070\uffbb\001\002\000\040\040\103\041\072\042\110\043" +
    "\076\044\077\045\104\046\075\047\073\056\102\057\107" +
    "\060\101\061\100\062\074\063\106\070\332\001\002\000" +
    "\034\003\uffb8\015\uffb8\016\uffb8\024\uffb8\027\uffb8\030\uffb8" +
    "\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\066\uffb8\067" +
    "\uffb8\001\002\000\030\003\177\015\154\024\167\027\204" +
    "\030\156\032\162\033\174\034\176\035\201\066\157\067" +
    "\165\001\002\000\004\031\335\001\002\000\004\011\336" +
    "\001\002\000\034\011\044\020\045\021\041\022\061\023" +
    "\043\036\055\050\056\052\057\053\054\054\063\055\060" +
    "\057\051\067\047\001\002\000\040\012\340\040\103\041" +
    "\072\042\110\043\076\044\077\045\104\046\075\047\073" +
    "\056\102\057\107\060\101\061\100\062\074\063\106\001" +
    "\002\000\004\070\341\001\002\000\034\003\uffcd\015\uffcd" +
    "\016\uffcd\024\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033" +
    "\uffcd\034\uffcd\035\uffcd\066\uffcd\067\uffcd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\006\002\004\042\003\001\001\000\010\003" +
    "\010\004\006\005\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\154\001\001\000\002\001\001\000" +
    "\006\004\006\005\151\001\001\000\002\001\001\000\004" +
    "\007\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\027" +
    "\001\001\000\010\007\033\031\031\032\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\006\041\027\064\034\052\035\061\036\051" +
    "\037\063\040\045\041\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\006\041\027\064" +
    "\034\142\035\061\036\051\037\063\040\045\041\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\006\041\027\064\034\132\035" +
    "\061\036\051\037\063\040\045\041\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\006\041\027\064\034\130\035\061\036\051" +
    "\037\063\040\045\041\047\001\001\000\002\001\001\000" +
    "\004\027\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\006\041" +
    "\027\064\034\070\035\061\036\051\037\063\040\045\041" +
    "\047\001\001\000\002\001\001\000\022\006\041\027\064" +
    "\034\125\035\061\036\051\037\063\040\045\041\047\001" +
    "\001\000\022\006\041\027\064\034\124\035\061\036\051" +
    "\037\063\040\045\041\047\001\001\000\022\006\041\027" +
    "\064\034\123\035\061\036\051\037\063\040\045\041\047" +
    "\001\001\000\022\006\041\027\064\034\122\035\061\036" +
    "\051\037\063\040\045\041\047\001\001\000\022\006\041" +
    "\027\064\034\121\035\061\036\051\037\063\040\045\041" +
    "\047\001\001\000\022\006\041\027\064\034\120\035\061" +
    "\036\051\037\063\040\045\041\047\001\001\000\022\006" +
    "\041\027\064\034\117\035\061\036\051\037\063\040\045" +
    "\041\047\001\001\000\022\006\041\027\064\034\116\035" +
    "\061\036\051\037\063\040\045\041\047\001\001\000\022" +
    "\006\041\027\064\034\115\035\061\036\051\037\063\040" +
    "\045\041\047\001\001\000\022\006\041\027\064\034\114" +
    "\035\061\036\051\037\063\040\045\041\047\001\001\000" +
    "\022\006\041\027\064\034\113\035\061\036\051\037\063" +
    "\040\045\041\047\001\001\000\002\001\001\000\022\006" +
    "\041\027\064\034\112\035\061\036\051\037\063\040\045" +
    "\041\047\001\001\000\022\006\041\027\064\034\111\035" +
    "\061\036\051\037\063\040\045\041\047\001\001\000\022" +
    "\006\041\027\064\034\110\035\061\036\051\037\063\040" +
    "\045\041\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\006\041\027\064\033\135\034\136" +
    "\035\061\036\051\037\063\040\045\041\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\006\041\027\064\034\141\035\061\036\051\037\063\040" +
    "\045\041\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\033\032" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\010\174\011\177\012\157\013\172\014\167" +
    "\015\171\016\163\020\170\021\201\026\162\030\202\041" +
    "\165\001\001\000\002\001\001\000\004\044\332\001\001" +
    "\000\004\007\320\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\006\041\027\064\034\315\035\061\036\051" +
    "\037\063\040\045\041\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\010\174\011\177\012\157\013\172\015" +
    "\241\016\163\020\170\021\201\026\162\030\202\041\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\006\041\027\064\034" +
    "\207\035\061\036\051\037\063\040\045\041\047\001\001" +
    "\000\004\045\210\001\001\000\002\001\001\000\022\006" +
    "\041\027\064\034\212\035\061\036\051\037\063\040\045" +
    "\041\047\001\001\000\004\046\213\001\001\000\002\001" +
    "\001\000\004\047\215\001\001\000\022\006\041\027\064" +
    "\034\216\035\061\036\051\037\063\040\045\041\047\001" +
    "\001\000\004\050\217\001\001\000\002\001\001\000\026" +
    "\010\221\011\177\012\157\013\172\016\163\020\170\021" +
    "\201\026\162\030\202\041\165\001\001\000\002\001\001" +
    "\000\004\027\224\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\006\041\027\064\033\234\034\136\035\061\036\051" +
    "\037\063\040\045\041\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\006\041\027\064\034" +
    "\243\035\061\036\051\037\063\040\045\041\047\001\001" +
    "\000\002\001\001\000\004\013\245\001\001\000\004\017" +
    "\247\001\001\000\004\013\264\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\006\041\027\064\034\252\035" +
    "\061\036\051\037\063\040\045\041\047\001\001\000\002" +
    "\001\001\000\004\013\254\001\001\000\002\001\001\000" +
    "\004\013\263\001\001\000\002\001\001\000\022\006\041" +
    "\027\064\034\260\035\061\036\051\037\063\040\045\041" +
    "\047\001\001\000\002\001\001\000\004\013\262\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\006\041\027\064\034\271\035\061" +
    "\036\051\037\063\040\045\041\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\006\041\022\275\027\064\034\277\035\061\036" +
    "\051\037\063\040\045\041\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\023\306\024\305\025\303\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\006\041\027\064\034\330\035\061" +
    "\036\051\037\063\040\045\041\047\001\001\000\022\006" +
    "\041\027\064\034\326\035\061\036\051\037\063\040\045" +
    "\041\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\010\333\011\177\012\157\013\172\016\163\020\170\021" +
    "\201\026\162\030\202\041\165\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\006\041\027\064\034\336\035" +
    "\061\036\051\037\063\040\045\041\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


  LexerCup lex;
  int literId = 0;
  int labelId = 0;
  

  public ArrayList<String> errores = new ArrayList<String>();
  @SuppressWarnings("deprecation")
  public Sintax(LexerCup lex){
    this.lex=lex;
    this.symbolFactory= new DefaultSymbolFactory();
  };
    public void syntax_error(Symbol cur_token){

     
        if (cur_token!=null){
            String cadenaError="Error de sintaxis en la línea " + (cur_token.left+1) + " y columna " + (cur_token.right+1)+ ". Token que generó el error: "+ lex.yytext();
            System.err.println(cadenaError);
            this.errores.add(cadenaError);
        
        }else{
            String cadenaError="Error de sintaxis en la línea " + (cur_token.left+1) + " y columna " + (cur_token.right+1)+". Token: "+ cur_token.value;
            System.err.println(cadenaError);
            this.errores.add(cadenaError);
        }
	
    }

    public void unrecovered_syntax_error(Symbol token) throws java.lang.Exception {
        if (token!=null){
            throw new Exception("Error de sintaxis no puede ser recuperado. Encontrado en la línea " + (token.left+1) + " columna " + (token.right+1) + ". Token que generó el error: " + lex.yytext());
  
        }
        else{
            throw new Exception("Error de sintaxis no puede ser recuperado. Encontrado en la línea " + (token.left+1) + " columna " + (token.right+1) + ". Token que generó el error: " + token.value);
        }
    
    }

    public TypeEx validarTipado(String operand, Expresion a, Expresion b, ArrayList<TypeEx> validTypes) {
    // validar que los tipos de a y b sean iguales
    if (a.getType() != b.getType()) {
      System.out.println("Error semántico: Los tipos de datos son incompatibles: " + a.getType().toString() + " y " + b.getType().toString() + "con la operacion" + operand +" en la linea " + lex.getLine() + " columna " + lex.getColumn());
      return TypeEx.NULL;
    }
    // validar que el tipo de a esté en la lista de tipos validos
    if (!validTypes.contains(a.getType())) {
      System.out.println("Error semántico: Tipo de dato ilegal: " + a.getType().toString() + " para operacion " + operand + "en la linea " + lex.getLine() + " columna " + lex.getColumn());
      return TypeEx.NULL;
    }

    return a.getType();
  }

  // overloading del metodo pero unario
  public TypeEx validarTipado(String operand, Expresion a, ArrayList<TypeEx> validTypes) {
    // validar que el tipo de a esté en la lista de tipos validos
    if (!validTypes.contains(a.getType())) {
      System.out.println("Error semántico: "  + "Tipo ilegal de dato" + a.getType().toString() + " para operacion " + operand + "en la linea " + lex.getLine() + " columna " + lex.getColumn());
      return TypeEx.NULL;
    }
    return a.getType();
  }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {



    HashMap<String, SymbolTable> listaTablasSimbolos = new HashMap<String, SymbolTable>();
    ArrayList<FunctionIdentifier> functionIdentifiers = new ArrayList<FunctionIdentifier>();
    String currentHash = "";


    public void imprimirTablaSimbolos(){
        System.out.println("Iniciando el guardado");
        for (String key: listaTablasSimbolos.keySet()){

            System.out.println("\n\n\n°-------------------------------------------------------------------------------------°");
            System.out.println("\n\t\t\t\tTabla de simbolos: " + key + "\n");
            System.out.println("\t~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
            System.out.println("\t\t\t\t\tValores:");
            System.out.println("\t~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
            SymbolTable val = listaTablasSimbolos.get(key);
            System.out.println("\t\t" + String.format("%-20s %-20s %-20s", "valor", "tipo", "lexema") + "\n");
            for (SymbolTObj item: val.getSymbolTable()) {
                System.out.println("\t\t" + item.toString());
            }
            System.out.println("\n\t~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
            System.out.println("");
            System.out.println("°-------------------------------------------------------------------------------------°");
        }
        System.out.println("Completado el guardado");
    }

    String MarkdownFilePath = (System.getProperty("user.dir") +"/testExamples/SymbolTable.md");
    
    public void guardarTablaSimbolos(){
        System.out.println("Iniciando el guardado");
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(MarkdownFilePath))) {
            for (Map.Entry<String, SymbolTable> entry : listaTablasSimbolos.entrySet()) {
                writer.write("## " + entry.getKey() + "\n\n");
                writer.write("| Valor | Tipo | Lexema |\n");
                writer.write("|-------|------|--------|\n");
                for (SymbolTObj symbol : entry.getValue().getSymbolTable()) {
                    writer.write("| " + symbol.getValor() + " | " + symbol.getTipo() + " | " + symbol.getLexema() + " |\n");
                }
                writer.write("\n");
            }
            System.out.println("Markdown file created successfully: " + MarkdownFilePath);
        } catch (IOException e) {
            System.err.println("Error writing the file: " + e.getMessage());
        }
        System.out.println("Completado el guardado");
    }

    public void definirHash(String hash) {
        currentHash = hash;
        listaTablasSimbolos.put(hash, new SymbolTable());
    }

    public void anadirSimbolo(SymbolTObj sym){
        listaTablasSimbolos.get(currentHash).getSymbolTable().add(sym);
    }

    public TypeEx getType(String id, boolean isError){
       for(SymbolTObj sym : listaTablasSimbolos.get(currentHash).getSymbolTable()) {
            if (id.equals(sym.getValor())){
                return Expresion.tipoFromString(sym.getTipo());
            }
        }
        if (isError){
            System.out.println("Error semántico: la variable con id: " + id +" en la linea " + lex.getLine() + "columna" + lex.getColumn() +"no puede ser encontrado ");
        };
        return TypeEx.NULL; 
    }

    public void addFunctionIdentifier(FunctionIdentifier identifierF){
        functionIdentifiers.add(identifierF);
    }

    public FunctionIdentifier findFunction(String id){
        for(FunctionIdentifier identifierF: functionIdentifiers){
            if (identifierF.getNombre().equals(id)) {
                return identifierF;
            }
        }
        return null;
    }

    public void isNoReturnForNonVoidFunc(){
        for (FunctionIdentifier identifierF: functionIdentifiers){
            if (!identifierF.isRetornaValor() && !(identifierF.getTipoRetorno()==TypeEx.NULL)){
                System.out.println("Error semántico: no se encontró un valor de retorno para la función:" + identifierF.getNombre() + "pese a haber sido declarada como " + identifierF.getTipoRetorno().toString());
            }
        }
    }

    public boolean isType(String type) {
        if (type.equals("char") || type.equals("int") || type.equals("string") || type.equals("float") || type.equals("bool") || type.equals("void")){
            return true;
        };
        return false;
    };


  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= navidad EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
System.out.println("Inicio de parseo");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // navidad ::= NT$0 navidadAux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 
                if (findFunction("main") == null) {
                    System.out.println("Error: no existe una función main para el programa");
                };
                isNoReturnForNonVoidFunc(); 
                imprimirTablaSimbolos(); guardarTablaSimbolos(); System.out.println("Fin de parseo");
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("navidad",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // navidadAux ::= saco_function_definition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("navidadAux",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // navidadAux ::= navidadAux saco_function_definition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("navidadAux",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // navidadAux ::= navidadAux error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("navidadAux",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // navidadAux ::= error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("navidadAux",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // saco_function_definition ::= saco_function_definition_aux calcetin_compound_statement 
            {
              Object RESULT =null;
		int funcDleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int funcDright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object funcD = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    String functionId = (String)funcD; 

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("saco_function_definition",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // saco_function_definition_aux ::= RECORRIDO NOEL MAINNAVIDAD ABRECUENTO CIERRACUENTO 
            {
              Object RESULT =null;
		
            if (findFunction("main") != null) {
                System.out.println("Error semántico: la función main ya fue declarada. Linea: " + lex.getLine() + "columna" + lex.getColumn());
            } else {    
                definirHash("main");
                RESULT = "main";
                anadirSimbolo(new SymbolTObj("function", "integer", "Main"));
                addFunctionIdentifier(new FunctionIdentifier("function", TypeEx.INT, true, new TypeEx[] {}));
            };
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("saco_function_definition_aux",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$1 ::= 
            {
              Object RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

            String type = (String)ty;
            if (!isType(type)) {
                System.out.println("Error semántico: la función no posee un tipo de retorno válido. Linea: " + lex.getLine() + "columna" + lex.getColumn());
            } else {
                RESULT = (String)id;
                definirHash(id.toString());
                anadirSimbolo(new SymbolTObj("function", ty.toString(), id.toString()));
                addFunctionIdentifier(new FunctionIdentifier("function", Expresion.tipoFromString(id.toString()), false, new TypeEx[] {}));
            };
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$1",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // saco_function_definition_aux ::= RECORRIDO gorro_navidad_type_specifier PERSONA ABRECUENTO NT$1 pesebre_args CIERRACUENTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("saco_function_definition_aux",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // saco_function_definition_aux ::= RECORRIDO gorro_navidad_type_specifier PERSONA ABRECUENTO CIERRACUENTO 
            {
              Object RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
            String type = (String)ty;
            if (!isType(type)) {
                System.out.println("Error semántico: la función no posee un tipo de retorno válido. Linea: " + lex.getLine() + "columna" + lex.getColumn());
            } else {
                RESULT = (String)id;
                definirHash(id.toString());
                anadirSimbolo(new SymbolTObj("function", ty.toString(), id.toString()));
                addFunctionIdentifier(new FunctionIdentifier("function", Expresion.tipoFromString(id.toString()), false, new TypeEx[] {}));
            };
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("saco_function_definition_aux",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // saco_function_definition_aux ::= error CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("saco_function_definition_aux",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // arbol_constant ::= l_NOEL 
            {
              Object RESULT =null;
		int l_intleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int l_intright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l_int = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT =  new Expresion(l_int, TypeEx.INT);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // arbol_constant ::= l_NICOLAS 
            {
              Object RESULT =null;
		int l_floleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int l_floright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l_flo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = new Expresion(l_flo, TypeEx.FLOAT);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // arbol_constant ::= l_COLACHO 
            {
              Object RESULT =null;
		int l_chleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int l_chright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l_ch = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = new Expresion(l_ch, TypeEx.CHAR);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // arbol_constant ::= l_SANTA 
            {
              Object RESULT =null;
		int l_stleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int l_stright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l_st = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = new Expresion(l_st, TypeEx.STRING);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // arbol_constant ::= l_t_CLAUS 
            {
              Object RESULT =null;
		int l_tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int l_tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l_t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = new Expresion(l_t, TypeEx.BOOL);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // arbol_constant ::= l_f_CLAUS 
            {
              Object RESULT =null;
		int l_fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int l_fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l_f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = new Expresion(l_f, TypeEx.BOOL);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // arbol_constant ::= NARIZROJA 
            {
              Object RESULT =null;
		int nilleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nilright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object nil = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = new Expresion(nil, TypeEx.NULL);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // gorro_navidad_type_specifier ::= SINREGALO 
            {
              Object RESULT =null;
		int srleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int srright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object sr = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = sr;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("gorro_navidad_type_specifier",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // gorro_navidad_type_specifier ::= COLACHO 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = c;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("gorro_navidad_type_specifier",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // gorro_navidad_type_specifier ::= SANTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = s;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("gorro_navidad_type_specifier",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // gorro_navidad_type_specifier ::= NOEL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = n;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("gorro_navidad_type_specifier",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // gorro_navidad_type_specifier ::= NICOLAS 
            {
              Object RESULT =null;
		int nileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int niright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ni = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = ni;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("gorro_navidad_type_specifier",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // gorro_navidad_type_specifier ::= CLAUS 
            {
              Object RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = cl;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("gorro_navidad_type_specifier",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement_risa_santa ::= calcetin_compound_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_risa_santa",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement_risa_santa ::= candelabro_assignment_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_risa_santa",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement_risa_santa ::= deseos_selection_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_risa_santa",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement_risa_santa ::= caramelo_iteration_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_risa_santa",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement_risa_santa ::= calcetin_jump_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_risa_santa",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement_risa_santa ::= lazo_io_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_risa_santa",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement_risa_santa ::= belen_function_call_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_risa_santa",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement_risa_santa ::= error FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_risa_santa",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement_risa_santa ::= error CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_risa_santa",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lazo_io_statement ::= NARRA ABRECUENTO reyes_magicos_list_expr CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;
		int argsListleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int argsListright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object argsList = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        var exprargs = (ArrayList<Expresion>)argsList;
        for (Expresion e : exprargs) {
        switch (e.getType()) {
            case STRING:
            break;
            case INT:
            break;
            case FLOAT:
            break;
            default:
            System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Tipo de dato " + e.getType().toString() + " no valido para print");
            break;
        }
        }
        RESULT = new Expresion("null", TypeEx.NULL);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lazo_io_statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lazo_io_statement ::= ESCUCHA ABRECUENTO PERSONA CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        var type = getType(id.toString(), true);
            switch (type){
            case INT:
                RESULT = new Expresion("null", TypeEx.NULL);
                break;
            case FLOAT:
                RESULT = new Expresion("null", TypeEx.NULL);
                break;
            default:
                break;
            } 
        RESULT = new Expresion("null", TypeEx.NULL);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lazo_io_statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lazo_io_statement ::= ESCUCHA ABRECUENTO decorativo_array_elem CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;
		int elemleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int elemright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object elem = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        var type = ((Expresion)elem).getType();
        if (type == TypeEx.INT) {

        }
        else {
            System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Tipo de dato " + type.toString() + " no valido para read");
        }
        RESULT = new Expresion("null", TypeEx.NULL);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lazo_io_statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // belen_function_call_expression ::= PERSONA ABRECUENTO reyes_magicos_list_expr CIERRACUENTO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int listArgsleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int listArgsright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object listArgs = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        RESULT = new Expresion("null", TypeEx.NULL);
        var fidentifier = findFunction(id.toString());
        if (fidentifier == null){
        System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Funcion " + id.toString() + " no declarada todavía.");
        } else {
        var argsTypes = fidentifier.getTiposParametros();
        var expr_args = (ArrayList<Expresion>)listArgs;
        var validTypes = true;

        if (argsTypes.length != expr_args.size()) {
            validTypes = false;
            System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Numero de argumentos incorrecto para funcion " + id.toString());
        }
        else {
            for (int i = 0; i < argsTypes.length; i++) {
            if (argsTypes[i] != expr_args.get(i).getType()) {
                validTypes = false;
                System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Tipo de argumento " + (i+1) + " incorrecto para funcion " + id.toString());
                break;
            }
            }
        }

        if (validTypes) {
            RESULT = new Expresion("null", fidentifier.getTipoRetorno());
        }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("belen_function_call_expression",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // belen_function_call_expression ::= PERSONA ABRECUENTO CIERRACUENTO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        RESULT = new Expresion("null", TypeEx.NULL);
        var fidentifier = findFunction(id.toString());
        if (fidentifier == null) {
            System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Funcion " + id.toString() + " no declarada todavía.");
        }
        else {
            if (fidentifier.getTiposParametros().length != 0) {
                System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Funcion " + id.toString() + " no tiene parametros");
            }
            else {            
                RESULT = new Expresion("null", fidentifier.getTipoRetorno());
            }
        } 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("belen_function_call_expression",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // calcetin_compound_statement ::= ABREREGALO CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("calcetin_compound_statement",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // calcetin_compound_statement ::= ABREREGALO empaque_block_item_list CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("calcetin_compound_statement",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // empaque_block_item_list ::= carta_block_item 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("empaque_block_item_list",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // empaque_block_item_list ::= empaque_block_item_list carta_block_item 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("empaque_block_item_list",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // carta_block_item ::= statement_risa_santa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("carta_block_item",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // deseos_selection_statement ::= ELFO ABRECUENTO incienzo_expression CIERRACUENTO calcetin_compound_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("deseos_selection_statement",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // deseos_selection_statement ::= ELFO ABRECUENTO incienzo_expression CIERRACUENTO calcetin_compound_statement DUENDE calcetin_compound_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("deseos_selection_statement",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // deseos_selection_statement ::= ELFO ABRECUENTO incienzo_expression CIERRACUENTO calcetin_compound_statement tradicion_elif_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("deseos_selection_statement",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // deseos_selection_statement ::= ELFO ABRECUENTO incienzo_expression CIERRACUENTO calcetin_compound_statement tradicion_elif_statement DUENDE calcetin_compound_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("deseos_selection_statement",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tradicion_elif_statement ::= HADA ABRECUENTO incienzo_expression CIERRACUENTO calcetin_compound_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tradicion_elif_statement",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tradicion_elif_statement ::= tradicion_elif_statement HADA ABRECUENTO incienzo_expression CIERRACUENTO calcetin_compound_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tradicion_elif_statement",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$2 ::= 
            {
              Object RESULT =null;

        String label = "do" + labelId;
        listaTablasSimbolos.get(currentHash).controlStackPush(label);
        ++labelId;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$2",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // caramelo_iteration_statement ::= HACE NT$2 statement_risa_santa REVISA ABRECUENTO incienzo_expression CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int iexpraleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iexpraright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object iexpra = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
        var expra = (Expresion)iexpra;
        if (expra.getType() != TypeEx.BOOL) {
            System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Tipo de dato " + expra.getType().toString() + " no valido para una expresion booleana");
        }
        else {
            var label = listaTablasSimbolos.get(currentHash).controlStackTop();
            listaTablasSimbolos.get(currentHash).controlStackPop();
        };

    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("caramelo_iteration_statement",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$3 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int iexpraleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iexpraright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object iexpra = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        var label = "for" + labelId;
        listaTablasSimbolos.get(currentHash).controlStackPush(label);
        ++labelId;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$3",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int iexpraleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iexpraright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object iexpra = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int iexprbleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iexprbright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object iexprb = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        var exprb = (Expresion)iexprb;
        var label = listaTablasSimbolos.get(currentHash).controlStackTop();
        if (exprb.getType() != TypeEx.BOOL) {
            System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Tipo de dato " + exprb.getType().toString() + " no valido para una expresion booleana");
        }
        else {

        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$4",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int iexpraleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int iexpraright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object iexpra = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int iexprbleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iexprbright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object iexprb = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

        //ver que hacer
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$5",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int iexpraleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int iexpraright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object iexpra = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int iexprbleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int iexprbright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object iexprb = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int iexprleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iexprright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object iexpr = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

        //ver que hacer
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$6",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // caramelo_iteration_statement ::= ENVUELVE ABRECUENTO PERSONA ENTREGA incienzo_expression NT$3 CHIMENEA incienzo_expression NT$4 CHIMENEA NT$5 incienzo_expression NT$6 CIERRACUENTO statement_risa_santa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).value;
		int iexpraleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int iexpraright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object iexpra = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int iexprbleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int iexprbright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object iexprb = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int iexprleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iexprright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object iexpr = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        //ver que hacer
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("caramelo_iteration_statement",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // calcetin_jump_statement ::= CORTA FINREGALO 
            {
              Object RESULT =null;
		 
        var top = listaTablasSimbolos.get(currentHash).controlStackNonIfTop();
        if (top == null){
            System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Break fuera de estructura de control");
        };  
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("calcetin_jump_statement",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // calcetin_jump_statement ::= ENVIA FINREGALO 
            {
              Object RESULT =null;
		
        String top = listaTablasSimbolos.get(currentHash).controlStackNonIfTop();
        if (top == null){
            System.out.println("Error semántico: return fuera de estrucutra de control valida. " +  "en la linea " + lex.getLine() + " columna " + lex.getColumn());
        };
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("calcetin_jump_statement",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // calcetin_jump_statement ::= ENVIA incienzo_expression FINREGALO 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        TypeEx type = ((Expresion)expr).getType();
        TypeEx typeFuncReturn = functionIdentifiers.get(functionIdentifiers.size()-1).getTipoRetorno();
        if (type != typeFuncReturn) {
            System.out.println("Error semántico: retorno de tipo " + type.toString() + "no coincide con el tipo de retorno de su función (" + typeFuncReturn.toString());
        } else {
            functionIdentifiers.get(functionIdentifiers.size()-1).setRetornaValor(true);
        };
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("calcetin_jump_statement",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // nochebuena_initializer ::= ABREREGALO pino_initializer_list CIERRAREGALO 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        var arrL = (ArrayList<Expresion>)l;
        var isValid = true;

        TypeEx tipo = arrL.get(0).getType();
        if (tipo != TypeEx.INT && tipo != TypeEx.CHAR) {
            System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Tipo de dato " + tipo.toString() + " no valido para arreglo");
            RESULT = new Expresion("null", TypeEx.NULL);
            isValid = false;
        }
        for (Expresion e : arrL) {
            if (e.getType() != tipo) {
                System.out.println("Error semántico en la linea " + lex.getLine() + " columna " + lex.getColumn() + ": " + "Tipo de dato " + e.getType().toString() + " no valido para un literal de arreglo de tipo " + tipo.toString());
                RESULT = new Expresion("null", TypeEx.NULL);
                isValid = false;  
                break;
            }
        }
        if (isValid){
            if (tipo == TypeEx.INT) {
                RESULT = new Expresion(arrL, TypeEx.INT_ARRAY);
            }
            else {
                RESULT = new Expresion(arrL, TypeEx.CHAR_ARRAY);
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("nochebuena_initializer",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // nochebuena_initializer ::= ABREREGALO CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("nochebuena_initializer",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // pino_initializer_list ::= campanas_initializer_list_integer 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pino_initializer_list",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // pino_initializer_list ::= guirnaldas_initializer_list_char 
            {
              Object RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pino_initializer_list",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // campanas_initializer_list_integer ::= l_NOEL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("campanas_initializer_list_integer",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // campanas_initializer_list_integer ::= campanas_initializer_list_integer CHIMENEA l_NOEL 
            {
              Object RESULT =null;
		int ilileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iliright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ili = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("campanas_initializer_list_integer",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // guirnaldas_initializer_list_char ::= l_COLACHO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("guirnaldas_initializer_list_char",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // guirnaldas_initializer_list_char ::= guirnaldas_initializer_list_char CHIMENEA l_COLACHO 
            {
              Object RESULT =null;
		int ilcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int ilcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ilc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("guirnaldas_initializer_list_char",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // estrella_assign_array ::= LOCALCOLOCARREGALO gorro_navidad_type_specifier PERSONA ABREEMPAQUE CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		anadirSimbolo(new SymbolTObj("variable local", ty.toString(), id.toString()));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estrella_assign_array",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // estrella_assign_array ::= LOCALCOLOCARREGALO gorro_navidad_type_specifier PERSONA ABREEMPAQUE incienzo_expression CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		anadirSimbolo(new SymbolTObj("variable local", ty.toString(), id.toString()));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estrella_assign_array",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // estrella_assign_array ::= PERSONA ABREEMPAQUE CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estrella_assign_array",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // decorativo_array_elem ::= PERSONA ABREEMPAQUE incienzo_expression CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int iexprleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iexprright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object iexpr = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Expresion expr = (Expresion)iexpr;
        TypeEx type = expr.getType();
        TypeEx idType = getType(id.toString(), true);
        RESULT = new Expresion("null", TypeEx.NULL);
        if (type != TypeEx.INT) {
            System.out.println("Error semántico: el dato de tipo " + type.toString() + "no puede ser usado para indexar un array. Linea: " + lex.getLine() + "columna: " + lex.getColumn());
        } else if(idType != TypeEx.INT_ARRAY && idType != TypeEx.CHAR_ARRAY){
            System.out.println("Error semántico: el dato de tipo " + type.toString() + "no corresponde a un array. Linea: " + lex.getLine() + "columna: " + lex.getColumn());
        } else {
            // RESULT = new Expresion()
        };
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("decorativo_array_elem",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // candelabro_assignment_expression ::= LOCALCOLOCARREGALO gorro_navidad_type_specifier PERSONA ENTREGA incienzo_expression FINREGALO 
            {
              Object RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		anadirSimbolo(new SymbolTObj("variable local", ty.toString(), id.toString()));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("candelabro_assignment_expression",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // candelabro_assignment_expression ::= LOCALCOLOCARREGALO gorro_navidad_type_specifier PERSONA FINREGALO 
            {
              Object RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		anadirSimbolo(new SymbolTObj("variable local", ty.toString(), id.toString()));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("candelabro_assignment_expression",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // candelabro_assignment_expression ::= PERSONA ENTREGA incienzo_expression FINREGALO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("candelabro_assignment_expression",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // candelabro_assignment_expression ::= estrella_assign_array FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("candelabro_assignment_expression",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // candelabro_assignment_expression ::= estrella_assign_array ENTREGA nochebuena_initializer FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("candelabro_assignment_expression",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // candelabro_assignment_expression ::= estrella_assign_array ENTREGA incienzo_expression FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("candelabro_assignment_expression",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // pesebre_args ::= pesebre_arg 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pesebre_args",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // pesebre_args ::= pesebre_args CHIMENEA pesebre_arg 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pesebre_args",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // pesebre_args ::= pesebre_args CHIMENEA error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pesebre_args",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // pesebre_args ::= error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pesebre_args",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // pesebre_arg ::= gorro_navidad_type_specifier PERSONA 
            {
              Object RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        anadirSimbolo(new SymbolTObj("argumento de funcion", ty.toString(), id.toString()));
        String type = ty.toString();
        functionIdentifiers.get(functionIdentifiers.size()-1).addTipoParametro(Expresion.tipoFromString(type));
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pesebre_arg",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // pesebre_arg ::= gorro_navidad_type_specifier PERSONA ABREEMPAQUE incienzo_expression CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		anadirSimbolo(new SymbolTObj("argumento de funcion", ty.toString(), id.toString()));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pesebre_arg",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // reyes_magicos_list_expr ::= incienzo_expression 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        ArrayList arrayExpr = new ArrayList<Expresion>();
        arrayExpr.add((Expresion)expr);
        RESULT = arrayExpr;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reyes_magicos_list_expr",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // reyes_magicos_list_expr ::= reyes_magicos_list_expr CHIMENEA incienzo_expression 
            {
              Object RESULT =null;
		int listExprleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int listExprright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object listExpr = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        ArrayList arrayExpr = (ArrayList<Expresion>)listExpr;
        arrayExpr.add((Expresion)expr);
        RESULT = arrayExpr;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reyes_magicos_list_expr",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // belen_function_call_statement ::= belen_function_call_expression FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("belen_function_call_statement",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // incienzo_expression ::= arbol_constant 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        RESULT = c;                                          
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // incienzo_expression ::= PERSONA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if (getType(id.toString(), true) != TypeEx.NULL){
            RESULT = new Expresion(id.toString(), getType(id.toString(),true));
        } else {
            RESULT = new Expresion("null", TypeEx.NULL);
        };
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // incienzo_expression ::= decorativo_array_elem 
            {
              Object RESULT =null;
		int iexprleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iexprright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object iexpr = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = iexpr;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // incienzo_expression ::= belen_function_call_expression 
            {
              Object RESULT =null;
		int iexprleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iexprright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object iexpr = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = iexpr;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // incienzo_expression ::= ABRECUENTO incienzo_expression CIERRACUENTO 
            {
              Object RESULT =null;
		int iexprleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iexprright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object iexpr = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        RESULT = iexpr;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // incienzo_expression ::= bastoncillo_arithmetic_expr 
            {
              Object RESULT =null;
		int iexprleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iexprright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object iexpr = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = iexpr;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // incienzo_expression ::= galleta_logic_expr 
            {
              Object RESULT =null;
		int iexprleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iexprright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object iexpr = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = iexpr;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // incienzo_expression ::= leche_relational_expr 
            {
              Object RESULT =null;
		int iexprleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iexprright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object iexpr = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = iexpr;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // diciembre_operation_array ::= QUIEN decorativo_array_elem 
            {
              Object RESULT =null;
		int arrElemleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int arrElemright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object arrElem = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Expresion arrElemExpr = (Expresion)arrElem;
        var resultType = validarTipado("++", arrElemExpr, new ArrayList<TypeEx>(Arrays.asList(TypeEx.INT)));
        if (resultType == TypeEx.INT) {
            RESULT = new Expresion(arrElemExpr.getValue().toString() + "++", TypeEx.INT);
        }
        else {
            System.out.println("Error semántico: tipo de dato " + arrElemExpr.getType().toString() + " no es permitido para incremento. En la linea " + lex.getLine() + " columna " + lex.getColumn());
            RESULT = new Expresion("null", TypeEx.NULL);
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("diciembre_operation_array",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // diciembre_operation_array ::= GRINCH decorativo_array_elem 
            {
              Object RESULT =null;
		int arrElemleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int arrElemright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object arrElem = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Expresion arrElemExpr = (Expresion)arrElem;
        var resultType = validarTipado("--", arrElemExpr, new ArrayList<TypeEx>(Arrays.asList(TypeEx.INT)));
        if (resultType == TypeEx.INT) {
            RESULT = new Expresion(arrElemExpr.getValue().toString() + "--", TypeEx.INT);
        }
        else {
            System.out.println("Error semántico: tipo de dato " + arrElemExpr.getType().toString() + " no es permitido para decremento. En la linea " + lex.getLine() + " columna " + lex.getColumn());
            RESULT = new Expresion("null", TypeEx.NULL);
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("diciembre_operation_array",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // bastoncillo_arithmetic_expr ::= incienzo_expression TRUENO incienzo_expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Expresion aexpr = (Expresion)a;
        Expresion bexpr = (Expresion)b;
        ArrayList<TypeEx> arrayValidTypes = new ArrayList<TypeEx>(Arrays.asList(TypeEx.INT, TypeEx.FLOAT));
        TypeEx resultType = validarTipado("-", aexpr, bexpr, arrayValidTypes);

        switch(resultType){
            case INT:
                RESULT = new Expresion(aexpr.getValue().toString() + " - " + bexpr.getValue().toString(), TypeEx.INT);
                break;
            case FLOAT:
                RESULT = new Expresion(aexpr.getValue().toString() + " - " + bexpr.getValue().toString(), TypeEx.FLOAT);
                break;
            default:
                RESULT = new Expresion("null", TypeEx.NULL);
                break;
        };
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // bastoncillo_arithmetic_expr ::= incienzo_expression RODOLFO incienzo_expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Expresion aexpr = (Expresion)a;
        Expresion bexpr = (Expresion)b;
        ArrayList<TypeEx> arrayValidTypes = new ArrayList<TypeEx>(Arrays.asList(TypeEx.INT, TypeEx.FLOAT));
        TypeEx resultType = validarTipado("+", aexpr, bexpr, arrayValidTypes);

        switch(resultType){
            case INT:
                RESULT = new Expresion(aexpr.getValue().toString() + " + " + bexpr.getValue().toString(), TypeEx.INT);
                break;
            case FLOAT:
                RESULT = new Expresion(aexpr.getValue().toString() + " + " + bexpr.getValue().toString(), TypeEx.FLOAT);
                break;
            default:
                RESULT = new Expresion("null", TypeEx.NULL);
                break;
        };
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // bastoncillo_arithmetic_expr ::= incienzo_expression JUGUETON incienzo_expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Expresion aexpr = (Expresion)a;
        Expresion bexpr = (Expresion)b;
        ArrayList<TypeEx> arrayValidTypes = new ArrayList<TypeEx>(Arrays.asList(TypeEx.INT, TypeEx.FLOAT));
        TypeEx resultType = validarTipado("/", aexpr, bexpr, arrayValidTypes);

        switch(resultType){
            case INT:
                RESULT = new Expresion(aexpr.getValue().toString() + " / " + bexpr.getValue().toString(), TypeEx.INT);
                break;
            case FLOAT:
                RESULT = new Expresion(aexpr.getValue().toString() + " / " + bexpr.getValue().toString(), TypeEx.FLOAT);
                break;
            default:
                RESULT = new Expresion("null", TypeEx.NULL);
                break;
        };
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // bastoncillo_arithmetic_expr ::= incienzo_expression RELAMPAGO incienzo_expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Expresion aexpr = (Expresion)a;
        Expresion bexpr = (Expresion)b;
        ArrayList<TypeEx> arrayValidTypes = new ArrayList<TypeEx>(Arrays.asList(TypeEx.INT, TypeEx.FLOAT));
        TypeEx resultType = validarTipado("*", aexpr, bexpr, arrayValidTypes);

        switch(resultType){
            case INT:
                RESULT = new Expresion(aexpr.getValue().toString() + " * " + bexpr.getValue().toString(), TypeEx.INT);
                break;
            case FLOAT:
                RESULT = new Expresion(aexpr.getValue().toString() + " * " + bexpr.getValue().toString(), TypeEx.FLOAT);
                break;
            default:
                RESULT = new Expresion("null", TypeEx.NULL);
                break;
        };
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // bastoncillo_arithmetic_expr ::= incienzo_expression CUPIDO incienzo_expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Expresion aexpr = (Expresion)a;
        Expresion bexpr = (Expresion)b;
        ArrayList<TypeEx> arrayValidTypes = new ArrayList<TypeEx>(Arrays.asList(TypeEx.INT, TypeEx.FLOAT));
        TypeEx resultType = validarTipado("~xz", aexpr, bexpr, arrayValidTypes);

        switch(resultType){
            case INT:
                RESULT = new Expresion(aexpr.getValue().toString() + " ~ " + bexpr.getValue().toString(), TypeEx.INT);
                break;
            case FLOAT:
                RESULT = new Expresion(aexpr.getValue().toString() + " ~ " + bexpr.getValue().toString(), TypeEx.FLOAT);
                break;
            default:
                RESULT = new Expresion("null", TypeEx.NULL);
                break;
        };
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // bastoncillo_arithmetic_expr ::= incienzo_expression COMETA incienzo_expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Expresion aexpr = (Expresion)a;
        Expresion bexpr = (Expresion)b;
        ArrayList<TypeEx> arrayValidTypes = new ArrayList<TypeEx>(Arrays.asList(TypeEx.INT, TypeEx.FLOAT)); 
        TypeEx resultType = validarTipado("**", aexpr, bexpr, arrayValidTypes);

        switch(resultType){
            case INT:
                RESULT = new Expresion(aexpr.getValue().toString() + " ** " + bexpr.getValue().toString(), TypeEx.INT);
                break;
            case FLOAT:
                RESULT = new Expresion(aexpr.getValue().toString() + " ** " + bexpr.getValue().toString(), TypeEx.FLOAT);
                break;
            default:
                RESULT = new Expresion("null", TypeEx.NULL);
                break;
        };
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // bastoncillo_arithmetic_expr ::= TRUENO incienzo_expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Expresion aexpr = (Expresion)a;
        ArrayList<TypeEx> arrayValidTypes = new ArrayList<TypeEx>(Arrays.asList(TypeEx.INT, TypeEx.FLOAT)); 
        TypeEx resultType = validarTipado("-", aexpr, arrayValidTypes);

        switch(resultType){
            case INT:
                RESULT = new Expresion(" - " + aexpr.getValue().toString(), TypeEx.INT);
                break;
            case FLOAT:
                RESULT = new Expresion(" - " + aexpr.getValue().toString(), TypeEx.FLOAT);
                break;
            default:
                RESULT = new Expresion("null", TypeEx.NULL);
                break;
        };
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // bastoncillo_arithmetic_expr ::= QUIEN PERSONA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        TypeEx resultType = getType(id.toString(), false);
        if (resultType == TypeEx.NULL) {
            RESULT = new Expresion("null", TypeEx.NULL);
        } else {
            switch(resultType){
                case INT:
                    RESULT = new Expresion(" ++ " + id.toString(), TypeEx.INT);
                    break;
                case FLOAT:
                    RESULT = new Expresion(" ++ " + id.toString(), TypeEx.FLOAT);
                    break;
                default:
                    System.out.println("Error semántico: no es posible implementar la operación sobre tipos de dato:" + resultType.toString() + ". Error en línea " + lex.getLine() + " columna: " + lex.getColumn());
                    RESULT = new Expresion("null", TypeEx.NULL);
                    break;
            };
        };
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // bastoncillo_arithmetic_expr ::= GRINCH PERSONA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        TypeEx resultType = getType(id.toString(), false);
        if (resultType == TypeEx.NULL) {
            RESULT = new Expresion("null", TypeEx.NULL);
        } else {
            switch(resultType){
                case INT:
                    RESULT = new Expresion(" -- " + id.toString(), TypeEx.INT);
                    break;
                case FLOAT:
                    RESULT = new Expresion(" -- " + id.toString(), TypeEx.FLOAT);
                    break;
                default:
                    System.out.println("Error semántico: no es posible implementar la operación sobre tipos de dato:" + resultType.toString() + ". Error en línea " + lex.getLine() + " columna: " + lex.getColumn());
                    RESULT = new Expresion("null", TypeEx.NULL);
                    break;
            };
        };
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // bastoncillo_arithmetic_expr ::= diciembre_operation_array 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // galleta_logic_expr ::= incienzo_expression GASPAR incienzo_expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Expresion aexpr = (Expresion)a;
        Expresion bexpr = (Expresion)b;
        ArrayList<TypeEx> arrayValidTypes = new ArrayList<TypeEx>(Arrays.asList(TypeEx.BOOL));
        TypeEx resultType = validarTipado(" ^ ", aexpr, bexpr, arrayValidTypes);
        switch (resultType) {
        case BOOL:
            RESULT = new Expresion(aexpr.getValue().toString() + " ^ " + bexpr.getValue().toString(), TypeEx.BOOL);
            break;
        default:
            RESULT = new Expresion("null", TypeEx.NULL);
            break;
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("galleta_logic_expr",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // galleta_logic_expr ::= incienzo_expression MELCHOR incienzo_expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Expresion aexpr = (Expresion)a;
        Expresion bexpr = (Expresion)b;
        ArrayList<TypeEx> arrayValidTypes = new ArrayList<TypeEx>(Arrays.asList(TypeEx.BOOL));
        TypeEx resultType = validarTipado(" # ", aexpr, bexpr, arrayValidTypes);
        switch (resultType) {
        case BOOL:
            RESULT = new Expresion(aexpr.getValue().toString() + " # " + bexpr.getValue().toString(), TypeEx.BOOL);
            break;
        default:
            RESULT = new Expresion("null", TypeEx.NULL);
            break;
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("galleta_logic_expr",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // galleta_logic_expr ::= BALTASAR incienzo_expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Expresion aexpr = (Expresion)a;
        ArrayList<TypeEx> arrayValidTypes = new ArrayList<TypeEx>(Arrays.asList(TypeEx.BOOL));
        TypeEx resultType = validarTipado(" ! ", aexpr, arrayValidTypes);
        switch (resultType) {
        case BOOL:
            RESULT = new Expresion(" ! " + aexpr.getValue().toString(), TypeEx.BOOL);
            break;
        default:
            RESULT = new Expresion("null", TypeEx.NULL);
            break;
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("galleta_logic_expr",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // leche_relational_expr ::= incienzo_expression ALABASTRO incienzo_expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        var aexpr = (Expresion)a;
        var bexpr = (Expresion)b;
        var arrayValidTypes = new ArrayList<TypeEx>(Arrays.asList(TypeEx.INT, TypeEx.FLOAT, TypeEx.BOOL));
        var resultType = validarTipado("==", aexpr, bexpr, arrayValidTypes);
        switch (resultType) {
        case INT:
        case BOOL: 
            RESULT = new Expresion(aexpr.getValue().toString() + " == " + bexpr.getValue().toString(), TypeEx.BOOL);
            break;
        case FLOAT:
            RESULT = new Expresion(aexpr.getValue().toString() + " == " + bexpr.getValue().toString(), TypeEx.BOOL);
            break; 
        default:
            RESULT = new Expresion("null", TypeEx.NULL);
            break;
        };
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("leche_relational_expr",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // leche_relational_expr ::= incienzo_expression EVERGEEN incienzo_expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        var aexpr = (Expresion)a;
        var bexpr = (Expresion)b;
        var arrayValidTypes = new ArrayList<TypeEx>(Arrays.asList(TypeEx.INT, TypeEx.FLOAT, TypeEx.BOOL));
        var resultType = validarTipado("!=", aexpr, bexpr, arrayValidTypes);
        switch (resultType) {
        case INT:
        case BOOL: 
            RESULT = new Expresion(aexpr.getValue().toString() + " != " + bexpr.getValue().toString(), TypeEx.BOOL);
            break;
        case FLOAT:
            RESULT = new Expresion(aexpr.getValue().toString() + " != " + bexpr.getValue().toString(), TypeEx.BOOL);
            break; 
        default:
            RESULT = new Expresion("null", TypeEx.NULL);
            break;
        };
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("leche_relational_expr",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // leche_relational_expr ::= incienzo_expression MINSTIX incienzo_expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        var aexpr = (Expresion)a;
        var bexpr = (Expresion)b;
        var arrayValidTypes = new ArrayList<TypeEx>(Arrays.asList(TypeEx.INT, TypeEx.FLOAT));
        var resultType = validarTipado("<", aexpr, bexpr, arrayValidTypes);
        switch (resultType) {
        case INT:
            RESULT = new Expresion(aexpr.getValue().toString() + " < " + bexpr.getValue().toString(), TypeEx.BOOL);
            break;
        case FLOAT:
            RESULT = new Expresion(aexpr.getValue().toString() + " < " + bexpr.getValue().toString(), TypeEx.BOOL);
            break; 
        default:
            RESULT = new Expresion("null", TypeEx.NULL);
            break;
        };
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("leche_relational_expr",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // leche_relational_expr ::= incienzo_expression UPATREE incienzo_expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        var aexpr = (Expresion)a;
        var bexpr = (Expresion)b;
        var arrayValidTypes = new ArrayList<TypeEx>(Arrays.asList(TypeEx.INT, TypeEx.FLOAT));
        var resultType = validarTipado(">", aexpr, bexpr, arrayValidTypes);
        switch (resultType) {
        case INT:
            RESULT = new Expresion(aexpr.getValue().toString() + " > " + bexpr.getValue().toString(), TypeEx.BOOL);
            break;
        case FLOAT:
            RESULT = new Expresion(aexpr.getValue().toString() + " > " + bexpr.getValue().toString(), TypeEx.BOOL);
            break; 
        default:
            RESULT = new Expresion("null", TypeEx.NULL);
            break;
        };
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("leche_relational_expr",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // leche_relational_expr ::= incienzo_expression OPENSLAE incienzo_expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        var aexpr = (Expresion)a;
        var bexpr = (Expresion)b;
        var arrayValidTypes = new ArrayList<TypeEx>(Arrays.asList(TypeEx.INT, TypeEx.FLOAT));
        var resultType = validarTipado("=<", aexpr, bexpr, arrayValidTypes);
        switch (resultType) {
        case INT:
            RESULT = new Expresion(aexpr.getValue().toString() + " =<" + bexpr.getValue().toString(), TypeEx.BOOL);
            break;
        case FLOAT:
            RESULT = new Expresion(aexpr.getValue().toString() + " =< " + bexpr.getValue().toString(), TypeEx.BOOL);
            break; 
        default:
            RESULT = new Expresion("null", TypeEx.NULL);
            break;
        };
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("leche_relational_expr",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // leche_relational_expr ::= incienzo_expression MARY incienzo_expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        var aexpr = (Expresion)a;
        var bexpr = (Expresion)b;
        var arrayValidTypes = new ArrayList<TypeEx>(Arrays.asList(TypeEx.INT, TypeEx.FLOAT));
        var resultType = validarTipado("=>", aexpr, bexpr, arrayValidTypes);
        switch (resultType) {
        case INT:
            RESULT = new Expresion(aexpr.getValue().toString() + " =>" + bexpr.getValue().toString(), TypeEx.BOOL);
            break;
        case FLOAT:
            RESULT = new Expresion(aexpr.getValue().toString() + " => " + bexpr.getValue().toString(), TypeEx.BOOL);
            break; 
        default:
            RESULT = new Expresion("null", TypeEx.NULL);
            break;
        };
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("leche_relational_expr",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
