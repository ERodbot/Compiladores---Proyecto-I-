package Analizer;
import java_cup.runtime.*;

action code {:
    public void uno(){
        System.out.println("123");
    }
    public void dos(){
        System.out.println("456");
    }
:}

parser code {:
  LexerCup lex;

  @SuppressWarnings("deprecation")
  public Sintax(LexerCup lex){
    this.lex=lex;
    this.symbolFactory= new DefaultSymbolFactory();
  }
:}

init with {: :};

scan with {: return lex.next_token(); :};

// Terminals

// Data Types
terminal NOEL, NICOLAS, SANTA, COLACHO, CLAUS;

//Parenthesis
terminal ABRECUENTO, CIERRACUENTO, ABREEMPAQUE, CIERRAEMPAQUE, ABREREGALO, CIERRAREGALO;

//Separator
terminal CHIMENEA;

// Control Structures
terminal ELFO, HADA, DUENDE, ENVUELVE, HACE, REVISA, ENVIA, CORTA;

//Literals numbers
terminal l_NICOLAS, l_NOEL;

//Literal strings
terminal l_SANTA;

//Literal char
terminal l_COLACHO;

// Input/Output Functions
terminal NARRA, ESCUCHA;

// Class Types
terminal MOTIVO, FESTIVAL, FIESTA, NAVIDAD;

//null
terminal NARIZROJA;

//void 
terminal SINREGALO;

// Relational Operators
terminal ALABASTRO, EVERGEEN, UPATREE, MINSTIX, MARY, OPENSLAE;

// Logical Operators
terminal GASPAR, MELCHOR, BALTASAR;

// Assignment
terminal ENTREGA;

// Boolean Literals
terminal l_t_CLAUS, l_f_CLAUS;

// Unary Operators
terminal GRINCH, QUIEN;

// Binary Arithmetic Operators
terminal RODOLFO, TRUENO, RELAMPAGO, JUGUETON, COMETA, CUPIDO;

//Functions
terminal RECORRIDO;

// Identifier
terminal PERSONA;

// End of Line
terminal FINREGALO;

// Lexical Error
terminal ERRORNOTRECOGNIZED;

//no terminal 

non terminal        primary_expression, constant, string, postfix_expression, argument_expression_list, 
                    unary_expression, unary_operator, cast_expression, multiplicative_expression, 
                    additive_expression, relational_expression, equality_expression, and_expression, logical_not_expression, 
                    logical_and_expression, logical_or_expression, conditional_expression, assignment_expression,
                    expression, declaration, declaration_specifiers, init_declarator_list, init_declarator, 
                    type_specifier, specifier_qualifier_list, declarator, direct_declarator, parameter_list, 
                    parameter_declaration, identifier_list, type_name, direct_abstract_declarator, 
                    initializer, initializer_list, designation, designator_list, designator, statement, io_statement,
                    compound_statement, block_item_list, block_item, expression_statement, selection_statement,
                    elif_statement, iteration_statement, jump_statement, main, external_declaration,
                    function_definition, declaration_list;

start with main;


primary_expression ::= PERSONA
	| constant
	| string
	| ABRECUENTO expression CIERRACUENTO
	;

constant ::= l_NOEL		
	| l_NICOLAS	
  | l_COLACHO
  | l_t_CLAUS
  | l_f_CLAUS
	;


string ::= l_SANTA
	| RECORRIDO
	;

postfix_expression ::= primary_expression
	| postfix_expression ABREEMPAQUE expression CIERRAEMPAQUE
	| postfix_expression ABRECUENTO CIERRACUENTO
	| postfix_expression ABRECUENTO argument_expression_list CIERRACUENTO
	| postfix_expression QUIEN
	| postfix_expression GRINCH
	| ABRECUENTO type_name specifier_qualifier_list  CIERRACUENTO ABREREGALO initializer_list CIERRAREGALO
	| ABRECUENTO type_name specifier_qualifier_list CIERRACUENTO ABREREGALO initializer_list CHIMENEA CIERRAREGALO
	;

argument_expression_list ::= assignment_expression
	| argument_expression_list CHIMENEA assignment_expression
	;

unary_expression ::= postfix_expression
	| QUIEN unary_expression
	| GRINCH unary_expression
	| unary_operator cast_expression
	;

unary_operator ::= 
	| RODOLFO
	| TRUENO
	| BALTASAR
	;

cast_expression ::= unary_expression
	| ABRECUENTO type_name CIERRACUENTO cast_expression
	;

multiplicative_expression ::= cast_expression
	| multiplicative_expression RELAMPAGO cast_expression
	| multiplicative_expression JUGUETON cast_expression
	| multiplicative_expression CUPIDO cast_expression
	;

additive_expression ::= multiplicative_expression
	| additive_expression RODOLFO multiplicative_expression
	| additive_expression TRUENO multiplicative_expression
	;

relational_expression ::= additive_expression
	| relational_expression MINSTIX additive_expression
	| relational_expression UPATREE additive_expression
	| relational_expression OPENSLAE additive_expression
	| relational_expression MARY additive_expression
	;

equality_expression ::= relational_expression
	| equality_expression ALABASTRO relational_expression
	| equality_expression EVERGEEN relational_expression
	;

and_expression ::= equality_expression
	| and_expression GASPAR equality_expression
	;

logical_not_expression ::=  BALTASAR and_expression;

logical_and_expression ::= logical_not_expression
	| logical_and_expression GASPAR logical_not_expression
	;

logical_or_expression ::= logical_and_expression
	| logical_or_expression MELCHOR logical_and_expression
	;

conditional_expression ::= logical_or_expression
	;

assignment_expression ::= conditional_expression
	| unary_expression ENTREGA assignment_expression
	;

expression ::= assignment_expression
	| expression CHIMENEA assignment_expression
	;

declaration ::= declaration_specifiers FINREGALO
	| declaration_specifiers init_declarator_list FINREGALO
	;

declaration_specifiers ::= type_specifier declaration_specifiers
	| type_specifier
	;

init_declarator_list ::= init_declarator
	| init_declarator_list CHIMENEA init_declarator
	;

init_declarator ::= declarator ENTREGA initializer
	| declarator
	;

type_specifier ::= SINREGALO
	| COLACHO
  | SANTA
	| NOEL
	| NICOLAS
	| CLAUS
	;
specifier_qualifier_list ::= type_specifier specifier_qualifier_list
	| type_specifier
	;

declarator ::= direct_declarator;

direct_declarator ::= PERSONA
	| ABRECUENTO declarator CIERRACUENTO
	| direct_declarator ABREEMPAQUE CIERRAEMPAQUE
	| direct_declarator ABREEMPAQUE assignment_expression CIERRAEMPAQUE
	| direct_declarator ABRECUENTO parameter_list CIERRACUENTO
	| direct_declarator ABRECUENTO CIERRACUENTO
	| direct_declarator ABRECUENTO identifier_list CIERRACUENTO
	;

parameter_list ::= parameter_declaration
	| parameter_list CHIMENEA parameter_declaration
	;

parameter_declaration ::= declaration_specifiers declarator
	| declaration_specifiers direct_abstract_declarator
	| declaration_specifiers
	;

identifier_list ::= PERSONA
	| identifier_list CHIMENEA PERSONA
	;
type_name ::= specifier_qualifier_list direct_abstract_declarator
	| specifier_qualifier_list
	;

direct_abstract_declarator ::= ABRECUENTO direct_abstract_declarator  CIERRACUENTO
	| ABREEMPAQUE CIERRAEMPAQUE
	| ABREEMPAQUE assignment_expression CIERRAEMPAQUE
	| direct_abstract_declarator ABREEMPAQUE CIERRAEMPAQUE
	| direct_abstract_declarator ABREEMPAQUE assignment_expression CIERRAEMPAQUE
	| ABRECUENTO CIERRACUENTO
	| ABRECUENTO parameter_list CIERRACUENTO
	| direct_abstract_declarator ABRECUENTO CIERRACUENTO
	| direct_abstract_declarator ABRECUENTO parameter_list CIERRACUENTO
	;

initializer ::= ABREREGALO initializer_list CIERRAREGALO
	| ABREREGALO initializer_list CHIMENEA CIERRAREGALO
	| assignment_expression
	;

initializer_list ::= designation initializer
	| initializer
	| initializer_list CHIMENEA designation initializer
	| initializer_list CHIMENEA initializer
	;

designation ::= designator_list ENTREGA
	;

designator_list ::= designator
	| designator_list designator
	;

designator ::= ABREEMPAQUE conditional_expression CIERRAEMPAQUE
	;

statement ::= compound_statement
	| expression_statement
	| selection_statement
	| iteration_statement
	| jump_statement
  | io_statement
	;

io_statement ::= NARRA ABRECUENTO l_SANTA CIERRACUENTO FINREGALO
  | ESCUCHA ABRECUENTO l_SANTA CIERRACUENTO FINREGALO 
  ;

compound_statement ::= ABREREGALO CIERRAREGALO
	| ABREREGALO  block_item_list CIERRAREGALO
	;

block_item_list ::= block_item
	| block_item_list block_item
	;

block_item ::= declaration
	| statement
	;

expression_statement ::= FINREGALO
	| expression FINREGALO
	;

selection_statement ::= ELFO ABRECUENTO expression CIERRACUENTO statement elif_statement DUENDE statement
    | ELFO ABRECUENTO expression CIERRACUENTO statement DUENDE statement
	| ELFO ABRECUENTO expression CIERRACUENTO statement
	;

elif_statement ::=  HADA  ABRECUENTO expression CIERRACUENTO statement
	| elif_statement HADA  ABRECUENTO expression CIERRACUENTO statement;

iteration_statement ::= HACE statement REVISA ABRECUENTO expression CIERRACUENTO FINREGALO
	| ENVUELVE ABRECUENTO expression_statement expression_statement CIERRACUENTO statement
	| ENVUELVE ABRECUENTO expression_statement expression_statement expression CIERRACUENTO statement
	| ENVUELVE ABRECUENTO declaration expression_statement CIERRACUENTO statement
	| ENVUELVE ABRECUENTO declaration expression_statement expression CIERRACUENTO statement
	;

jump_statement ::= CORTA FINREGALO
	| ENVIA FINREGALO
	| ENVIA expression FINREGALO
	;

main ::= external_declaration
	| main external_declaration
	;

external_declaration ::= function_definition
	| declaration
	;

function_definition ::= declaration_specifiers declarator declaration_list compound_statement
	| declaration_specifiers declarator compound_statement
	;

declaration_list ::= declaration
	| declaration_list declaration
	;

