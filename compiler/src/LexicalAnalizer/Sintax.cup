package LexicalAnalizer;
import java_cup.runtime.*;

action code {:
    public void uno(){
        System.out.println("123");
    }
    public void dos(){
        System.out.println("456");
    }
:}

parser code {:
  LexerCup lex;
  @SuppressWarnings("deprecation")
  public Sintax(LexerCup lex){
    this.lex=lex;
    this.symbolFactory= new DefaultSymbolFactory();
  }
:}

init with {: :};

scan with {: return lex.next_token(); :};

// Terminals

// Data Types
terminal NOEL, NICOLAS, SANTA, COLACHO, CLAUS;

//Parenthesis
terminal ABRECUENTO, CIERRACUENTO, ABREEMPAQUE, CIERRAEMPAQUE, ABREREGALO, CIERRAREGALO;

//Separator
terminal CHIMENEA;

//Literals numbers
terminal l_NICOLAS, l_NOEL;

//Literal strings
terminal l_SANTA;

//Literal char
terminal l_COLACHO;

// Control Structures
terminal ELFO, HADA, DUENDE, ENVUELVE, HACE, REVISA, ENVIA, CORTA;


// Input/Output Functions
terminal NARRA, ESCUCHA;

//null
terminal NARIZROJA;

//void 
terminal SINREGALO;

// Relational Operators
terminal ALABASTRO, EVERGEEN, UPATREE, MINSTIX, MARY, OPENSLAE;

// Logical Operators
terminal GASPAR, MELCHOR, BALTASAR;

// Assignment
terminal ENTREGA;

// Boolean Literals
terminal l_t_CLAUS, l_f_CLAUS;

// Unary Operators
terminal GRINCH, QUIEN;

// Binary Arithmetic Operators
terminal RODOLFO, TRUENO, RELAMPAGO, JUGUETON, COMETA, CUPIDO;

//Functions
terminal RECORRIDO;

// Identifier
terminal PERSONA;

// End of Line
terminal FINREGALO;

// Lexical Error
terminal ERRORNOTRECOGNIZED;

//no terminal 








non terminal   main, saco_function_definition, arbol_constant, gorro_navidad_type_specifier, risa_santa, lazo_io_statement, belen_function_call_statement,
               calcetin_compound_statement, empaque_block_item_list, carta_block_item, deseos_selection_statement, 
			   tradicion_elif_statement, caramelo_iteration_statement, calcetin_jump_statement, nochebuena_initializer, pino_initializer_list, campanas_initializer_list_integer,
			   guirnaldas_initializer_list_char, estrella_assign_array, candelabro_assignment_expression, pesebre_args, reyes_magicos_list_expr, incienzo_expression, bastoncillo_arithmetic_expr, galleta_logic_expr, 
			   leche_relational_expr, burro_general_numerical_expr, mula_general_boolean_expr, pez_general_string_expr;

// Precedence and associativity
precedence left ABRECUENTO, CIERRACUENTO;	//()
precedence left GASPAR;//AND
precedence left MELCHOR; //OR
precedence left BALTASAR;//NOT
precedence left ALABASTRO, EVERGEEN; // == !=
precedence left MINSTIX, UPATREE, OPENSLAE, MARY;//<== ETC
precedence left TRUENO, RODOLFO; //resta
precedence left JUGUETON, RELAMPAGO;  //division, multiplicacion
precedence left CUPIDO, COMETA; // mod, exponente
precedence left QUIEN, GRINCH; // Increment and decrement
//precedence left ALABASTRO, EVERGEEN;  == !=
//precedence left MINSTIX, UPATREE, OPENSLAE, MARY; <== ETC
//precedence left ABRECUENTO, CIERRACUENTO;	()
//precedence left GASPAR; AND
//precedence left MELCHOR; OR
//precedence left BALTASAR; NOT


start with main;

main ::= saco_function_definition
	| main saco_function_definition
	;


//nevada_external_declaration ::= saco_function_definition | risa_santa; 


saco_function_definition ::= gorro_navidad_type_specifier RECORRIDO PERSONA ABRECUENTO pesebre_args CIERRACUENTO calcetin_compound_statement FINREGALO
    | gorro_navidad_type_specifier RECORRIDO PERSONA ABRECUENTO  CIERRACUENTO calcetin_compound_statement FINREGALO;


arbol_constant ::= l_NOEL	| l_NICOLAS | l_COLACHO | l_SANTA | l_t_CLAUS | l_f_CLAUS | NARIZROJA;


gorro_navidad_type_specifier ::= SINREGALO
  | COLACHO
  | SANTA
  | NOEL
  | NICOLAS
  | CLAUS
  ;


risa_santa ::= calcetin_compound_statement
	| candelabro_assignment_expression
	| deseos_selection_statement
	| caramelo_iteration_statement
	| calcetin_jump_statement
    | lazo_io_statement
	| belen_function_call_statement
	;

lazo_io_statement ::= NARRA ABRECUENTO pez_general_string_expr CIERRACUENTO FINREGALO
  | ESCUCHA ABRECUENTO pez_general_string_expr CIERRACUENTO FINREGALO 
  ;

belen_function_call_statement ::= PERSONA ABRECUENTO reyes_magicos_list_expr CIERRACUENTO FINREGALO;

calcetin_compound_statement ::= ABREREGALO CIERRAREGALO
	| ABREREGALO empaque_block_item_list CIERRAREGALO
	;

empaque_block_item_list ::= carta_block_item | empaque_block_item_list carta_block_item;

carta_block_item ::= risa_santa;
	
deseos_selection_statement ::= ELFO ABRECUENTO mula_general_boolean_expr CIERRACUENTO calcetin_compound_statement FINREGALO                                             // if () {};
	| ELFO ABRECUENTO mula_general_boolean_expr CIERRACUENTO calcetin_compound_statement DUENDE calcetin_compound_statement FINREGALO                             // if () {} else {};
    | ELFO ABRECUENTO mula_general_boolean_expr CIERRACUENTO calcetin_compound_statement tradicion_elif_statement DUENDE calcetin_compound_statement FINREGALO           // if () {} elif () {} else() {};
	| ELFO ABRECUENTO mula_general_boolean_expr CIERRACUENTO calcetin_compound_statement tradicion_elif_statement    // if () {} elif () {}
    ;

tradicion_elif_statement ::=  HADA  ABRECUENTO mula_general_boolean_expr CIERRACUENTO calcetin_compound_statement
	| tradicion_elif_statement HADA  ABRECUENTO mula_general_boolean_expr CIERRACUENTO calcetin_compound_statement;


caramelo_iteration_statement ::= HACE risa_santa REVISA ABRECUENTO mula_general_boolean_expr CIERRACUENTO FINREGALO
	| ENVUELVE ABRECUENTO candelabro_assignment_expression CHIMENEA leche_relational_expr CHIMENEA incienzo_expression CIERRACUENTO risa_santa FINREGALO 
	;


calcetin_jump_statement ::= CORTA FINREGALO
	| ENVIA FINREGALO
	| ENVIA incienzo_expression FINREGALO
	;

nochebuena_initializer ::=  ABREREGALO pino_initializer_list CIERRAREGALO
    | ABREREGALO CIERRAREGALO ;

pino_initializer_list ::= campanas_initializer_list_integer | guirnaldas_initializer_list_char;

campanas_initializer_list_integer ::= l_NOEL | campanas_initializer_list_integer CHIMENEA l_NOEL ;

guirnaldas_initializer_list_char ::= l_COLACHO | guirnaldas_initializer_list_char CHIMENEA l_COLACHO ;

estrella_assign_array ::= gorro_navidad_type_specifier PERSONA ABREEMPAQUE CIERRAEMPAQUE 
	| gorro_navidad_type_specifier ABREEMPAQUE CIERRAEMPAQUE
	| gorro_navidad_type_specifier PERSONA ABREEMPAQUE burro_general_numerical_expr CIERRAEMPAQUE  
	| gorro_navidad_type_specifier ABREEMPAQUE burro_general_numerical_expr CIERRAEMPAQUE
	;

candelabro_assignment_expression ::= gorro_navidad_type_specifier PERSONA ENTREGA incienzo_expression FINREGALO
	| estrella_assign_array FINREGALO
	| estrella_assign_array ENTREGA nochebuena_initializer FINREGALO
	| estrella_assign_array ENTREGA incienzo_expression FINREGALO
	;

pesebre_args ::= gorro_navidad_type_specifier PERSONA | pesebre_args CHIMENEA gorro_navidad_type_specifier PERSONA;


reyes_magicos_list_expr ::=  PERSONA | reyes_magicos_list_expr CHIMENEA PERSONA;


incienzo_expression ::= bastoncillo_arithmetic_expr
       | galleta_logic_expr
       | leche_relational_expr
       | arbol_constant
       | PERSONA  // Identificador
       | belen_function_call_statement
       ;

//Expresion general numérica, básicamente cualquier elemento que pueda retornar un número
burro_general_numerical_expr::= bastoncillo_arithmetic_expr
    | PERSONA
    | belen_function_call_statement
    | l_NICOLAS
    | l_NOEL
    ;

//Expresion general booleana, básicamente cualquier elemento que pueda retornar un booleano
mula_general_boolean_expr::= galleta_logic_expr
    | leche_relational_expr
    | PERSONA
    | belen_function_call_statement
    | l_t_CLAUS
    | l_f_CLAUS
    ;

//Expresion general string, básicamente cualquier elemento que pueda retornar un string
pez_general_string_expr::= PERSONA
    | belen_function_call_statement
    | l_SANTA
    ;
// Expresiones aritméticas
bastoncillo_arithmetic_expr ::= burro_general_numerical_expr TRUENO burro_general_numerical_expr // Resta 
    | burro_general_numerical_expr RODOLFO burro_general_numerical_expr // Suma
    | burro_general_numerical_expr JUGUETON burro_general_numerical_expr // División 
    | burro_general_numerical_expr RELAMPAGO burro_general_numerical_expr // Multiplicación
    | burro_general_numerical_expr CUPIDO burro_general_numerical_expr // Modulo
    | burro_general_numerical_expr COMETA burro_general_numerical_expr //Exponente
    | QUIEN PERSONA %prec QUIEN // Incremento prefijo
    | GRINCH PERSONA %prec GRINCH // Decremento prefijo
    | ABRECUENTO bastoncillo_arithmetic_expr CIERRACUENTO // Expresiones entre paréntesis
	;



// Expresiones lógicas
galleta_logic_expr ::= mula_general_boolean_expr GASPAR mula_general_boolean_expr // Y lógico
    | mula_general_boolean_expr MELCHOR mula_general_boolean_expr // O lógico
    | BALTASAR mula_general_boolean_expr // Negación lógica
    | ABRECUENTO galleta_logic_expr CIERRACUENTO // Expresiones entre paréntesis
	;

// Expresiones relacionales
leche_relational_expr ::= burro_general_numerical_expr ALABASTRO burro_general_numerical_expr // Igual
    | burro_general_numerical_expr EVERGEEN burro_general_numerical_expr // No igual
    | burro_general_numerical_expr MINSTIX burro_general_numerical_expr // Menor que
    | burro_general_numerical_expr UPATREE burro_general_numerical_expr // Mayor que
    | burro_general_numerical_expr OPENSLAE burro_general_numerical_expr // Menor o igual
    | burro_general_numerical_expr MARY burro_general_numerical_expr // Mayor o igual
    | ABRECUENTO leche_relational_expr CIERRACUENTO // Expresiones entre paréntesis
    ;


