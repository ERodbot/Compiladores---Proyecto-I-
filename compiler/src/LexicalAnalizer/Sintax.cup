package LexicalAnalizer;
import java_cup.runtime.*;
import FileWriter.FileWriterUtil; 
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;


//manejo de tabla de simbolos 
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;


action code {:

    HashMap<String, ArrayList<SymbolT>> listaTablasSimbolos = new HashMap<String, ArrayList<SymbolT>>();
    String currentHash;

    public void imprimirTablaSimbolos(){
        for (String key: listaTablasSimbolos.keySet()){

            System.out.println("\n\n\n°-------------------------------------------------------------------------------------°");
            System.out.println("\n\t\t\t\tTabla de simbolos: " + key + "\n");
            System.out.println("\t~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
            System.out.println("\t\t\t\t\tValores:");
            System.out.println("\t~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

            System.out.println("\t\t" + String.format("%-20s %-20s %-20s", "valor", "tipo", "lexema") + "\n");
            for (SymbolT item: listaTablasSimbolos.get(key)) {
                System.out.println("\t\t" + item.toString());
            }
            System.out.println("\n\t~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
            System.out.println("");
            System.out.println("°-------------------------------------------------------------------------------------°");
        }
    }

    String MarkdownFilePath = "C:\\Users\\em000\\Documents\\School\\School\\2023_TEC\\Verano\\Compiladores e interpretes\\Proyecto-1\\Compiladores---Proyecto-I-\\compiler\\testExamples\\SymbolTable.md";
    
    public void guardarTablaSimbolos(){
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(MarkdownFilePath))) {
            for (Map.Entry<String, ArrayList<SymbolT>> entry : listaTablasSimbolos.entrySet()) {
                writer.write("## " + entry.getKey() + "\n\n");
                writer.write("| Valor | Tipo | Lexema |\n");
                writer.write("|-------|------|--------|\n");
                for (SymbolT symbol : entry.getValue()) {
                    writer.write("| " + symbol.getValor() + " | " + symbol.getTipo() + " | " + symbol.getLexema() + " |\n");
                }
                writer.write("\n");
            }
            System.out.println("Markdown file created successfully: " + MarkdownFilePath);
        } catch (IOException e) {
            System.err.println("Error writing the file: " + e.getMessage());
        }
    }

    

    public void definirHash(String hash) {
        currentHash = hash;
        listaTablasSimbolos.put(hash, new ArrayList<SymbolT>());
    }

    public void anadirSimbolo(SymbolT sym){
        listaTablasSimbolos.get(currentHash).add(sym);
    }

:}



parser code {:
  LexerCup lex;
  public ArrayList<String> errores = new ArrayList<String>();
  @SuppressWarnings("deprecation")
  public Sintax(LexerCup lex){
    this.lex=lex;
    this.symbolFactory= new DefaultSymbolFactory();
  };
public void syntax_error(Symbol cur_token){

     
    if (cur_token!=null){
        String cadenaError="Error de sintaxis en la línea " + (cur_token.left+1) + " y columna " + (cur_token.right+1)+ ". Token que generó el error: "+ lex.yytext();
        System.err.println(cadenaError);
        this.errores.add(cadenaError);
        
    }
    else{
        String cadenaError="Error de sintaxis en la línea " + (cur_token.left+1) + " y columna " + (cur_token.right+1)+". Token: "+ cur_token.value;
        System.err.println(cadenaError);
        this.errores.add(cadenaError);
    }
	
}

public void unrecovered_syntax_error(Symbol token) throws java.lang.Exception {
    if (token!=null){
        throw new Exception("Error de sintaxis no puede ser recuperado. Encontrado en la línea " + (token.left+1) + " columna " + (token.right+1) + ". Token que generó el error: " + lex.yytext());
  
    }
    else{
        throw new Exception("Error de sintaxis no puede ser recuperado. Encontrado en la línea " + (token.left+1) + " columna " + (token.right+1) + ". Token que generó el error: " + token.value);
    }
    
}

:}

init with {: :};

scan with {: return lex.next_token(); :};

// Terminals

// Data Types
terminal NOEL, NICOLAS, SANTA, COLACHO, CLAUS;

//Parenthesis
terminal ABRECUENTO, CIERRACUENTO, ABREEMPAQUE, CIERRAEMPAQUE, ABREREGALO, CIERRAREGALO;

//Separator
terminal CHIMENEA;

//Literals numbers
terminal l_NICOLAS, l_NOEL;

//Literal strings
terminal l_SANTA;

//Literal char
terminal l_COLACHO;

// Control Structures
terminal ELFO, HADA, DUENDE, ENVUELVE, HACE, REVISA, ENVIA, CORTA;


// Input/Output Functions
terminal NARRA, ESCUCHA;

//null
terminal NARIZROJA;

//void 
terminal SINREGALO;

// Relational Operators
terminal ALABASTRO, EVERGEEN, UPATREE, MINSTIX, MARY, OPENSLAE;

// Logical Operators
terminal GASPAR, MELCHOR, BALTASAR;

// Assignment
terminal ENTREGA;

// Boolean Literals
terminal l_t_CLAUS, l_f_CLAUS;

// Unary Operators
terminal GRINCH, QUIEN;

// Binary Arithmetic Operators
terminal RODOLFO, TRUENO, RELAMPAGO, JUGUETON, COMETA, CUPIDO;

//Main 
terminal MAINNAVIDAD;

//Functions
terminal RECORRIDO;

// Identifier
terminal PERSONA;

// End of Line
terminal FINREGALO;

// Lexical Error
terminal ERRORNOTRECOGNIZED;

//no terminal 








non terminal   navidad, navidadAux, saco_function_definition_aux, saco_function_definition, arbol_constant, gorro_navidad_type_specifier, statement_risa_santa, lazo_io_statement, belen_function_call_statement,
               calcetin_compound_statement, empaque_block_item_list, carta_block_item, deseos_selection_statement, 
			   tradicion_elif_statement, caramelo_iteration_statement, calcetin_jump_statement, nochebuena_initializer, pino_initializer_list, campanas_initializer_list_integer,
			   guirnaldas_initializer_list_char, estrella_assign_array, candelabro_assignment_expression, pesebre_args, pesebre_arg, reyes_magicos_list_expr, incienzo_expression, diciembre_operation_array, bastoncillo_arithmetic_expr, galleta_logic_expr, 
			   leche_relational_expr;


// Precedence and associativity

precedence left TRUENO, RODOLFO; //resta
precedence left JUGUETON, RELAMPAGO;  //division, multiplicacion
precedence left CUPIDO, COMETA; // mod, exponente
precedence left QUIEN, GRINCH; // Increment and decrement
precedence left ALABASTRO, EVERGEEN;
precedence left MINSTIX, UPATREE, OPENSLAE, MARY;
precedence left GASPAR;
precedence left MELCHOR; 
precedence left BALTASAR;


start with navidad;

//produccion de inicio
navidad ::= {:System.out.println("Inicio de parseo");:} 
            navidadAux 
            {:imprimirTablaSimbolos(); guardarTablaSimbolos(); System.out.println("Fin de parseo");:}; 

navidadAux ::= saco_function_definition
	| navidadAux saco_function_definition
    | navidadAux error
    | error
	;

//definicion de funciones
saco_function_definition ::= saco_function_definition_aux  calcetin_compound_statement FINREGALO;

saco_function_definition_aux ::=  SINREGALO MAINNAVIDAD ABRECUENTO CIERRACUENTO                          {:definirHash("main");
                                                                                                         anadirSimbolo(new SymbolT("function", "integer", "Main"));:}
    | gorro_navidad_type_specifier:ty RECORRIDO PERSONA:id ABRECUENTO                                    {:definirHash(id.toString());
                                                                                                         anadirSimbolo(new SymbolT("function", ty.toString(), id.toString()));:}
     pesebre_args CIERRACUENTO                                                                                                      
    | gorro_navidad_type_specifier:ty RECORRIDO PERSONA:id ABRECUENTO CIERRACUENTO                       {:definirHash(id.toString());
                                                                                                         anadirSimbolo(new SymbolT("function", ty.toString(), id.toString()));:}
    |error CIERRACUENTO
    ;

//constantes
arbol_constant ::= l_NOEL:l_int {:RESULT = l_int;:}	
    | l_NICOLAS:l_flo {:RESULT = l_flo;:} 
    | l_COLACHO:l_ch {:RESULT = l_ch;:}
    | l_SANTA:l_st {:RESULT = l_st;:}
    | l_t_CLAUS:l_t {:RESULT = l_t;:} 
    | l_f_CLAUS:l_f {:RESULT = l_f;:}
    | NARIZROJA:nil {:RESULT = nil;:};

//tipos
gorro_navidad_type_specifier ::= SINREGALO:sr {:RESULT = sr;:}
  | COLACHO:c {:RESULT = c;:}
  | SANTA:s {:RESULT = s;:}
  | NOEL:n {:RESULT = n;:}
  | NICOLAS:ni {:RESULT = ni;:}
  | CLAUS:cl {:RESULT = cl;:}
  ;

//estatuo 
statement_risa_santa ::= calcetin_compound_statement
	| candelabro_assignment_expression
	| deseos_selection_statement
	| caramelo_iteration_statement
	| calcetin_jump_statement
    | lazo_io_statement
	| belen_function_call_statement
    | error FINREGALO 
	;

//estatuo de input/output
lazo_io_statement ::= NARRA ABRECUENTO incienzo_expression CIERRACUENTO FINREGALO
  | ESCUCHA ABRECUENTO incienzo_expression CIERRACUENTO FINREGALO 
  ;

//llamada a funcion
belen_function_call_statement ::= PERSONA ABRECUENTO reyes_magicos_list_expr CIERRACUENTO FINREGALO;

//bloque de codigo
calcetin_compound_statement ::= ABREREGALO CIERRAREGALO
	| ABREREGALO empaque_block_item_list CIERRAREGALO
	;

//items de bloque de codigo
empaque_block_item_list ::= carta_block_item | empaque_block_item_list carta_block_item;

//elementos de bloque de codigo
carta_block_item ::= statement_risa_santa;

//estatuos logicos	
deseos_selection_statement ::= ELFO ABRECUENTO incienzo_expression CIERRACUENTO calcetin_compound_statement FINREGALO                                             // if () {};
	| ELFO ABRECUENTO incienzo_expression CIERRACUENTO calcetin_compound_statement DUENDE calcetin_compound_statement FINREGALO                                   // if () {} else {};                               
    | ELFO ABRECUENTO incienzo_expression CIERRACUENTO calcetin_compound_statement tradicion_elif_statement DUENDE calcetin_compound_statement FINREGALO          // if () {} elif () {} else() {};
    ;

//elifs
tradicion_elif_statement ::=  HADA  ABRECUENTO incienzo_expression CIERRACUENTO calcetin_compound_statement
	| tradicion_elif_statement HADA  ABRECUENTO incienzo_expression CIERRACUENTO calcetin_compound_statement;

//iterracion
caramelo_iteration_statement ::= HACE statement_risa_santa REVISA ABRECUENTO incienzo_expression CIERRACUENTO FINREGALO //do while
	| ENVUELVE ABRECUENTO candelabro_assignment_expression CHIMENEA leche_relational_expr CHIMENEA incienzo_expression CIERRACUENTO statement_risa_santa FINREGALO //for
	;

//terminacion de ciclos y retornos
calcetin_jump_statement ::= CORTA FINREGALO     //break
	| ENVIA FINREGALO                           //return|
	| ENVIA incienzo_expression FINREGALO       //return 5+2|
	;

//inicializacion de un array 
nochebuena_initializer ::=  ABREREGALO pino_initializer_list CIERRAREGALO      // {1,2,3,4...}
    | ABREREGALO CIERRAREGALO ;

//elementos de un array sin importar su tipo
pino_initializer_list ::= campanas_initializer_list_integer | guirnaldas_initializer_list_char;   // {1,2,3,4} o {'a','b','c'}

//elementos de lista con integer
campanas_initializer_list_integer ::= l_NOEL | campanas_initializer_list_integer CHIMENEA l_NOEL ;

//elementos de lista con char
guirnaldas_initializer_list_char ::= l_COLACHO | guirnaldas_initializer_list_char CHIMENEA l_COLACHO ;

//asignacion de arrays (parte izquierda)
estrella_assign_array ::= gorro_navidad_type_specifier:ty PERSONA:id ABREEMPAQUE CIERRAEMPAQUE      //int id[]
    {:anadirSimbolo(new SymbolT("variable local", ty.toString(), id.toString()));:}
	| gorro_navidad_type_specifier:ty PERSONA:id ABREEMPAQUE incienzo_expression CIERRAEMPAQUE      //int id[4]
    {:anadirSimbolo(new SymbolT("variable local", ty.toString(), id.toString()));:}
	;

//expresiones de asignacion 
candelabro_assignment_expression ::= gorro_navidad_type_specifier:ty PERSONA:id ENTREGA incienzo_expression FINREGALO  //int id = 5|
    {:anadirSimbolo(new SymbolT("variable local", ty.toString(), id.toString()));:}
    | gorro_navidad_type_specifier:ty PERSONA:id FINREGALO 
    {:anadirSimbolo(new SymbolT("variable local", ty.toString(), id.toString()));:}
    | estrella_assign_array FINREGALO        // int id[4]| ó int[4] ...|
	| estrella_assign_array ENTREGA nochebuena_initializer FINREGALO  // int id[4] = {1,2,3,4}
	| estrella_assign_array ENTREGA incienzo_expression FINREGALO      //idAlreadyDeclared[2] = 2 ó idAlreadyDelcared[2] = ++idAlreadyDeclared[2]
	;

//argumentos para definicion de funciones 
pesebre_args ::=  pesebre_arg | pesebre_args CHIMENEA pesebre_arg| pesebre_args CHIMENEA error|error;

pesebre_arg ::= gorro_navidad_type_specifier:ty PERSONA:id  
                {:anadirSimbolo(new SymbolT("argumento de funcion", ty.toString(), id.toString()));:}     
                | gorro_navidad_type_specifier:ty PERSONA:id  ABREEMPAQUE incienzo_expression CIERRAEMPAQUE
                {:anadirSimbolo(new SymbolT("argumento de funcion", ty.toString(), id.toString()));:}
                ;



//incremento o decremento con asignacion en arrays
reyes_magicos_list_expr ::=  PERSONA | reyes_magicos_list_expr CHIMENEA PERSONA;

incienzo_expression ::= arbol_constant                      // literales
       | PERSONA                                            // Identificador                          
       | ABRECUENTO incienzo_expression CIERRACUENTO        // ( expresion )
       | belen_function_call_statement                      // llamada a function
       | bastoncillo_arithmetic_expr                        // operacion aritmetica
       | galleta_logic_expr                                 // operacion logica
       | leche_relational_expr                              // operacion relacional
       ;

diciembre_operation_array ::= QUIEN estrella_assign_array
    | GRINCH estrella_assign_array; 



// Expresiones aritméticas
bastoncillo_arithmetic_expr ::= incienzo_expression TRUENO incienzo_expression         // Resta 
    | incienzo_expression RODOLFO incienzo_expression                                     // Suma
    | incienzo_expression JUGUETON incienzo_expression                                  // División 
    | incienzo_expression RELAMPAGO incienzo_expression                                  // Multiplicación
    | incienzo_expression CUPIDO incienzo_expression                                     // Modulo
    | incienzo_expression COMETA incienzo_expression                                        //Exponente
    | QUIEN PERSONA:id                                                                                               // Incremento prefijo
    | GRINCH PERSONA:id                                                                                                   // Decremento prefijo
    | diciembre_operation_array                                                                                                                     // Decr o Incr con indice array
	;

// Expresiones lógicas
galleta_logic_expr ::= incienzo_expression GASPAR incienzo_expression               // Y lógico
    | incienzo_expression MELCHOR incienzo_expression                               // O lógico
    | BALTASAR incienzo_expression // Negación lógica                               // No lógico
    ;
  
// Expresiones relacionales
leche_relational_expr ::= incienzo_expression ALABASTRO incienzo_expression         // Igual
    | incienzo_expression EVERGEEN incienzo_expression                              // No igual
    | incienzo_expression MINSTIX incienzo_expression                               // Menor que
    | incienzo_expression UPATREE incienzo_expression                               // Mayor que
    | incienzo_expression OPENSLAE incienzo_expression                              // Menor o igual
    | incienzo_expression MARY incienzo_expression                                  // Mayor o igual
    ;


