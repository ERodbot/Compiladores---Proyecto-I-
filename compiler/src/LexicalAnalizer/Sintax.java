
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package LexicalAnalizer;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\003\003\000\002\003\003\000\002\004\011" +
    "\000\002\004\010\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\004\000\002\005\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\010\007\000\002\010\007\000\002\011\007\000\002\012" +
    "\004\000\002\012\005\000\002\013\003\000\002\013\004" +
    "\000\002\014\003\000\002\015\003\000\002\015\004\000" +
    "\002\016\010\000\002\016\012\000\002\016\013\000\002" +
    "\017\007\000\002\017\010\000\002\020\011\000\002\020" +
    "\010\000\002\021\004\000\002\021\004\000\002\021\004" +
    "\000\002\022\005\000\002\022\004\000\002\023\003\000" +
    "\002\023\003\000\002\024\003\000\002\024\005\000\002" +
    "\025\003\000\002\025\005\000\002\026\006\000\002\026" +
    "\005\000\002\026\007\000\002\026\006\000\002\027\007" +
    "\000\002\027\006\000\002\027\004\000\002\027\006\000" +
    "\002\030\004\000\002\030\006\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\032\004\000\002\032\004\000\002\032\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\004\000\002\033" +
    "\003\000\002\033\003\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\040\004\015\005\021\006\020\007\016\010" +
    "\034\015\031\020\026\023\037\024\004\026\017\027\032" +
    "\034\033\035\035\043\007\071\025\001\002\000\040\004" +
    "\015\005\021\006\020\007\016\010\034\015\031\020\026" +
    "\023\037\024\004\026\017\027\032\034\033\035\035\043" +
    "\007\071\025\001\002\000\042\002\ufffe\004\ufffe\005\ufffe" +
    "\006\ufffe\007\ufffe\010\ufffe\015\ufffe\020\ufffe\023\ufffe\024" +
    "\ufffe\026\ufffe\027\ufffe\034\ufffe\035\ufffe\043\ufffe\071\ufffe" +
    "\001\002\000\046\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007" +
    "\uffe9\010\uffe9\015\uffe9\016\uffe9\020\uffe9\023\uffe9\024\uffe9" +
    "\025\uffe9\026\uffe9\027\uffe9\034\uffe9\035\uffe9\043\uffe9\071" +
    "\uffe9\001\002\000\010\013\ufff5\070\ufff5\071\ufff5\001\002" +
    "\000\046\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010" +
    "\uffec\015\uffec\016\uffec\020\uffec\023\uffec\024\uffec\025\uffec" +
    "\026\uffec\027\uffec\034\uffec\035\uffec\043\uffec\071\uffec\001" +
    "\002\000\010\013\066\070\244\071\065\001\002\000\042" +
    "\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\015" +
    "\ufffd\020\ufffd\023\ufffd\024\ufffd\026\ufffd\027\ufffd\034\ufffd" +
    "\035\ufffd\043\ufffd\071\ufffd\001\002\000\046\002\uffeb\004" +
    "\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\015\uffeb\016\uffeb" +
    "\020\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\034" +
    "\uffeb\035\uffeb\043\uffeb\071\uffeb\001\002\000\046\002\uffee" +
    "\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\015\uffee\016" +
    "\uffee\020\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee" +
    "\034\uffee\035\uffee\043\uffee\071\uffee\001\002\000\010\013" +
    "\ufff2\070\ufff2\071\ufff2\001\002\000\010\013\ufff4\070\ufff4" +
    "\071\ufff4\001\002\000\026\011\050\030\043\031\051\054" +
    "\045\056\041\057\047\060\057\061\044\071\042\072\242" +
    "\001\002\000\010\013\ufff3\070\ufff3\071\ufff3\001\002\000" +
    "\010\013\ufff1\070\ufff1\071\ufff1\001\002\000\042\002\241" +
    "\004\015\005\021\006\020\007\016\010\034\015\031\020" +
    "\026\023\037\024\004\026\017\027\032\034\033\035\035" +
    "\043\007\071\025\001\002\000\046\002\uffea\004\uffea\005" +
    "\uffea\006\uffea\007\uffea\010\uffea\015\uffea\016\uffea\020\uffea" +
    "\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\034\uffea\035" +
    "\uffea\043\uffea\071\uffea\001\002\000\046\002\uffef\004\uffef" +
    "\005\uffef\006\uffef\007\uffef\010\uffef\015\uffef\016\uffef\020" +
    "\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\034\uffef" +
    "\035\uffef\043\uffef\071\uffef\001\002\000\004\011\227\001" +
    "\002\000\004\011\201\001\002\000\006\055\160\072\157" +
    "\001\002\000\042\002\000\004\000\005\000\006\000\007" +
    "\000\010\000\015\000\020\000\023\000\024\000\026\000" +
    "\027\000\034\000\035\000\043\000\071\000\001\002\000" +
    "\042\004\015\005\021\006\020\007\016\010\034\015\031" +
    "\016\152\020\026\023\037\024\004\026\017\027\032\034" +
    "\033\035\035\043\007\071\025\001\002\000\004\072\150" +
    "\001\002\000\004\011\144\001\002\000\010\013\ufff0\070" +
    "\ufff0\071\ufff0\001\002\000\004\011\140\001\002\000\046" +
    "\002\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\015" +
    "\uffed\016\uffed\020\uffed\023\uffed\024\uffed\025\uffed\026\uffed" +
    "\027\uffed\034\uffed\035\uffed\043\uffed\071\uffed\001\002\000" +
    "\004\011\040\001\002\000\026\011\050\030\043\031\051" +
    "\054\045\056\041\057\047\060\057\061\044\071\042\072" +
    "\046\001\002\000\104\002\uffb1\004\uffb1\005\uffb1\006\uffb1" +
    "\007\uffb1\010\uffb1\012\uffb1\015\uffb1\016\uffb1\020\uffb1\023" +
    "\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\034\uffb1\035\uffb1" +
    "\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051" +
    "\uffb1\052\uffb1\053\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1" +
    "\067\uffb1\071\uffb1\072\uffb1\001\002\000\104\002\uffbd\004" +
    "\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\012\uffbd\015\uffbd" +
    "\016\uffbd\020\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027" +
    "\uffbd\034\uffbd\035\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd" +
    "\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\062\uffbd\063" +
    "\uffbd\064\uffbd\065\uffbd\067\uffbd\071\uffbd\072\uffbd\001\002" +
    "\000\104\002\uffbe\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010" +
    "\uffbe\012\uffbe\015\uffbe\016\uffbe\020\uffbe\023\uffbe\024\uffbe" +
    "\025\uffbe\026\uffbe\027\uffbe\034\uffbe\035\uffbe\043\uffbe\044" +
    "\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe" +
    "\053\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\067\uffbe\071" +
    "\uffbe\072\uffbe\001\002\000\004\071\137\001\002\000\024" +
    "\011\050\030\043\031\051\054\045\056\041\057\047\060" +
    "\057\061\044\071\042\001\002\000\030\011\uffe0\012\uffe0" +
    "\030\uffe0\031\uffe0\054\uffe0\056\uffe0\057\uffe0\060\uffe0\061" +
    "\uffe0\071\uffe0\072\uffe0\001\002\000\104\002\uffb0\004\uffb0" +
    "\005\uffb0\006\uffb0\007\uffb0\010\uffb0\012\uffb0\015\uffb0\016" +
    "\uffb0\020\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0" +
    "\034\uffb0\035\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047" +
    "\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\062\uffb0\063\uffb0" +
    "\064\uffb0\065\uffb0\067\uffb0\071\uffb0\072\uffb0\001\002\000" +
    "\024\011\050\030\043\031\051\054\045\056\041\057\047" +
    "\060\057\061\044\071\042\001\002\000\104\002\uffbf\004" +
    "\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf\012\uffbf\015\uffbf" +
    "\016\uffbf\020\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027" +
    "\uffbf\034\uffbf\035\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf" +
    "\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\062\uffbf\063" +
    "\uffbf\064\uffbf\065\uffbf\067\uffbf\071\uffbf\072\uffbf\001\002" +
    "\000\104\002\uffc2\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010" +
    "\uffc2\012\uffc2\015\uffc2\016\uffc2\020\uffc2\023\uffc2\024\uffc2" +
    "\025\uffc2\026\uffc2\027\uffc2\034\uffc2\035\uffc2\043\uffc2\044" +
    "\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2" +
    "\053\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2\067\uffc2\071" +
    "\uffc2\072\uffc2\001\002\000\104\002\uffc0\004\uffc0\005\uffc0" +
    "\006\uffc0\007\uffc0\010\uffc0\012\uffc0\015\uffc0\016\uffc0\020" +
    "\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\034\uffc0" +
    "\035\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050" +
    "\uffc0\051\uffc0\052\uffc0\053\uffc0\062\uffc0\063\uffc0\064\uffc0" +
    "\065\uffc0\067\uffc0\071\uffc0\072\uffc0\001\002\000\036\044" +
    "\111\045\102\046\115\047\105\050\106\051\112\052\103" +
    "\053\101\062\110\063\114\064\107\065\104\067\113\072" +
    "\133\001\002\000\104\002\uffc1\004\uffc1\005\uffc1\006\uffc1" +
    "\007\uffc1\010\uffc1\012\uffc1\015\uffc1\016\uffc1\020\uffc1\023" +
    "\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\034\uffc1\035\uffc1" +
    "\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051" +
    "\uffc1\052\uffc1\053\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1" +
    "\067\uffc1\071\uffc1\072\uffc1\001\002\000\026\011\050\030" +
    "\043\031\051\054\045\056\041\057\047\060\057\061\044" +
    "\071\042\072\046\001\002\000\004\071\060\001\002\000" +
    "\104\002\uffb6\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6" +
    "\012\uffb6\015\uffb6\016\uffb6\020\uffb6\023\uffb6\024\uffb6\025" +
    "\uffb6\026\uffb6\027\uffb6\034\uffb6\035\uffb6\043\uffb6\044\uffb6" +
    "\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053" +
    "\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6\067\uffb6\071\uffb6" +
    "\072\uffb6\001\002\000\004\012\062\001\002\000\040\004" +
    "\015\005\021\006\020\007\016\010\034\015\031\020\026" +
    "\023\037\024\004\026\017\027\032\034\033\035\035\043" +
    "\007\071\025\001\002\000\006\013\066\071\065\001\002" +
    "\000\046\002\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010" +
    "\uffd8\015\uffd8\016\uffd8\020\uffd8\023\uffd8\024\uffd8\025\uffd8" +
    "\026\uffd8\027\uffd8\034\uffd8\035\uffd8\043\uffd8\071\uffd8\001" +
    "\002\000\006\013\073\055\072\001\002\000\006\004\070" +
    "\014\067\001\002\000\006\055\uffcb\072\uffcb\001\002\000" +
    "\004\014\071\001\002\000\006\055\uffc9\072\uffc9\001\002" +
    "\000\024\011\050\030\043\031\051\054\045\056\041\057" +
    "\047\060\057\061\044\071\042\001\002\000\006\004\075" +
    "\014\074\001\002\000\006\055\uffcc\072\uffcc\001\002\000" +
    "\004\014\076\001\002\000\006\055\uffca\072\uffca\001\002" +
    "\000\036\044\111\045\102\046\115\047\105\050\106\051" +
    "\112\052\103\053\101\062\110\063\114\064\107\065\104" +
    "\067\113\072\100\001\002\000\046\002\uffc8\004\uffc8\005" +
    "\uffc8\006\uffc8\007\uffc8\010\uffc8\015\uffc8\016\uffc8\020\uffc8" +
    "\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\034\uffc8\035" +
    "\uffc8\043\uffc8\071\uffc8\001\002\000\024\011\050\030\043" +
    "\031\051\054\045\056\041\057\047\060\057\061\044\071" +
    "\042\001\002\000\024\011\050\030\043\031\051\054\045" +
    "\056\041\057\047\060\057\061\044\071\042\001\002\000" +
    "\024\011\050\030\043\031\051\054\045\056\041\057\047" +
    "\060\057\061\044\071\042\001\002\000\024\011\050\030" +
    "\043\031\051\054\045\056\041\057\047\060\057\061\044" +
    "\071\042\001\002\000\024\011\050\030\043\031\051\054" +
    "\045\056\041\057\047\060\057\061\044\071\042\001\002" +
    "\000\024\011\050\030\043\031\051\054\045\056\041\057" +
    "\047\060\057\061\044\071\042\001\002\000\024\011\050" +
    "\030\043\031\051\054\045\056\041\057\047\060\057\061" +
    "\044\071\042\001\002\000\024\011\050\030\043\031\051" +
    "\054\045\056\041\057\047\060\057\061\044\071\042\001" +
    "\002\000\024\011\050\030\043\031\051\054\045\056\041" +
    "\057\047\060\057\061\044\071\042\001\002\000\024\011" +
    "\050\030\043\031\051\054\045\056\041\057\047\060\057" +
    "\061\044\071\042\001\002\000\024\011\050\030\043\031" +
    "\051\054\045\056\041\057\047\060\057\061\044\071\042" +
    "\001\002\000\024\011\050\030\043\031\051\054\045\056" +
    "\041\057\047\060\057\061\044\071\042\001\002\000\024" +
    "\011\050\030\043\031\051\054\045\056\041\057\047\060" +
    "\057\061\044\071\042\001\002\000\104\002\uffac\004\uffac" +
    "\005\uffac\006\uffac\007\uffac\010\uffac\012\uffac\015\uffac\016" +
    "\uffac\020\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac" +
    "\034\uffac\035\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047" +
    "\uffac\050\uffac\051\uffac\052\uffac\053\uffac\062\110\063\114" +
    "\064\107\065\104\067\113\071\uffac\072\uffac\001\002\000" +
    "\104\002\uffbb\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb" +
    "\012\uffbb\015\uffbb\016\uffbb\020\uffbb\023\uffbb\024\uffbb\025" +
    "\uffbb\026\uffbb\027\uffbb\034\uffbb\035\uffbb\043\uffbb\044\uffbb" +
    "\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053" +
    "\uffbb\062\uffbb\063\114\064\uffbb\065\uffbb\067\uffbb\071\uffbb" +
    "\072\uffbb\001\002\000\104\002\uffb8\004\uffb8\005\uffb8\006" +
    "\uffb8\007\uffb8\010\uffb8\012\uffb8\015\uffb8\016\uffb8\020\uffb8" +
    "\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\034\uffb8\035" +
    "\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8" +
    "\051\uffb8\052\uffb8\053\uffb8\062\uffb8\063\114\064\uffb8\065" +
    "\uffb8\067\uffb8\071\uffb8\072\uffb8\001\002\000\104\002\uffab" +
    "\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab\012\uffab\015" +
    "\uffab\016\uffab\020\uffab\023\uffab\024\uffab\025\uffab\026\uffab" +
    "\027\uffab\034\uffab\035\uffab\043\uffab\044\uffab\045\uffab\046" +
    "\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053\uffab\062\110" +
    "\063\114\064\107\065\104\067\113\071\uffab\072\uffab\001" +
    "\002\000\104\002\uffaf\004\uffaf\005\uffaf\006\uffaf\007\uffaf" +
    "\010\uffaf\012\uffaf\015\uffaf\016\uffaf\020\uffaf\023\uffaf\024" +
    "\uffaf\025\uffaf\026\uffaf\027\uffaf\034\uffaf\035\uffaf\043\uffaf" +
    "\044\uffaf\045\uffaf\046\115\047\105\050\106\051\112\052" +
    "\uffaf\053\uffaf\062\110\063\114\064\107\065\104\067\113" +
    "\071\uffaf\072\uffaf\001\002\000\104\002\uffbc\004\uffbc\005" +
    "\uffbc\006\uffbc\007\uffbc\010\uffbc\012\uffbc\015\uffbc\016\uffbc" +
    "\020\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\034" +
    "\uffbc\035\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc" +
    "\050\uffbc\051\uffbc\052\uffbc\053\uffbc\062\uffbc\063\114\064" +
    "\107\065\104\067\113\071\uffbc\072\uffbc\001\002\000\104" +
    "\002\uffba\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba\012" +
    "\uffba\015\uffba\016\uffba\020\uffba\023\uffba\024\uffba\025\uffba" +
    "\026\uffba\027\uffba\034\uffba\035\uffba\043\uffba\044\uffba\045" +
    "\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba" +
    "\062\uffba\063\114\064\uffba\065\uffba\067\uffba\071\uffba\072" +
    "\uffba\001\002\000\104\002\uffaa\004\uffaa\005\uffaa\006\uffaa" +
    "\007\uffaa\010\uffaa\012\uffaa\015\uffaa\016\uffaa\020\uffaa\023" +
    "\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\034\uffaa\035\uffaa" +
    "\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051" +
    "\uffaa\052\uffaa\053\uffaa\062\110\063\114\064\107\065\104" +
    "\067\113\071\uffaa\072\uffaa\001\002\000\104\002\uffad\004" +
    "\uffad\005\uffad\006\uffad\007\uffad\010\uffad\012\uffad\015\uffad" +
    "\016\uffad\020\uffad\023\uffad\024\uffad\025\uffad\026\uffad\027" +
    "\uffad\034\uffad\035\uffad\043\uffad\044\uffad\045\uffad\046\uffad" +
    "\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad\062\110\063" +
    "\114\064\107\065\104\067\113\071\uffad\072\uffad\001\002" +
    "\000\104\002\uffb9\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010" +
    "\uffb9\012\uffb9\015\uffb9\016\uffb9\020\uffb9\023\uffb9\024\uffb9" +
    "\025\uffb9\026\uffb9\027\uffb9\034\uffb9\035\uffb9\043\uffb9\044" +
    "\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9" +
    "\053\uffb9\062\uffb9\063\114\064\uffb9\065\uffb9\067\uffb9\071" +
    "\uffb9\072\uffb9\001\002\000\104\002\uffb4\004\uffb4\005\uffb4" +
    "\006\uffb4\007\uffb4\010\uffb4\012\uffb4\015\uffb4\016\uffb4\020" +
    "\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\034\uffb4" +
    "\035\uffb4\043\uffb4\044\111\045\102\046\115\047\105\050" +
    "\106\051\112\052\uffb4\053\uffb4\062\110\063\114\064\107" +
    "\065\104\067\113\071\uffb4\072\uffb4\001\002\000\104\002" +
    "\uffae\004\uffae\005\uffae\006\uffae\007\uffae\010\uffae\012\uffae" +
    "\015\uffae\016\uffae\020\uffae\023\uffae\024\uffae\025\uffae\026" +
    "\uffae\027\uffae\034\uffae\035\uffae\043\uffae\044\uffae\045\uffae" +
    "\046\115\047\105\050\106\051\112\052\uffae\053\uffae\062" +
    "\110\063\114\064\107\065\104\067\113\071\uffae\072\uffae" +
    "\001\002\000\104\002\uffb3\004\uffb3\005\uffb3\006\uffb3\007" +
    "\uffb3\010\uffb3\012\uffb3\015\uffb3\016\uffb3\020\uffb3\023\uffb3" +
    "\024\uffb3\025\uffb3\026\uffb3\027\uffb3\034\uffb3\035\uffb3\043" +
    "\uffb3\044\111\045\102\046\115\047\105\050\106\051\112" +
    "\052\uffb3\053\uffb3\062\110\063\114\064\107\065\104\067" +
    "\113\071\uffb3\072\uffb3\001\002\000\030\011\uffdf\012\uffdf" +
    "\030\uffdf\031\uffdf\054\uffdf\056\uffdf\057\uffdf\060\uffdf\061" +
    "\uffdf\071\uffdf\072\uffdf\001\002\000\036\012\135\044\111" +
    "\045\102\046\115\047\105\050\106\051\112\052\103\053" +
    "\101\062\110\063\114\064\107\065\104\067\113\001\002" +
    "\000\104\002\uffb5\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010" +
    "\uffb5\012\uffb5\015\uffb5\016\uffb5\020\uffb5\023\uffb5\024\uffb5" +
    "\025\uffb5\026\uffb5\027\uffb5\034\uffb5\035\uffb5\043\uffb5\044" +
    "\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5" +
    "\053\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\067\uffb5\071" +
    "\uffb5\072\uffb5\001\002\000\104\002\uffb2\004\uffb2\005\uffb2" +
    "\006\uffb2\007\uffb2\010\uffb2\012\uffb2\015\uffb2\016\uffb2\020" +
    "\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\034\uffb2" +
    "\035\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050" +
    "\uffb2\051\uffb2\052\uffb2\053\uffb2\062\uffb2\063\114\064\uffb2" +
    "\065\uffb2\067\uffb2\071\uffb2\072\uffb2\001\002\000\104\002" +
    "\uffb7\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\012\uffb7" +
    "\015\uffb7\016\uffb7\020\uffb7\023\uffb7\024\uffb7\025\uffb7\026" +
    "\uffb7\027\uffb7\034\uffb7\035\uffb7\043\uffb7\044\uffb7\045\uffb7" +
    "\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\062" +
    "\uffb7\063\uffb7\064\uffb7\065\uffb7\067\uffb7\071\uffb7\072\uffb7" +
    "\001\002\000\004\032\141\001\002\000\004\012\142\001" +
    "\002\000\004\072\143\001\002\000\046\002\uffe7\004\uffe7" +
    "\005\uffe7\006\uffe7\007\uffe7\010\uffe7\015\uffe7\016\uffe7\020" +
    "\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\034\uffe7" +
    "\035\uffe7\043\uffe7\071\uffe7\001\002\000\004\032\145\001" +
    "\002\000\004\012\146\001\002\000\004\072\147\001\002" +
    "\000\046\002\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010" +
    "\uffe8\015\uffe8\016\uffe8\020\uffe8\023\uffe8\024\uffe8\025\uffe8" +
    "\026\uffe8\027\uffe8\034\uffe8\035\uffe8\043\uffe8\071\uffe8\001" +
    "\002\000\046\002\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7" +
    "\010\uffd7\015\uffd7\016\uffd7\020\uffd7\023\uffd7\024\uffd7\025" +
    "\uffd7\026\uffd7\027\uffd7\034\uffd7\035\uffd7\043\uffd7\071\uffd7" +
    "\001\002\000\042\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010" +
    "\uffe1\015\uffe1\016\uffe1\020\uffe1\023\uffe1\024\uffe1\026\uffe1" +
    "\027\uffe1\034\uffe1\035\uffe1\043\uffe1\071\uffe1\001\002\000" +
    "\054\002\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5" +
    "\015\uffe5\016\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024" +
    "\uffe5\025\uffe5\026\uffe5\027\uffe5\034\uffe5\035\uffe5\043\uffe5" +
    "\071\uffe5\072\uffe5\001\002\000\042\004\uffe3\005\uffe3\006" +
    "\uffe3\007\uffe3\010\uffe3\015\uffe3\016\uffe3\020\uffe3\023\uffe3" +
    "\024\uffe3\026\uffe3\027\uffe3\034\uffe3\035\uffe3\043\uffe3\071" +
    "\uffe3\001\002\000\042\004\015\005\021\006\020\007\016" +
    "\010\034\015\031\016\155\020\026\023\037\024\004\026" +
    "\017\027\032\034\033\035\035\043\007\071\025\001\002" +
    "\000\054\002\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010" +
    "\uffe4\015\uffe4\016\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4" +
    "\024\uffe4\025\uffe4\026\uffe4\027\uffe4\034\uffe4\035\uffe4\043" +
    "\uffe4\071\uffe4\072\uffe4\001\002\000\042\004\uffe2\005\uffe2" +
    "\006\uffe2\007\uffe2\010\uffe2\015\uffe2\016\uffe2\020\uffe2\023" +
    "\uffe2\024\uffe2\026\uffe2\027\uffe2\034\uffe2\035\uffe2\043\uffe2" +
    "\071\uffe2\001\002\000\046\002\uffc6\004\uffc6\005\uffc6\006" +
    "\uffc6\007\uffc6\010\uffc6\015\uffc6\016\uffc6\020\uffc6\023\uffc6" +
    "\024\uffc6\025\uffc6\026\uffc6\027\uffc6\034\uffc6\035\uffc6\043" +
    "\uffc6\071\uffc6\001\002\000\026\011\050\015\163\030\043" +
    "\031\051\054\045\056\041\057\047\060\057\061\044\071" +
    "\042\001\002\000\036\044\111\045\102\046\115\047\105" +
    "\050\106\051\112\052\103\053\101\062\110\063\114\064" +
    "\107\065\104\067\113\072\200\001\002\000\004\072\177" +
    "\001\002\000\010\016\164\031\167\033\165\001\002\000" +
    "\004\072\uffd3\001\002\000\006\016\uffce\017\uffce\001\002" +
    "\000\004\016\176\001\002\000\006\016\uffd0\017\uffd0\001" +
    "\002\000\006\016\uffd2\017\174\001\002\000\006\016\uffd1" +
    "\017\172\001\002\000\004\033\173\001\002\000\006\016" +
    "\uffcd\017\uffcd\001\002\000\004\031\175\001\002\000\006" +
    "\016\uffcf\017\uffcf\001\002\000\004\072\uffd4\001\002\000" +
    "\046\002\uffc7\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7" +
    "\015\uffc7\016\uffc7\020\uffc7\023\uffc7\024\uffc7\025\uffc7\026" +
    "\uffc7\027\uffc7\034\uffc7\035\uffc7\043\uffc7\071\uffc7\001\002" +
    "\000\046\002\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010" +
    "\uffc5\015\uffc5\016\uffc5\020\uffc5\023\uffc5\024\uffc5\025\uffc5" +
    "\026\uffc5\027\uffc5\034\uffc5\035\uffc5\043\uffc5\071\uffc5\001" +
    "\002\000\024\011\050\030\043\031\051\054\045\056\041" +
    "\057\047\060\057\061\044\071\042\001\002\000\036\012" +
    "\203\044\111\045\102\046\115\047\105\050\106\051\112" +
    "\052\103\053\101\062\110\063\114\064\107\065\104\067" +
    "\113\001\002\000\004\015\031\001\002\000\010\021\207" +
    "\022\206\072\205\001\002\000\046\002\uffde\004\uffde\005" +
    "\uffde\006\uffde\007\uffde\010\uffde\015\uffde\016\uffde\020\uffde" +
    "\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\034\uffde\035" +
    "\uffde\043\uffde\071\uffde\001\002\000\004\015\031\001\002" +
    "\000\004\011\221\001\002\000\006\021\212\022\211\001" +
    "\002\000\004\015\031\001\002\000\004\011\213\001\002" +
    "\000\024\011\050\030\043\031\051\054\045\056\041\057" +
    "\047\060\057\061\044\071\042\001\002\000\036\012\215" +
    "\044\111\045\102\046\115\047\105\050\106\051\112\052" +
    "\103\053\101\062\110\063\114\064\107\065\104\067\113" +
    "\001\002\000\004\015\031\001\002\000\006\021\uffda\022" +
    "\uffda\001\002\000\004\072\220\001\002\000\046\002\uffdc" +
    "\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\015\uffdc\016" +
    "\uffdc\020\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc" +
    "\034\uffdc\035\uffdc\043\uffdc\071\uffdc\001\002\000\024\011" +
    "\050\030\043\031\051\054\045\056\041\057\047\060\057" +
    "\061\044\071\042\001\002\000\036\012\223\044\111\045" +
    "\102\046\115\047\105\050\106\051\112\052\103\053\101" +
    "\062\110\063\114\064\107\065\104\067\113\001\002\000" +
    "\004\015\031\001\002\000\006\021\uffdb\022\uffdb\001\002" +
    "\000\004\072\226\001\002\000\046\002\uffdd\004\uffdd\005" +
    "\uffdd\006\uffdd\007\uffdd\010\uffdd\015\uffdd\016\uffdd\020\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\034\uffdd\035" +
    "\uffdd\043\uffdd\071\uffdd\001\002\000\016\004\015\005\021" +
    "\006\020\007\016\010\034\043\007\001\002\000\006\012" +
    "\234\017\233\001\002\000\004\071\232\001\002\000\006" +
    "\012\uffc4\017\uffc4\001\002\000\016\004\015\005\021\006" +
    "\020\007\016\010\034\043\007\001\002\000\004\072\235" +
    "\001\002\000\046\002\uffe6\004\uffe6\005\uffe6\006\uffe6\007" +
    "\uffe6\010\uffe6\015\uffe6\016\uffe6\020\uffe6\023\uffe6\024\uffe6" +
    "\025\uffe6\026\uffe6\027\uffe6\034\uffe6\035\uffe6\043\uffe6\071" +
    "\uffe6\001\002\000\004\071\237\001\002\000\006\012\uffc3" +
    "\017\uffc3\001\002\000\042\002\uffff\004\uffff\005\uffff\006" +
    "\uffff\007\uffff\010\uffff\015\uffff\020\uffff\023\uffff\024\uffff" +
    "\026\uffff\027\uffff\034\uffff\035\uffff\043\uffff\071\uffff\001" +
    "\002\000\004\002\001\001\002\000\046\002\uffd6\004\uffd6" +
    "\005\uffd6\006\uffd6\007\uffd6\010\uffd6\015\uffd6\016\uffd6\020" +
    "\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\034\uffd6" +
    "\035\uffd6\043\uffd6\071\uffd6\001\002\000\100\002\uffd5\004" +
    "\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\015\uffd5\016\uffd5" +
    "\020\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\034" +
    "\uffd5\035\uffd5\043\uffd5\044\111\045\102\046\115\047\105" +
    "\050\106\051\112\052\103\053\101\062\110\063\114\064" +
    "\107\065\104\067\113\071\uffd5\001\002\000\004\071\245" +
    "\001\002\000\004\011\246\001\002\000\020\004\015\005" +
    "\021\006\020\007\016\010\034\012\250\043\007\001\002" +
    "\000\006\012\252\017\233\001\002\000\004\015\031\001" +
    "\002\000\042\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb" +
    "\010\ufffb\015\ufffb\020\ufffb\023\ufffb\024\ufffb\026\ufffb\027" +
    "\ufffb\034\ufffb\035\ufffb\043\ufffb\071\ufffb\001\002\000\004" +
    "\015\031\001\002\000\042\002\ufffc\004\ufffc\005\ufffc\006" +
    "\ufffc\007\ufffc\010\ufffc\015\ufffc\020\ufffc\023\ufffc\024\ufffc" +
    "\026\ufffc\027\ufffc\034\ufffc\035\ufffc\043\ufffc\071\ufffc\001" +
    "\002\000\004\025\255\001\002\000\004\011\256\001\002" +
    "\000\024\011\050\030\043\031\051\054\045\056\041\057" +
    "\047\060\057\061\044\071\042\001\002\000\036\012\260" +
    "\044\111\045\102\046\115\047\105\050\106\051\112\052" +
    "\103\053\101\062\110\063\114\064\107\065\104\067\113" +
    "\001\002\000\004\072\261\001\002\000\046\002\uffd9\004" +
    "\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\015\uffd9\016\uffd9" +
    "\020\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\034" +
    "\uffd9\035\uffd9\043\uffd9\071\uffd9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\034\002\021\003\027\004\004\006\010\007" +
    "\011\010\022\011\005\012\023\016\035\020\007\021\012" +
    "\026\026\027\013\001\001\000\026\006\062\007\253\010" +
    "\022\011\005\012\023\016\035\020\007\021\012\026\026" +
    "\027\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\031\242\032\051\033\054" +
    "\034\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\003\237\004\004\006\010\007\011\010\022\011\005" +
    "\012\023\016\035\020\007\021\012\026\026\027\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\006\062\007\150\010\022\011\005\012\023\013\153" +
    "\014\152\016\035\020\007\021\012\026\026\027\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\015\055\031\053\032\051\033\054\034\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\031\135\032\051\033\054\034\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\031" +
    "\133\032\051\033\054\034\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\015\060\031\053\032\051\033\054" +
    "\034\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\006\062\007\063\010\022\011\005" +
    "\012\023\016\035\020\007\021\012\026\026\027\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\031\076\032\051\033\054\034\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\031\131\032\051\033\054\034\052\001\001\000" +
    "\012\031\130\032\051\033\054\034\052\001\001\000\012" +
    "\031\127\032\051\033\054\034\052\001\001\000\012\031" +
    "\126\032\051\033\054\034\052\001\001\000\012\031\125" +
    "\032\051\033\054\034\052\001\001\000\012\031\124\032" +
    "\051\033\054\034\052\001\001\000\012\031\123\032\051" +
    "\033\054\034\052\001\001\000\012\031\122\032\051\033" +
    "\054\034\052\001\001\000\012\031\121\032\051\033\054" +
    "\034\052\001\001\000\012\031\120\032\051\033\054\034" +
    "\052\001\001\000\012\031\117\032\051\033\054\034\052" +
    "\001\001\000\012\031\116\032\051\033\054\034\052\001" +
    "\001\000\012\031\115\032\051\033\054\034\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\006\062\007\150\010\022\011\005" +
    "\012\023\014\155\016\035\020\007\021\012\026\026\027" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\022\161\031\160\032\051\033\054\034" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\023\165\024\167\025\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\031\201\032" +
    "\051\033\054\034\052\001\001\000\002\001\001\000\004" +
    "\012\203\001\001\000\004\017\207\001\001\000\002\001" +
    "\001\000\004\012\224\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\216\001\001\000\002\001\001\000" +
    "\012\031\213\032\051\033\054\034\052\001\001\000\002" +
    "\001\001\000\004\012\215\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\031\221\032\051" +
    "\033\054\034\052\001\001\000\002\001\001\000\004\012" +
    "\223\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\230\030\227\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\235" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\230\030\246\001\001\000\002" +
    "\001\001\000\004\012\250\001\001\000\002\001\001\000" +
    "\004\012\252\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\031\256\032\051\033\054\034" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


  LexerCup lex;
  @SuppressWarnings("deprecation")
  public Sintax(LexerCup lex){
    this.lex=lex;
    this.symbolFactory= new DefaultSymbolFactory();
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {


    public void uno(){
        System.out.println("123");
    }
    public void dos(){
        System.out.println("456");
    }

  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main ::= external_declaration 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main ::= main external_declaration 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // external_declaration ::= function_definition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("external_declaration",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // external_declaration ::= statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("external_declaration",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // function_definition ::= type_specifier RECORRIDO PERSONA ABRECUENTO args CIERRACUENTO compound_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("function_definition",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // function_definition ::= type_specifier RECORRIDO PERSONA ABRECUENTO CIERRACUENTO compound_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("function_definition",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // constant ::= l_NOEL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("constant",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constant ::= l_NICOLAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("constant",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constant ::= l_COLACHO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("constant",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constant ::= l_SANTA l_t_CLAUS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("constant",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constant ::= l_f_CLAUS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("constant",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_specifier ::= SINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("type_specifier",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type_specifier ::= COLACHO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("type_specifier",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type_specifier ::= SANTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("type_specifier",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type_specifier ::= NOEL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("type_specifier",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type_specifier ::= NICOLAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("type_specifier",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type_specifier ::= CLAUS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("type_specifier",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= compound_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= assignment_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= selection_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= iteration_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= jump_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= io_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= function_call_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // io_statement ::= NARRA ABRECUENTO l_SANTA CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("io_statement",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // io_statement ::= ESCUCHA ABRECUENTO l_SANTA CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("io_statement",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // function_call_statement ::= PERSONA ABRECUENTO args CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("function_call_statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // compound_statement ::= ABREREGALO CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("compound_statement",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // compound_statement ::= ABREREGALO block_item_list CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("compound_statement",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // block_item_list ::= block_item 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("block_item_list",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // block_item_list ::= block_item_list block_item 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("block_item_list",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // block_item ::= statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("block_item",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression_statement ::= FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expression_statement",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression_statement ::= expression FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expression_statement",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // selection_statement ::= ELFO ABRECUENTO expression CIERRACUENTO compound_statement FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("selection_statement",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // selection_statement ::= ELFO ABRECUENTO expression CIERRACUENTO compound_statement DUENDE compound_statement FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("selection_statement",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // selection_statement ::= ELFO ABRECUENTO expression CIERRACUENTO compound_statement elif_statement DUENDE compound_statement FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("selection_statement",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // elif_statement ::= HADA ABRECUENTO expression CIERRACUENTO compound_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("elif_statement",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // elif_statement ::= elif_statement HADA ABRECUENTO expression CIERRACUENTO compound_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("elif_statement",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // iteration_statement ::= HACE statement REVISA ABRECUENTO expression CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("iteration_statement",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // iteration_statement ::= ENVUELVE ABRECUENTO expression_statement expression_statement CIERRACUENTO statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("iteration_statement",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // jump_statement ::= CORTA FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("jump_statement",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // jump_statement ::= ENVIA FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("jump_statement",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // jump_statement ::= ENVIA expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("jump_statement",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // initializer ::= ABREREGALO initializer_list CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("initializer",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // initializer ::= ABREREGALO CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("initializer",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // initializer_list ::= initializer_list_integer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("initializer_list",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // initializer_list ::= initializer_list_char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("initializer_list",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // initializer_list_integer ::= l_NOEL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("initializer_list_integer",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // initializer_list_integer ::= initializer_list_integer CHIMENEA l_NOEL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("initializer_list_integer",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // initializer_list_char ::= l_COLACHO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("initializer_list_char",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // initializer_list_char ::= initializer_list_char CHIMENEA l_COLACHO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("initializer_list_char",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // assign_array ::= type_specifier PERSONA ABREEMPAQUE CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assign_array",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // assign_array ::= type_specifier ABREEMPAQUE CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assign_array",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // assign_array ::= type_specifier PERSONA ABREEMPAQUE NOEL CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assign_array",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // assign_array ::= type_specifier ABREEMPAQUE NOEL CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assign_array",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // assignment_expression ::= type_specifier PERSONA ENTREGA expression FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assignment_expression",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // assignment_expression ::= assign_array ENTREGA initializer FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assignment_expression",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // assignment_expression ::= assign_array FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assignment_expression",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // assignment_expression ::= assign_array ENTREGA expression FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assignment_expression",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // args ::= type_specifier PERSONA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("args",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // args ::= args CHIMENEA type_specifier PERSONA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("args",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= ArithmeticExpr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expression",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= LogicalExpr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expression",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= RelationalExpr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expression",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression ::= l_NOEL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expression",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= l_NICOLAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expression",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= PERSONA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expression",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ArithmeticExpr ::= expression RODOLFO expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ArithmeticExpr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ArithmeticExpr ::= expression TRUENO expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ArithmeticExpr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ArithmeticExpr ::= expression RELAMPAGO expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ArithmeticExpr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ArithmeticExpr ::= expression JUGUETON expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ArithmeticExpr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ArithmeticExpr ::= expression CUPIDO expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ArithmeticExpr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ArithmeticExpr ::= QUIEN PERSONA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ArithmeticExpr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ArithmeticExpr ::= GRINCH PERSONA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ArithmeticExpr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ArithmeticExpr ::= ABRECUENTO expression CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ArithmeticExpr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LogicalExpr ::= expression GASPAR expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LogicalExpr",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LogicalExpr ::= expression MELCHOR expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LogicalExpr",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LogicalExpr ::= BALTASAR expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LogicalExpr",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LogicalExpr ::= l_t_CLAUS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LogicalExpr",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LogicalExpr ::= l_f_CLAUS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LogicalExpr",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // RelationalExpr ::= expression ALABASTRO expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RelationalExpr",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // RelationalExpr ::= expression EVERGEEN expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RelationalExpr",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // RelationalExpr ::= expression MINSTIX expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RelationalExpr",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // RelationalExpr ::= expression UPATREE expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RelationalExpr",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // RelationalExpr ::= expression OPENSLAE expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RelationalExpr",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // RelationalExpr ::= expression MARY expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RelationalExpr",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
