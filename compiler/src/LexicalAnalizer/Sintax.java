
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package LexicalAnalizer;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\003\003\000\002\003\003\000\002\004\012" +
    "\000\002\004\011\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\010\007\000\002\010" +
    "\007\000\002\011\007\000\002\012\004\000\002\012\005" +
    "\000\002\013\003\000\002\013\004\000\002\014\003\000" +
    "\002\015\010\000\002\015\012\000\002\015\013\000\002" +
    "\016\007\000\002\016\010\000\002\017\011\000\002\017" +
    "\014\000\002\020\004\000\002\020\004\000\002\020\005" +
    "\000\002\021\005\000\002\021\004\000\002\022\003\000" +
    "\002\022\003\000\002\023\003\000\002\023\005\000\002" +
    "\024\003\000\002\024\005\000\002\025\006\000\002\025" +
    "\005\000\002\025\007\000\002\025\006\000\002\026\007" +
    "\000\002\026\004\000\002\026\006\000\002\026\006\000" +
    "\002\027\004\000\002\027\006\000\002\030\003\000\002" +
    "\030\005\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\004\000\002\032\004\000\002\032\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\004\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\040\004\010\005\013\006\014\007\011\010" +
    "\032\015\023\024\021\027\037\030\004\032\012\033\026" +
    "\034\027\035\033\037\005\065\020\001\002\000\040\004" +
    "\010\005\013\006\014\007\011\010\032\015\023\024\021" +
    "\027\037\030\004\032\012\033\026\034\027\035\033\037" +
    "\005\065\020\001\002\000\010\013\ufff3\064\ufff3\065\ufff3" +
    "\001\002\000\050\002\uffe7\004\uffe7\005\uffe7\006\uffe7\007" +
    "\uffe7\010\uffe7\015\uffe7\016\uffe7\024\uffe7\027\uffe7\030\uffe7" +
    "\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\037\uffe7\065" +
    "\uffe7\066\uffe7\001\002\000\010\013\144\064\253\065\143" +
    "\001\002\000\010\013\ufff0\064\ufff0\065\ufff0\001\002\000" +
    "\010\013\ufff2\064\ufff2\065\ufff2\001\002\000\034\011\050" +
    "\020\051\021\044\022\064\023\046\036\060\050\061\052" +
    "\062\053\057\054\065\055\063\065\054\066\251\001\002" +
    "\000\010\013\uffef\064\uffef\065\uffef\001\002\000\010\013" +
    "\ufff1\064\ufff1\065\ufff1\001\002\000\006\051\227\066\226" +
    "\001\002\000\042\002\224\004\010\005\013\006\014\007" +
    "\011\010\032\015\023\024\021\027\037\030\004\032\012" +
    "\033\026\034\027\035\033\037\005\065\020\001\002\000" +
    "\050\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb" +
    "\015\uffeb\016\uffeb\024\uffeb\027\uffeb\030\uffeb\031\uffeb\032" +
    "\uffeb\033\uffeb\034\uffeb\035\uffeb\037\uffeb\065\uffeb\066\uffeb" +
    "\001\002\000\004\011\132\001\002\000\004\011\176\001" +
    "\002\000\050\002\uffea\004\uffea\005\uffea\006\uffea\007\uffea" +
    "\010\uffea\015\uffea\016\uffea\024\uffea\027\uffea\030\uffea\031" +
    "\uffea\032\uffea\033\uffea\034\uffea\035\uffea\037\uffea\065\uffea" +
    "\066\uffea\001\002\000\042\004\010\005\013\006\014\007" +
    "\011\010\032\015\023\016\170\024\021\027\037\030\004" +
    "\032\012\033\026\034\027\035\033\037\005\065\020\001" +
    "\002\000\042\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd" +
    "\010\ufffd\015\ufffd\024\ufffd\027\ufffd\030\ufffd\032\ufffd\033" +
    "\ufffd\034\ufffd\035\ufffd\037\ufffd\065\ufffd\001\002\000\050" +
    "\002\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\015" +
    "\uffed\016\uffed\024\uffed\027\uffed\030\uffed\031\uffed\032\uffed" +
    "\033\uffed\034\uffed\035\uffed\037\uffed\065\uffed\066\uffed\001" +
    "\002\000\004\066\167\001\002\000\004\011\163\001\002" +
    "\000\050\002\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010" +
    "\uffe8\015\uffe8\016\uffe8\024\uffe8\027\uffe8\030\uffe8\031\uffe8" +
    "\032\uffe8\033\uffe8\034\uffe8\035\uffe8\037\uffe8\065\uffe8\066" +
    "\uffe8\001\002\000\042\002\ufffe\004\ufffe\005\ufffe\006\ufffe" +
    "\007\ufffe\010\ufffe\015\ufffe\024\ufffe\027\ufffe\030\ufffe\032" +
    "\ufffe\033\ufffe\034\ufffe\035\ufffe\037\ufffe\065\ufffe\001\002" +
    "\000\010\013\uffee\064\uffee\065\uffee\001\002\000\004\011" +
    "\157\001\002\000\050\002\uffe9\004\uffe9\005\uffe9\006\uffe9" +
    "\007\uffe9\010\uffe9\015\uffe9\016\uffe9\024\uffe9\027\uffe9\030" +
    "\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\037\uffe9" +
    "\065\uffe9\066\uffe9\001\002\000\042\002\000\004\000\005" +
    "\000\006\000\007\000\010\000\015\000\024\000\027\000" +
    "\030\000\032\000\033\000\034\000\035\000\037\000\065" +
    "\000\001\002\000\050\002\uffec\004\uffec\005\uffec\006\uffec" +
    "\007\uffec\010\uffec\015\uffec\016\uffec\024\uffec\027\uffec\030" +
    "\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\037\uffec" +
    "\065\uffec\066\uffec\001\002\000\004\011\040\001\002\000" +
    "\016\004\010\005\013\006\014\007\011\010\032\037\005" +
    "\001\002\000\006\013\144\065\143\001\002\000\004\017" +
    "\043\001\002\000\032\011\050\020\051\021\044\022\064" +
    "\023\046\036\060\050\061\052\062\053\057\054\065\055" +
    "\063\065\054\001\002\000\044\012\ufffa\017\ufffa\040\ufffa" +
    "\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047" +
    "\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa\063\ufffa" +
    "\066\ufffa\001\002\000\044\012\uffbd\017\uffbd\040\uffbd\041" +
    "\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd" +
    "\056\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\066" +
    "\uffbd\001\002\000\044\012\ufff8\017\ufff8\040\ufff8\041\ufff8" +
    "\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8\056" +
    "\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\066\ufff8" +
    "\001\002\000\044\012\uffbb\017\uffbb\040\uffbb\041\uffbb\042" +
    "\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\056\uffbb" +
    "\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\066\uffbb\001" +
    "\002\000\032\011\050\020\051\021\044\022\064\023\046" +
    "\036\060\050\061\052\062\053\057\054\065\055\063\065" +
    "\054\001\002\000\044\012\ufff9\017\ufff9\040\ufff9\041\ufff9" +
    "\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\056" +
    "\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\066\ufff9" +
    "\001\002\000\044\012\uffbf\017\uffbf\040\uffbf\041\uffbf\042" +
    "\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\056\uffbf" +
    "\057\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf\066\uffbf\001" +
    "\002\000\044\012\uffbe\017\uffbe\040\uffbe\041\uffbe\042\uffbe" +
    "\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\056\uffbe\057" +
    "\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\066\uffbe\001\002" +
    "\000\046\011\132\012\uffbc\017\uffbc\040\uffbc\041\uffbc\042" +
    "\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\056\uffbc" +
    "\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\066\uffbc\001" +
    "\002\000\044\012\uffc0\017\uffc0\040\uffc0\041\uffc0\042\uffc0" +
    "\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\056\uffc0\057" +
    "\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0\066\uffc0\001\002" +
    "\000\040\017\125\040\102\041\072\042\106\043\076\044" +
    "\077\045\104\046\074\047\071\056\101\057\105\060\100" +
    "\061\075\062\073\063\103\001\002\000\044\012\ufff5\017" +
    "\ufff5\040\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5" +
    "\046\ufff5\047\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5\062" +
    "\ufff5\063\ufff5\066\ufff5\001\002\000\044\012\ufff4\017\ufff4" +
    "\040\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4\045\ufff4\046" +
    "\ufff4\047\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4" +
    "\063\ufff4\066\ufff4\001\002\000\032\011\050\020\051\021" +
    "\044\022\064\023\046\036\060\050\061\052\062\053\057" +
    "\054\065\055\063\065\054\001\002\000\044\012\ufff6\017" +
    "\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6" +
    "\046\ufff6\047\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6\062" +
    "\ufff6\063\ufff6\066\ufff6\001\002\000\004\065\067\001\002" +
    "\000\044\012\ufff7\017\ufff7\040\ufff7\041\ufff7\042\ufff7\043" +
    "\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\056\ufff7\057\ufff7" +
    "\060\ufff7\061\ufff7\062\ufff7\063\ufff7\066\ufff7\001\002\000" +
    "\004\065\066\001\002\000\044\012\uffb3\017\uffb3\040\uffb3" +
    "\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047" +
    "\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3" +
    "\066\uffb3\001\002\000\044\012\uffb4\017\uffb4\040\uffb4\041" +
    "\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4" +
    "\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\066" +
    "\uffb4\001\002\000\044\012\uffaf\017\uffaf\040\uffaf\041\uffaf" +
    "\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\056" +
    "\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\066\uffaf" +
    "\001\002\000\032\011\050\020\051\021\044\022\064\023" +
    "\046\036\060\050\061\052\062\053\057\054\065\055\063" +
    "\065\054\001\002\000\032\011\050\020\051\021\044\022" +
    "\064\023\046\036\060\050\061\052\062\053\057\054\065" +
    "\055\063\065\054\001\002\000\032\011\050\020\051\021" +
    "\044\022\064\023\046\036\060\050\061\052\062\053\057" +
    "\054\065\055\063\065\054\001\002\000\032\011\050\020" +
    "\051\021\044\022\064\023\046\036\060\050\061\052\062" +
    "\053\057\054\065\055\063\065\054\001\002\000\032\011" +
    "\050\020\051\021\044\022\064\023\046\036\060\050\061" +
    "\052\062\053\057\054\065\055\063\065\054\001\002\000" +
    "\032\011\050\020\051\021\044\022\064\023\046\036\060" +
    "\050\061\052\062\053\057\054\065\055\063\065\054\001" +
    "\002\000\032\011\050\020\051\021\044\022\064\023\046" +
    "\036\060\050\061\052\062\053\057\054\065\055\063\065" +
    "\054\001\002\000\032\011\050\020\051\021\044\022\064" +
    "\023\046\036\060\050\061\052\062\053\057\054\065\055" +
    "\063\065\054\001\002\000\032\011\050\020\051\021\044" +
    "\022\064\023\046\036\060\050\061\052\062\053\057\054" +
    "\065\055\063\065\054\001\002\000\032\011\050\020\051" +
    "\021\044\022\064\023\046\036\060\050\061\052\062\053" +
    "\057\054\065\055\063\065\054\001\002\000\032\011\050" +
    "\020\051\021\044\022\064\023\046\036\060\050\061\052" +
    "\062\053\057\054\065\055\063\065\054\001\002\000\032" +
    "\011\050\020\051\021\044\022\064\023\046\036\060\050" +
    "\061\052\062\053\057\054\065\055\063\065\054\001\002" +
    "\000\032\011\050\020\051\021\044\022\064\023\046\036" +
    "\060\050\061\052\062\053\057\054\065\055\063\065\054" +
    "\001\002\000\032\011\050\020\051\021\044\022\064\023" +
    "\046\036\060\050\061\052\062\053\057\054\065\055\063" +
    "\065\054\001\002\000\044\012\uffab\017\uffab\040\uffab\041" +
    "\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046\074\047\071" +
    "\056\uffab\057\uffab\060\uffab\061\uffab\062\uffab\063\uffab\066" +
    "\uffab\001\002\000\044\012\uffba\017\uffba\040\102\041\072" +
    "\042\106\043\076\044\077\045\104\046\074\047\071\056" +
    "\uffba\057\uffba\060\100\061\075\062\073\063\103\066\uffba" +
    "\001\002\000\044\012\uffaa\017\uffaa\040\uffaa\041\uffaa\042" +
    "\uffaa\043\uffaa\044\uffaa\045\uffaa\046\074\047\071\056\uffaa" +
    "\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\066\uffaa\001" +
    "\002\000\044\012\uffb6\017\uffb6\040\102\041\072\042\106" +
    "\043\076\044\077\045\104\046\074\047\071\056\uffb6\057" +
    "\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\066\uffb6\001\002" +
    "\000\044\012\uffae\017\uffae\040\uffae\041\uffae\042\106\043" +
    "\076\044\077\045\104\046\074\047\071\056\uffae\057\uffae" +
    "\060\uffae\061\uffae\062\uffae\063\uffae\066\uffae\001\002\000" +
    "\044\012\uffb9\017\uffb9\040\102\041\072\042\106\043\076" +
    "\044\077\045\104\046\074\047\071\056\uffb9\057\uffb9\060" +
    "\100\061\075\062\073\063\103\066\uffb9\001\002\000\044" +
    "\012\uffb7\017\uffb7\040\102\041\072\042\106\043\076\044" +
    "\077\045\104\046\074\047\071\056\uffb7\057\uffb7\060\uffb7" +
    "\061\uffb7\062\073\063\103\066\uffb7\001\002\000\044\012" +
    "\uffa9\017\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9" +
    "\045\uffa9\046\074\047\071\056\uffa9\057\uffa9\060\uffa9\061" +
    "\uffa9\062\uffa9\063\uffa9\066\uffa9\001\002\000\044\012\uffac" +
    "\017\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045" +
    "\uffac\046\074\047\071\056\uffac\057\uffac\060\uffac\061\uffac" +
    "\062\uffac\063\uffac\066\uffac\001\002\000\044\012\uffb8\017" +
    "\uffb8\040\102\041\072\042\106\043\076\044\077\045\104" +
    "\046\074\047\071\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062" +
    "\073\063\103\066\uffb8\001\002\000\044\012\uffb1\017\uffb1" +
    "\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046" +
    "\uffb1\047\071\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1" +
    "\063\uffb1\066\uffb1\001\002\000\044\012\uffb5\017\uffb5\040" +
    "\102\041\072\042\106\043\076\044\077\045\104\046\074" +
    "\047\071\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063" +
    "\uffb5\066\uffb5\001\002\000\044\012\uffad\017\uffad\040\uffad" +
    "\041\uffad\042\106\043\076\044\077\045\104\046\074\047" +
    "\071\056\uffad\057\uffad\060\uffad\061\uffad\062\uffad\063\uffad" +
    "\066\uffad\001\002\000\044\012\uffb0\017\uffb0\040\uffb0\041" +
    "\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0" +
    "\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0\066" +
    "\uffb0\001\002\000\032\011\050\020\051\021\044\022\064" +
    "\023\046\036\060\050\061\052\062\053\057\054\065\055" +
    "\063\065\054\001\002\000\040\012\127\040\102\041\072" +
    "\042\106\043\076\044\077\045\104\046\074\047\071\056" +
    "\101\057\105\060\100\061\075\062\073\063\103\001\002" +
    "\000\040\004\010\005\013\006\014\007\011\010\032\015" +
    "\023\024\021\027\037\030\004\032\012\033\026\034\027" +
    "\035\033\037\005\065\020\001\002\000\004\066\131\001" +
    "\002\000\050\002\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8" +
    "\010\uffd8\015\uffd8\016\uffd8\024\uffd8\027\uffd8\030\uffd8\031" +
    "\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\037\uffd8\065\uffd8" +
    "\066\uffd8\001\002\000\032\011\050\020\051\021\044\022" +
    "\064\023\046\036\060\050\061\052\062\053\057\054\065" +
    "\055\063\065\054\001\002\000\006\012\136\017\135\001" +
    "\002\000\042\012\uffc2\017\uffc2\040\102\041\072\042\106" +
    "\043\076\044\077\045\104\046\074\047\071\056\101\057" +
    "\105\060\100\061\075\062\073\063\103\001\002\000\032" +
    "\011\050\020\051\021\044\022\064\023\046\036\060\050" +
    "\061\052\062\053\057\054\065\055\063\065\054\001\002" +
    "\000\004\066\137\001\002\000\110\002\uffe4\004\uffe4\005" +
    "\uffe4\006\uffe4\007\uffe4\010\uffe4\012\uffe4\015\uffe4\016\uffe4" +
    "\017\uffe4\024\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033" +
    "\uffe4\034\uffe4\035\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4" +
    "\043\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4\056\uffe4\057" +
    "\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4\065\uffe4\066\uffe4" +
    "\001\002\000\042\012\uffc1\017\uffc1\040\102\041\072\042" +
    "\106\043\076\044\077\045\104\046\074\047\071\056\101" +
    "\057\105\060\100\061\075\062\073\063\103\001\002\000" +
    "\040\012\142\040\102\041\072\042\106\043\076\044\077" +
    "\045\104\046\074\047\071\056\101\057\105\060\100\061" +
    "\075\062\073\063\103\001\002\000\044\012\uffb2\017\uffb2" +
    "\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046" +
    "\uffb2\047\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2" +
    "\063\uffb2\066\uffb2\001\002\000\006\013\151\051\150\001" +
    "\002\000\006\014\145\021\146\001\002\000\006\051\uffcb" +
    "\066\uffcb\001\002\000\004\014\147\001\002\000\006\051" +
    "\uffc9\066\uffc9\001\002\000\032\011\050\020\051\021\044" +
    "\022\064\023\046\036\060\050\061\052\062\053\057\054" +
    "\065\055\063\065\054\001\002\000\006\014\152\021\153" +
    "\001\002\000\006\051\uffcc\066\uffcc\001\002\000\004\014" +
    "\154\001\002\000\006\051\uffca\066\uffca\001\002\000\040" +
    "\040\102\041\072\042\106\043\076\044\077\045\104\046" +
    "\074\047\071\056\101\057\105\060\100\061\075\062\073" +
    "\063\103\066\156\001\002\000\052\002\uffc8\004\uffc8\005" +
    "\uffc8\006\uffc8\007\uffc8\010\uffc8\015\uffc8\016\uffc8\017\uffc8" +
    "\024\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034" +
    "\uffc8\035\uffc8\037\uffc8\065\uffc8\066\uffc8\001\002\000\004" +
    "\022\160\001\002\000\004\012\161\001\002\000\004\066" +
    "\162\001\002\000\050\002\uffe5\004\uffe5\005\uffe5\006\uffe5" +
    "\007\uffe5\010\uffe5\015\uffe5\016\uffe5\024\uffe5\027\uffe5\030" +
    "\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\037\uffe5" +
    "\065\uffe5\066\uffe5\001\002\000\004\022\164\001\002\000" +
    "\004\012\165\001\002\000\004\066\166\001\002\000\050" +
    "\002\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\015" +
    "\uffe6\016\uffe6\024\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6" +
    "\033\uffe6\034\uffe6\035\uffe6\037\uffe6\065\uffe6\066\uffe6\001" +
    "\002\000\050\002\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7" +
    "\010\uffd7\015\uffd7\016\uffd7\024\uffd7\027\uffd7\030\uffd7\031" +
    "\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\037\uffd7\065\uffd7" +
    "\066\uffd7\001\002\000\054\002\uffe3\004\uffe3\005\uffe3\006" +
    "\uffe3\007\uffe3\010\uffe3\015\uffe3\016\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\037\uffe3\065\uffe3\066\uffe3\001\002\000\042" +
    "\004\010\005\013\006\014\007\011\010\032\015\023\016" +
    "\174\024\021\027\037\030\004\032\012\033\026\034\027" +
    "\035\033\037\005\065\020\001\002\000\042\004\uffe1\005" +
    "\uffe1\006\uffe1\007\uffe1\010\uffe1\015\uffe1\016\uffe1\024\uffe1" +
    "\027\uffe1\030\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\037" +
    "\uffe1\065\uffe1\001\002\000\042\004\uffdf\005\uffdf\006\uffdf" +
    "\007\uffdf\010\uffdf\015\uffdf\016\uffdf\024\uffdf\027\uffdf\030" +
    "\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\037\uffdf\065\uffdf" +
    "\001\002\000\054\002\uffe2\004\uffe2\005\uffe2\006\uffe2\007" +
    "\uffe2\010\uffe2\015\uffe2\016\uffe2\024\uffe2\025\uffe2\026\uffe2" +
    "\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035" +
    "\uffe2\037\uffe2\065\uffe2\066\uffe2\001\002\000\042\004\uffe0" +
    "\005\uffe0\006\uffe0\007\uffe0\010\uffe0\015\uffe0\016\uffe0\024" +
    "\uffe0\027\uffe0\030\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0" +
    "\037\uffe0\065\uffe0\001\002\000\032\011\050\020\051\021" +
    "\044\022\064\023\046\036\060\050\061\052\062\053\057" +
    "\054\065\055\063\065\054\001\002\000\040\012\200\040" +
    "\102\041\072\042\106\043\076\044\077\045\104\046\074" +
    "\047\071\056\101\057\105\060\100\061\075\062\073\063" +
    "\103\001\002\000\004\015\023\001\002\000\010\025\205" +
    "\026\203\066\202\001\002\000\050\002\uffde\004\uffde\005" +
    "\uffde\006\uffde\007\uffde\010\uffde\015\uffde\016\uffde\024\uffde" +
    "\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035" +
    "\uffde\037\uffde\065\uffde\066\uffde\001\002\000\004\015\023" +
    "\001\002\000\006\025\213\026\212\001\002\000\004\011" +
    "\206\001\002\000\032\011\050\020\051\021\044\022\064" +
    "\023\046\036\060\050\061\052\062\053\057\054\065\055" +
    "\063\065\054\001\002\000\040\012\210\040\102\041\072" +
    "\042\106\043\076\044\077\045\104\046\074\047\071\056" +
    "\101\057\105\060\100\061\075\062\073\063\103\001\002" +
    "\000\004\015\023\001\002\000\006\025\uffdb\026\uffdb\001" +
    "\002\000\004\015\023\001\002\000\004\011\214\001\002" +
    "\000\032\011\050\020\051\021\044\022\064\023\046\036" +
    "\060\050\061\052\062\053\057\054\065\055\063\065\054" +
    "\001\002\000\040\012\216\040\102\041\072\042\106\043" +
    "\076\044\077\045\104\046\074\047\071\056\101\057\105" +
    "\060\100\061\075\062\073\063\103\001\002\000\004\015" +
    "\023\001\002\000\006\025\uffda\026\uffda\001\002\000\004" +
    "\066\221\001\002\000\050\002\uffdc\004\uffdc\005\uffdc\006" +
    "\uffdc\007\uffdc\010\uffdc\015\uffdc\016\uffdc\024\uffdc\027\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\037" +
    "\uffdc\065\uffdc\066\uffdc\001\002\000\004\066\223\001\002" +
    "\000\050\002\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010" +
    "\uffdd\015\uffdd\016\uffdd\024\uffdd\027\uffdd\030\uffdd\031\uffdd" +
    "\032\uffdd\033\uffdd\034\uffdd\035\uffdd\037\uffdd\065\uffdd\066" +
    "\uffdd\001\002\000\004\002\001\001\002\000\042\002\uffff" +
    "\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\015\uffff\024" +
    "\uffff\027\uffff\030\uffff\032\uffff\033\uffff\034\uffff\035\uffff" +
    "\037\uffff\065\uffff\001\002\000\052\002\uffc7\004\uffc7\005" +
    "\uffc7\006\uffc7\007\uffc7\010\uffc7\015\uffc7\016\uffc7\017\uffc7" +
    "\024\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034" +
    "\uffc7\035\uffc7\037\uffc7\065\uffc7\066\uffc7\001\002\000\034" +
    "\011\050\015\231\020\051\021\044\022\064\023\046\036" +
    "\060\050\061\052\062\053\057\054\065\055\063\065\054" +
    "\001\002\000\004\066\247\001\002\000\010\016\234\021" +
    "\240\023\235\001\002\000\040\040\102\041\072\042\106" +
    "\043\076\044\077\045\104\046\074\047\071\056\101\057" +
    "\105\060\100\061\075\062\073\063\103\066\233\001\002" +
    "\000\052\002\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010" +
    "\uffc5\015\uffc5\016\uffc5\017\uffc5\024\uffc5\027\uffc5\030\uffc5" +
    "\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\037\uffc5\065" +
    "\uffc5\066\uffc5\001\002\000\004\066\uffd3\001\002\000\006" +
    "\016\uffce\017\uffce\001\002\000\006\016\uffd1\017\245\001" +
    "\002\000\006\016\uffd2\017\243\001\002\000\006\016\uffd0" +
    "\017\uffd0\001\002\000\004\016\242\001\002\000\004\066" +
    "\uffd4\001\002\000\004\021\244\001\002\000\006\016\uffcf" +
    "\017\uffcf\001\002\000\004\023\246\001\002\000\006\016" +
    "\uffcd\017\uffcd\001\002\000\052\002\uffc6\004\uffc6\005\uffc6" +
    "\006\uffc6\007\uffc6\010\uffc6\015\uffc6\016\uffc6\017\uffc6\024" +
    "\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6" +
    "\035\uffc6\037\uffc6\065\uffc6\066\uffc6\001\002\000\040\040" +
    "\102\041\072\042\106\043\076\044\077\045\104\046\074" +
    "\047\071\056\101\057\105\060\100\061\075\062\073\063" +
    "\103\066\252\001\002\000\050\002\uffd6\004\uffd6\005\uffd6" +
    "\006\uffd6\007\uffd6\010\uffd6\015\uffd6\016\uffd6\024\uffd6\027" +
    "\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6" +
    "\037\uffd6\065\uffd6\066\uffd6\001\002\000\050\002\uffd5\004" +
    "\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\015\uffd5\016\uffd5" +
    "\024\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034" +
    "\uffd5\035\uffd5\037\uffd5\065\uffd5\066\uffd5\001\002\000\004" +
    "\065\254\001\002\000\004\011\255\001\002\000\020\004" +
    "\010\005\013\006\014\007\011\010\032\012\260\037\005" +
    "\001\002\000\006\012\265\017\264\001\002\000\004\065" +
    "\263\001\002\000\004\015\023\001\002\000\004\066\262" +
    "\001\002\000\042\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007" +
    "\ufffb\010\ufffb\015\ufffb\024\ufffb\027\ufffb\030\ufffb\032\ufffb" +
    "\033\ufffb\034\ufffb\035\ufffb\037\ufffb\065\ufffb\001\002\000" +
    "\006\012\uffc4\017\uffc4\001\002\000\016\004\010\005\013" +
    "\006\014\007\011\010\032\037\005\001\002\000\004\015" +
    "\023\001\002\000\004\066\267\001\002\000\042\002\ufffc" +
    "\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\015\ufffc\024" +
    "\ufffc\027\ufffc\030\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc" +
    "\037\ufffc\065\ufffc\001\002\000\004\065\271\001\002\000" +
    "\006\012\uffc3\017\uffc3\001\002\000\004\031\273\001\002" +
    "\000\004\011\274\001\002\000\032\011\050\020\051\021" +
    "\044\022\064\023\046\036\060\050\061\052\062\053\057" +
    "\054\065\055\063\065\054\001\002\000\040\012\276\040" +
    "\102\041\072\042\106\043\076\044\077\045\104\046\074" +
    "\047\071\056\101\057\105\060\100\061\075\062\073\063" +
    "\103\001\002\000\004\066\277\001\002\000\050\002\uffd9" +
    "\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\015\uffd9\016" +
    "\uffd9\024\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9" +
    "\034\uffd9\035\uffd9\037\uffd9\065\uffd9\066\uffd9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\034\002\015\003\034\004\030\006\006\007" +
    "\023\010\027\011\005\012\024\015\016\017\021\020\033" +
    "\025\014\026\035\001\001\000\026\006\040\007\271\010" +
    "\027\011\005\012\024\015\016\017\021\020\033\025\014" +
    "\026\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\005\044\011\046\031\247\032\054\033\051\034\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\003\224\004\030\006\006\007\023\010\027\011" +
    "\005\012\024\015\016\017\021\020\033\025\014\026\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\006\040\007\172\010\027" +
    "\011\005\012\024\013\170\014\171\015\016\017\021\020" +
    "\033\025\014\026\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\006\040\025\014\026\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\005\044\011" +
    "\046\031\055\032\054\033\051\034\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\005\044\011\046\031\140\032\054\033\051" +
    "\034\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\005" +
    "\044\011\046\031\067\032\054\033\051\034\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\005\044\011\046\031\123\032\054\033" +
    "\051\034\052\001\001\000\016\005\044\011\046\031\122" +
    "\032\054\033\051\034\052\001\001\000\016\005\044\011" +
    "\046\031\121\032\054\033\051\034\052\001\001\000\016" +
    "\005\044\011\046\031\120\032\054\033\051\034\052\001" +
    "\001\000\016\005\044\011\046\031\117\032\054\033\051" +
    "\034\052\001\001\000\016\005\044\011\046\031\116\032" +
    "\054\033\051\034\052\001\001\000\016\005\044\011\046" +
    "\031\115\032\054\033\051\034\052\001\001\000\016\005" +
    "\044\011\046\031\114\032\054\033\051\034\052\001\001" +
    "\000\016\005\044\011\046\031\113\032\054\033\051\034" +
    "\052\001\001\000\016\005\044\011\046\031\112\032\054" +
    "\033\051\034\052\001\001\000\016\005\044\011\046\031" +
    "\111\032\054\033\051\034\052\001\001\000\016\005\044" +
    "\011\046\031\110\032\054\033\051\034\052\001\001\000" +
    "\016\005\044\011\046\031\107\032\054\033\051\034\052" +
    "\001\001\000\016\005\044\011\046\031\106\032\054\033" +
    "\051\034\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\005\044" +
    "\011\046\031\125\032\054\033\051\034\052\001\001\000" +
    "\002\001\001\000\026\006\040\007\127\010\027\011\005" +
    "\012\024\015\016\017\021\020\033\025\014\026\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\005\044" +
    "\011\046\030\132\031\133\032\054\033\051\034\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\005\044" +
    "\011\046\031\137\032\054\033\051\034\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\005\044\011\046\031\154\032\054\033\051\034" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\006\040\007\172\010\027\011\005\012" +
    "\024\014\174\015\016\017\021\020\033\025\014\026\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\005\044\011\046\031\176" +
    "\032\054\033\051\034\052\001\001\000\002\001\001\000" +
    "\004\012\200\001\001\000\004\016\203\001\001\000\002" +
    "\001\001\000\004\012\221\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\044\011\046\031\206\032\054" +
    "\033\051\034\052\001\001\000\002\001\001\000\004\012" +
    "\210\001\001\000\002\001\001\000\004\012\217\001\001" +
    "\000\002\001\001\000\016\005\044\011\046\031\214\032" +
    "\054\033\051\034\052\001\001\000\002\001\001\000\004" +
    "\012\216\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\005" +
    "\044\011\046\021\227\031\231\032\054\033\051\034\052" +
    "\001\001\000\002\001\001\000\010\022\240\023\236\024" +
    "\235\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\256\027\255\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\260\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\267" +
    "\001\001\000\004\012\265\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\005\044\011\046\031" +
    "\274\032\054\033\051\034\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


  LexerCup lex;
  @SuppressWarnings("deprecation")
  public Sintax(LexerCup lex){
    this.lex=lex;
    this.symbolFactory= new DefaultSymbolFactory();
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {


    public void uno(){
        System.out.println("123");
    }
    public void dos(){
        System.out.println("456");
    }

  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main ::= nevada_external_declaration 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main ::= main nevada_external_declaration 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // nevada_external_declaration ::= saco_function_definition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("nevada_external_declaration",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // nevada_external_declaration ::= risa_santa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("nevada_external_declaration",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // saco_function_definition ::= gorro_navidad_type_specifier RECORRIDO PERSONA ABRECUENTO pesebre_args CIERRACUENTO calcetin_compound_statement FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("saco_function_definition",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // saco_function_definition ::= gorro_navidad_type_specifier RECORRIDO PERSONA ABRECUENTO CIERRACUENTO calcetin_compound_statement FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("saco_function_definition",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // arbol_constant ::= l_NOEL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // arbol_constant ::= l_NICOLAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // arbol_constant ::= l_COLACHO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // arbol_constant ::= l_SANTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // arbol_constant ::= l_t_CLAUS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // arbol_constant ::= l_f_CLAUS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // arbol_constant ::= NARIZROJA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // gorro_navidad_type_specifier ::= SINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("gorro_navidad_type_specifier",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // gorro_navidad_type_specifier ::= COLACHO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("gorro_navidad_type_specifier",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // gorro_navidad_type_specifier ::= SANTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("gorro_navidad_type_specifier",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // gorro_navidad_type_specifier ::= NOEL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("gorro_navidad_type_specifier",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // gorro_navidad_type_specifier ::= NICOLAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("gorro_navidad_type_specifier",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // gorro_navidad_type_specifier ::= CLAUS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("gorro_navidad_type_specifier",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // risa_santa ::= calcetin_compound_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("risa_santa",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // risa_santa ::= candelabro_assignment_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("risa_santa",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // risa_santa ::= deseos_selection_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("risa_santa",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // risa_santa ::= caramelo_iteration_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("risa_santa",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // risa_santa ::= calcetin_jump_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("risa_santa",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // risa_santa ::= lazo_io_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("risa_santa",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // risa_santa ::= belen_function_call_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("risa_santa",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lazo_io_statement ::= NARRA ABRECUENTO l_SANTA CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lazo_io_statement",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lazo_io_statement ::= ESCUCHA ABRECUENTO l_SANTA CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lazo_io_statement",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // belen_function_call_statement ::= PERSONA ABRECUENTO reyes_magicos_list_expr CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("belen_function_call_statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // calcetin_compound_statement ::= ABREREGALO CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("calcetin_compound_statement",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // calcetin_compound_statement ::= ABREREGALO empaque_block_item_list CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("calcetin_compound_statement",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // empaque_block_item_list ::= carta_block_item 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("empaque_block_item_list",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // empaque_block_item_list ::= empaque_block_item_list carta_block_item 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("empaque_block_item_list",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // carta_block_item ::= risa_santa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("carta_block_item",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // deseos_selection_statement ::= ELFO ABRECUENTO incienzo_expression CIERRACUENTO calcetin_compound_statement FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("deseos_selection_statement",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // deseos_selection_statement ::= ELFO ABRECUENTO incienzo_expression CIERRACUENTO calcetin_compound_statement DUENDE calcetin_compound_statement FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("deseos_selection_statement",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // deseos_selection_statement ::= ELFO ABRECUENTO incienzo_expression CIERRACUENTO calcetin_compound_statement tradicion_elif_statement DUENDE calcetin_compound_statement FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("deseos_selection_statement",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tradicion_elif_statement ::= HADA ABRECUENTO incienzo_expression CIERRACUENTO calcetin_compound_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tradicion_elif_statement",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tradicion_elif_statement ::= tradicion_elif_statement HADA ABRECUENTO incienzo_expression CIERRACUENTO calcetin_compound_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tradicion_elif_statement",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // caramelo_iteration_statement ::= HACE risa_santa REVISA ABRECUENTO incienzo_expression CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("caramelo_iteration_statement",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // caramelo_iteration_statement ::= ENVUELVE ABRECUENTO candelabro_assignment_expression CHIMENEA incienzo_expression CHIMENEA incienzo_expression CIERRACUENTO risa_santa FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("caramelo_iteration_statement",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // calcetin_jump_statement ::= CORTA FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("calcetin_jump_statement",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // calcetin_jump_statement ::= ENVIA FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("calcetin_jump_statement",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // calcetin_jump_statement ::= ENVIA incienzo_expression FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("calcetin_jump_statement",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // nochebuena_initializer ::= ABREREGALO pino_initializer_list CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("nochebuena_initializer",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // nochebuena_initializer ::= ABREREGALO CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("nochebuena_initializer",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // pino_initializer_list ::= campanas_initializer_list_integer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pino_initializer_list",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // pino_initializer_list ::= guirnaldas_initializer_list_char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pino_initializer_list",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // campanas_initializer_list_integer ::= l_NOEL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("campanas_initializer_list_integer",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // campanas_initializer_list_integer ::= campanas_initializer_list_integer CHIMENEA l_NOEL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("campanas_initializer_list_integer",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // guirnaldas_initializer_list_char ::= l_COLACHO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("guirnaldas_initializer_list_char",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // guirnaldas_initializer_list_char ::= guirnaldas_initializer_list_char CHIMENEA l_COLACHO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("guirnaldas_initializer_list_char",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // estrella_assign_array ::= gorro_navidad_type_specifier PERSONA ABREEMPAQUE CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estrella_assign_array",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // estrella_assign_array ::= gorro_navidad_type_specifier ABREEMPAQUE CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estrella_assign_array",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // estrella_assign_array ::= gorro_navidad_type_specifier PERSONA ABREEMPAQUE l_NOEL CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estrella_assign_array",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // estrella_assign_array ::= gorro_navidad_type_specifier ABREEMPAQUE l_NOEL CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estrella_assign_array",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // candelabro_assignment_expression ::= gorro_navidad_type_specifier PERSONA ENTREGA incienzo_expression FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("candelabro_assignment_expression",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // candelabro_assignment_expression ::= estrella_assign_array FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("candelabro_assignment_expression",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // candelabro_assignment_expression ::= estrella_assign_array ENTREGA nochebuena_initializer FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("candelabro_assignment_expression",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // candelabro_assignment_expression ::= estrella_assign_array ENTREGA incienzo_expression FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("candelabro_assignment_expression",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // pesebre_args ::= gorro_navidad_type_specifier PERSONA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pesebre_args",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // pesebre_args ::= pesebre_args CHIMENEA gorro_navidad_type_specifier PERSONA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pesebre_args",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // reyes_magicos_list_expr ::= incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reyes_magicos_list_expr",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // reyes_magicos_list_expr ::= reyes_magicos_list_expr CHIMENEA incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reyes_magicos_list_expr",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // incienzo_expression ::= bastoncillo_arithmetic_expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // incienzo_expression ::= galleta_arithmetic_expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // incienzo_expression ::= leche_relational_expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // incienzo_expression ::= arbol_constant 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // incienzo_expression ::= PERSONA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // incienzo_expression ::= belen_function_call_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // bastoncillo_arithmetic_expr ::= incienzo_expression TRUENO incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // bastoncillo_arithmetic_expr ::= incienzo_expression RODOLFO incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // bastoncillo_arithmetic_expr ::= incienzo_expression JUGUETON incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // bastoncillo_arithmetic_expr ::= incienzo_expression RELAMPAGO incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // bastoncillo_arithmetic_expr ::= incienzo_expression CUPIDO incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // bastoncillo_arithmetic_expr ::= incienzo_expression COMETA incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // bastoncillo_arithmetic_expr ::= QUIEN PERSONA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // bastoncillo_arithmetic_expr ::= GRINCH PERSONA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // bastoncillo_arithmetic_expr ::= ABRECUENTO incienzo_expression CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // galleta_arithmetic_expr ::= incienzo_expression GASPAR incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("galleta_arithmetic_expr",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // galleta_arithmetic_expr ::= incienzo_expression MELCHOR incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("galleta_arithmetic_expr",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // galleta_arithmetic_expr ::= BALTASAR incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("galleta_arithmetic_expr",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // leche_relational_expr ::= incienzo_expression ALABASTRO incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("leche_relational_expr",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // leche_relational_expr ::= incienzo_expression EVERGEEN incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("leche_relational_expr",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // leche_relational_expr ::= incienzo_expression MINSTIX incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("leche_relational_expr",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // leche_relational_expr ::= incienzo_expression UPATREE incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("leche_relational_expr",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // leche_relational_expr ::= incienzo_expression OPENSLAE incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("leche_relational_expr",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // leche_relational_expr ::= incienzo_expression MARY incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("leche_relational_expr",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
