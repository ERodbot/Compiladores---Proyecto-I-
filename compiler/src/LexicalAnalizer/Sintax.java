
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package LexicalAnalizer;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\003\012\000\002\003\011\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\007\007\000\002\007\007\000\002\010\007\000\002\011" +
    "\004\000\002\011\005\000\002\012\003\000\002\012\004" +
    "\000\002\013\003\000\002\014\010\000\002\014\012\000" +
    "\002\014\013\000\002\015\007\000\002\015\010\000\002" +
    "\016\011\000\002\016\014\000\002\017\004\000\002\017" +
    "\004\000\002\017\005\000\002\020\005\000\002\020\004" +
    "\000\002\021\003\000\002\021\003\000\002\022\003\000" +
    "\002\022\005\000\002\023\003\000\002\023\005\000\002" +
    "\024\006\000\002\024\005\000\002\024\007\000\002\024" +
    "\006\000\002\025\007\000\002\025\004\000\002\025\006" +
    "\000\002\025\006\000\002\026\004\000\002\026\006\000" +
    "\002\027\003\000\002\027\005\000\002\030\003\000\002" +
    "\030\003\000\002\030\005\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\031\004" +
    "\000\002\031\004\000\002\032\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\004\000\002\032\004\000\002\032" +
    "\003\000\002\033\005\000\002\033\005\000\002\033\004" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\016\004\007\005\010\006\011\007\014\010" +
    "\004\037\012\001\002\000\010\013\ufff0\064\ufff0\065\ufff0" +
    "\001\002\000\020\002\302\004\007\005\010\006\011\007" +
    "\014\010\004\037\012\001\002\000\004\064\015\001\002" +
    "\000\010\013\ufff2\064\ufff2\065\ufff2\001\002\000\010\013" +
    "\ufff1\064\ufff1\065\ufff1\001\002\000\010\013\ufff3\064\ufff3" +
    "\065\ufff3\001\002\000\010\013\ufff5\064\ufff5\065\ufff5\001" +
    "\002\000\020\002\000\004\000\005\000\006\000\007\000" +
    "\010\000\037\000\001\002\000\010\013\ufff4\064\ufff4\065" +
    "\ufff4\001\002\000\004\065\016\001\002\000\004\011\017" +
    "\001\002\000\020\004\007\005\010\006\011\007\014\010" +
    "\004\012\022\037\012\001\002\000\006\012\275\017\274" +
    "\001\002\000\004\065\273\001\002\000\004\015\023\001" +
    "\002\000\042\004\007\005\010\006\011\007\014\010\004" +
    "\015\023\016\030\024\040\027\052\030\026\032\032\033" +
    "\043\034\045\035\050\037\012\065\035\001\002\000\004" +
    "\066\025\001\002\000\020\002\ufffd\004\ufffd\005\ufffd\006" +
    "\ufffd\007\ufffd\010\ufffd\037\ufffd\001\002\000\040\004\007" +
    "\005\010\006\011\007\014\010\004\015\023\024\040\027" +
    "\052\030\026\032\032\033\043\034\045\035\050\037\012" +
    "\065\035\001\002\000\046\004\uffe9\005\uffe9\006\uffe9\007" +
    "\uffe9\010\uffe9\015\uffe9\016\uffe9\024\uffe9\027\uffe9\030\uffe9" +
    "\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\037\uffe9\065" +
    "\uffe9\066\uffe9\001\002\000\052\004\uffe5\005\uffe5\006\uffe5" +
    "\007\uffe5\010\uffe5\015\uffe5\016\uffe5\024\uffe5\025\uffe5\026" +
    "\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5" +
    "\035\uffe5\037\uffe5\065\uffe5\066\uffe5\001\002\000\006\013" +
    "\105\065\261\001\002\000\034\011\062\020\063\021\056" +
    "\022\075\023\060\036\071\050\072\052\073\053\070\054" +
    "\077\055\074\065\065\066\257\001\002\000\006\051\235" +
    "\066\234\001\002\000\046\004\uffed\005\uffed\006\uffed\007" +
    "\uffed\010\uffed\015\uffed\016\uffed\024\uffed\027\uffed\030\uffed" +
    "\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\037\uffed\065" +
    "\uffed\066\uffed\001\002\000\004\011\155\001\002\000\046" +
    "\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\015\uffec\016" +
    "\uffec\024\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec" +
    "\034\uffec\035\uffec\037\uffec\065\uffec\066\uffec\001\002\000" +
    "\042\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\015\uffe3" +
    "\016\uffe3\024\uffe3\027\uffe3\030\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\037\uffe3\065\uffe3\001\002\000\004\011\206" +
    "\001\002\000\042\004\007\005\010\006\011\007\014\010" +
    "\004\015\023\016\204\024\040\027\052\030\026\032\032" +
    "\033\043\034\045\035\050\037\012\065\035\001\002\000" +
    "\046\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\015\uffef" +
    "\016\uffef\024\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033" +
    "\uffef\034\uffef\035\uffef\037\uffef\065\uffef\066\uffef\001\002" +
    "\000\004\066\203\001\002\000\042\004\uffe1\005\uffe1\006" +
    "\uffe1\007\uffe1\010\uffe1\015\uffe1\016\uffe1\024\uffe1\027\uffe1" +
    "\030\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\037\uffe1\065" +
    "\uffe1\001\002\000\004\011\177\001\002\000\046\004\uffea" +
    "\005\uffea\006\uffea\007\uffea\010\uffea\015\uffea\016\uffea\024" +
    "\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea" +
    "\035\uffea\037\uffea\065\uffea\066\uffea\001\002\000\046\004" +
    "\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\015\uffeb\016\uffeb" +
    "\024\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034" +
    "\uffeb\035\uffeb\037\uffeb\065\uffeb\066\uffeb\001\002\000\004" +
    "\011\173\001\002\000\046\004\uffee\005\uffee\006\uffee\007" +
    "\uffee\010\uffee\015\uffee\016\uffee\024\uffee\027\uffee\030\uffee" +
    "\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee\037\uffee\065" +
    "\uffee\066\uffee\001\002\000\004\011\053\001\002\000\016" +
    "\004\007\005\010\006\011\007\014\010\004\037\012\001" +
    "\002\000\004\017\055\001\002\000\032\011\062\020\063" +
    "\021\056\022\075\023\060\036\071\050\072\052\073\053" +
    "\070\054\077\055\074\065\065\001\002\000\046\012\ufffc" +
    "\014\ufffc\017\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044" +
    "\ufffc\045\ufffc\046\ufffc\047\ufffc\056\ufffc\057\ufffc\060\ufffc" +
    "\061\ufffc\062\ufffc\063\ufffc\066\ufffc\001\002\000\046\012" +
    "\uffc2\014\uffc2\017\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2" +
    "\044\uffc2\045\uffc2\046\uffc2\047\uffc2\056\uffc2\057\uffc2\060" +
    "\uffc2\061\uffc2\062\uffc2\063\uffc2\066\uffc2\001\002\000\046" +
    "\012\ufffa\014\ufffa\017\ufffa\040\ufffa\041\ufffa\042\ufffa\043" +
    "\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\056\ufffa\057\ufffa" +
    "\060\ufffa\061\ufffa\062\ufffa\063\ufffa\066\ufffa\001\002\000" +
    "\046\012\uffbf\014\uffbf\017\uffbf\040\uffbf\041\uffbf\042\uffbf" +
    "\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\056\uffbf\057" +
    "\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf\066\uffbf\001\002" +
    "\000\032\011\062\020\063\021\056\022\075\023\060\036" +
    "\071\050\072\052\073\053\070\054\077\055\074\065\065" +
    "\001\002\000\046\012\ufffb\014\ufffb\017\ufffb\040\ufffb\041" +
    "\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb" +
    "\056\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\066" +
    "\ufffb\001\002\000\040\017\164\040\uffbc\041\uffbc\042\uffbc" +
    "\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\056\uffbc\057" +
    "\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\001\002\000\050" +
    "\011\155\012\uffc1\014\uffc1\017\uffc1\040\uffc1\041\uffc1\042" +
    "\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\056\uffc1" +
    "\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\066\uffc1\001" +
    "\002\000\046\012\uffbe\014\uffbe\017\uffbe\040\uffbe\041\uffbe" +
    "\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\056" +
    "\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\066\uffbe" +
    "\001\002\000\036\040\122\041\112\042\127\043\116\044" +
    "\115\045\123\046\114\047\111\056\121\057\126\060\120" +
    "\061\117\062\113\063\125\001\002\000\046\012\ufff7\014" +
    "\ufff7\017\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7" +
    "\045\ufff7\046\ufff7\047\ufff7\056\ufff7\057\ufff7\060\ufff7\061" +
    "\ufff7\062\ufff7\063\ufff7\066\ufff7\001\002\000\046\012\ufff6" +
    "\014\ufff6\017\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044" +
    "\ufff6\045\ufff6\046\ufff6\047\ufff6\056\ufff6\057\ufff6\060\ufff6" +
    "\061\ufff6\062\ufff6\063\ufff6\066\ufff6\001\002\000\032\011" +
    "\062\020\063\021\056\022\075\023\060\036\071\050\072" +
    "\052\073\053\070\054\077\055\074\065\065\001\002\000" +
    "\046\012\ufff8\014\ufff8\017\ufff8\040\ufff8\041\ufff8\042\ufff8" +
    "\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8\056\ufff8\057" +
    "\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\066\ufff8\001\002" +
    "\000\020\004\007\005\010\006\011\007\014\010\004\037" +
    "\012\065\152\001\002\000\046\012\ufff9\014\ufff9\017\ufff9" +
    "\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046" +
    "\ufff9\047\ufff9\056\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9" +
    "\063\ufff9\066\ufff9\001\002\000\046\012\uffb1\014\uffb1\017" +
    "\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1" +
    "\046\uffb1\047\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062" +
    "\uffb1\063\uffb1\066\uffb1\001\002\000\020\004\007\005\010" +
    "\006\011\007\014\010\004\037\012\065\101\001\002\000" +
    "\046\012\uffbd\014\uffbd\017\uffbd\040\uffbd\041\uffbd\042\uffbd" +
    "\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\056\uffbd\057" +
    "\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\066\uffbd\001\002" +
    "\000\046\012\uffb2\014\uffb2\017\uffb2\040\uffb2\041\uffb2\042" +
    "\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\056\uffb2" +
    "\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\066\uffb2\001" +
    "\002\000\006\013\105\065\104\001\002\000\046\012\uffba" +
    "\014\uffba\017\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044" +
    "\uffba\045\uffba\046\uffba\047\uffba\056\uffba\057\uffba\060\uffba" +
    "\061\uffba\062\uffba\063\uffba\066\uffba\001\002\000\004\013" +
    "\146\001\002\000\034\011\062\014\106\020\063\021\056" +
    "\022\075\023\060\036\071\050\072\052\073\053\070\054" +
    "\077\055\074\065\065\001\002\000\050\012\uffcd\014\uffcd" +
    "\017\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045" +
    "\uffcd\046\uffcd\047\uffcd\051\uffcd\056\uffcd\057\uffcd\060\uffcd" +
    "\061\uffcd\062\uffcd\063\uffcd\066\uffcd\001\002\000\046\012" +
    "\uffbc\014\uffbc\017\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc" +
    "\044\uffbc\045\uffbc\046\uffbc\047\uffbc\056\uffbc\057\uffbc\060" +
    "\uffbc\061\uffbc\062\uffbc\063\uffbc\066\uffbc\001\002\000\040" +
    "\014\124\040\122\041\112\042\127\043\116\044\115\045" +
    "\123\046\114\047\111\056\121\057\126\060\120\061\117" +
    "\062\113\063\125\001\002\000\032\011\062\020\063\021" +
    "\056\022\075\023\060\036\071\050\072\052\073\053\070" +
    "\054\077\055\074\065\065\001\002\000\032\011\062\020" +
    "\063\021\056\022\075\023\060\036\071\050\072\052\073" +
    "\053\070\054\077\055\074\065\065\001\002\000\032\011" +
    "\062\020\063\021\056\022\075\023\060\036\071\050\072" +
    "\052\073\053\070\054\077\055\074\065\065\001\002\000" +
    "\032\011\062\020\063\021\056\022\075\023\060\036\071" +
    "\050\072\052\073\053\070\054\077\055\074\065\065\001" +
    "\002\000\032\011\062\020\063\021\056\022\075\023\060" +
    "\036\071\050\072\052\073\053\070\054\077\055\074\065" +
    "\065\001\002\000\032\011\062\020\063\021\056\022\075" +
    "\023\060\036\071\050\072\052\073\053\070\054\077\055" +
    "\074\065\065\001\002\000\032\011\062\020\063\021\056" +
    "\022\075\023\060\036\071\050\072\052\073\053\070\054" +
    "\077\055\074\065\065\001\002\000\032\011\062\020\063" +
    "\021\056\022\075\023\060\036\071\050\072\052\073\053" +
    "\070\054\077\055\074\065\065\001\002\000\032\011\062" +
    "\020\063\021\056\022\075\023\060\036\071\050\072\052" +
    "\073\053\070\054\077\055\074\065\065\001\002\000\032" +
    "\011\062\020\063\021\056\022\075\023\060\036\071\050" +
    "\072\052\073\053\070\054\077\055\074\065\065\001\002" +
    "\000\032\011\062\020\063\021\056\022\075\023\060\036" +
    "\071\050\072\052\073\053\070\054\077\055\074\065\065" +
    "\001\002\000\050\012\uffcb\014\uffcb\017\uffcb\040\uffcb\041" +
    "\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb" +
    "\051\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063" +
    "\uffcb\066\uffcb\001\002\000\032\011\062\020\063\021\056" +
    "\022\075\023\060\036\071\050\072\052\073\053\070\054" +
    "\077\055\074\065\065\001\002\000\032\011\062\020\063" +
    "\021\056\022\075\023\060\036\071\050\072\052\073\053" +
    "\070\054\077\055\074\065\065\001\002\000\032\011\062" +
    "\020\063\021\056\022\075\023\060\036\071\050\072\052" +
    "\073\053\070\054\077\055\074\065\065\001\002\000\046" +
    "\012\uffaa\014\uffaa\017\uffaa\040\uffaa\041\uffaa\042\uffaa\043" +
    "\uffaa\044\uffaa\045\uffaa\046\114\047\111\056\uffaa\057\uffaa" +
    "\060\uffaa\061\uffaa\062\uffaa\063\uffaa\066\uffaa\001\002\000" +
    "\046\012\uffb9\014\uffb9\017\uffb9\040\122\041\112\042\127" +
    "\043\116\044\115\045\123\046\114\047\111\056\uffb9\057" +
    "\uffb9\060\120\061\117\062\113\063\125\066\uffb9\001\002" +
    "\000\046\012\uffb5\014\uffb5\017\uffb5\040\122\041\112\042" +
    "\127\043\116\044\115\045\123\046\114\047\111\056\uffb5" +
    "\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5\066\uffb5\001" +
    "\002\000\046\012\uffa9\014\uffa9\017\uffa9\040\uffa9\041\uffa9" +
    "\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046\114\047\111\056" +
    "\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9\066\uffa9" +
    "\001\002\000\046\012\uffad\014\uffad\017\uffad\040\uffad\041" +
    "\uffad\042\127\043\116\044\115\045\123\046\114\047\111" +
    "\056\uffad\057\uffad\060\uffad\061\uffad\062\uffad\063\uffad\066" +
    "\uffad\001\002\000\046\012\uffb8\014\uffb8\017\uffb8\040\122" +
    "\041\112\042\127\043\116\044\115\045\123\046\114\047" +
    "\111\056\uffb8\057\uffb8\060\120\061\117\062\113\063\125" +
    "\066\uffb8\001\002\000\046\012\uffb6\014\uffb6\017\uffb6\040" +
    "\122\041\112\042\127\043\116\044\115\045\123\046\114" +
    "\047\111\056\uffb6\057\uffb6\060\uffb6\061\uffb6\062\113\063" +
    "\125\066\uffb6\001\002\000\046\012\uffb7\014\uffb7\017\uffb7" +
    "\040\122\041\112\042\127\043\116\044\115\045\123\046" +
    "\114\047\111\056\uffb7\057\uffb7\060\uffb7\061\uffb7\062\113" +
    "\063\125\066\uffb7\001\002\000\046\012\uffab\014\uffab\017" +
    "\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab" +
    "\046\114\047\111\056\uffab\057\uffab\060\uffab\061\uffab\062" +
    "\uffab\063\uffab\066\uffab\001\002\000\046\012\uffa8\014\uffa8" +
    "\017\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045" +
    "\uffa8\046\114\047\111\056\uffa8\057\uffa8\060\uffa8\061\uffa8" +
    "\062\uffa8\063\uffa8\066\uffa8\001\002\000\046\012\uffb0\014" +
    "\uffb0\017\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0" +
    "\045\uffb0\046\uffb0\047\111\056\uffb0\057\uffb0\060\uffb0\061" +
    "\uffb0\062\uffb0\063\uffb0\066\uffb0\001\002\000\046\012\uffb4" +
    "\014\uffb4\017\uffb4\040\122\041\112\042\127\043\116\044" +
    "\115\045\123\046\114\047\111\056\uffb4\057\uffb4\060\uffb4" +
    "\061\uffb4\062\uffb4\063\uffb4\066\uffb4\001\002\000\046\012" +
    "\uffac\014\uffac\017\uffac\040\uffac\041\uffac\042\127\043\116" +
    "\044\115\045\123\046\114\047\111\056\uffac\057\uffac\060" +
    "\uffac\061\uffac\062\uffac\063\uffac\066\uffac\001\002\000\046" +
    "\012\uffaf\014\uffaf\017\uffaf\040\uffaf\041\uffaf\042\uffaf\043" +
    "\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\056\uffaf\057\uffaf" +
    "\060\uffaf\061\uffaf\062\uffaf\063\uffaf\066\uffaf\001\002\000" +
    "\034\011\062\014\147\020\063\021\056\022\075\023\060" +
    "\036\071\050\072\052\073\053\070\054\077\055\074\065" +
    "\065\001\002\000\050\012\uffce\014\uffce\017\uffce\040\uffce" +
    "\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047" +
    "\uffce\051\uffce\056\uffce\057\uffce\060\uffce\061\uffce\062\uffce" +
    "\063\uffce\066\uffce\001\002\000\040\014\151\040\122\041" +
    "\112\042\127\043\116\044\115\045\123\046\114\047\111" +
    "\056\121\057\126\060\120\061\117\062\113\063\125\001" +
    "\002\000\050\012\uffcc\014\uffcc\017\uffcc\040\uffcc\041\uffcc" +
    "\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\051" +
    "\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc" +
    "\066\uffcc\001\002\000\046\012\uffb3\014\uffb3\017\uffb3\040" +
    "\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3" +
    "\047\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063" +
    "\uffb3\066\uffb3\001\002\000\046\012\uffbb\014\uffbb\017\uffbb" +
    "\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046" +
    "\uffbb\047\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb" +
    "\063\uffbb\066\uffbb\001\002\000\046\012\uffae\014\uffae\017" +
    "\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae" +
    "\046\uffae\047\uffae\056\uffae\057\uffae\060\uffae\061\uffae\062" +
    "\uffae\063\uffae\066\uffae\001\002\000\004\065\156\001\002" +
    "\000\006\012\uffc4\017\uffc4\001\002\000\006\012\161\017" +
    "\160\001\002\000\004\065\163\001\002\000\004\066\162" +
    "\001\002\000\110\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010" +
    "\uffe6\012\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\024\uffe6" +
    "\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035" +
    "\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6" +
    "\045\uffe6\046\uffe6\047\uffe6\056\uffe6\057\uffe6\060\uffe6\061" +
    "\uffe6\062\uffe6\063\uffe6\065\uffe6\066\uffe6\001\002\000\006" +
    "\012\uffc3\017\uffc3\001\002\000\032\011\062\020\063\021" +
    "\056\022\075\023\060\036\071\050\072\052\073\053\070" +
    "\054\077\055\074\065\065\001\002\000\040\012\166\040" +
    "\122\041\112\042\127\043\116\044\115\045\123\046\114" +
    "\047\111\056\121\057\126\060\120\061\117\062\113\063" +
    "\125\001\002\000\040\004\007\005\010\006\011\007\014" +
    "\010\004\015\023\024\040\027\052\030\026\032\032\033" +
    "\043\034\045\035\050\037\012\065\035\001\002\000\004" +
    "\066\170\001\002\000\046\004\uffda\005\uffda\006\uffda\007" +
    "\uffda\010\uffda\015\uffda\016\uffda\024\uffda\027\uffda\030\uffda" +
    "\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\037\uffda\065" +
    "\uffda\066\uffda\001\002\000\040\012\172\040\122\041\112" +
    "\042\127\043\116\044\115\045\123\046\114\047\111\056" +
    "\121\057\126\060\120\061\117\062\113\063\125\001\002" +
    "\000\046\012\uffc0\014\uffc0\017\uffc0\040\uffc0\041\uffc0\042" +
    "\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\056\uffc0" +
    "\057\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0\066\uffc0\001" +
    "\002\000\032\011\062\020\063\021\056\022\075\023\060" +
    "\036\071\050\072\052\073\053\070\054\077\055\074\065" +
    "\065\001\002\000\040\012\175\040\122\041\112\042\127" +
    "\043\116\044\115\045\123\046\114\047\111\056\121\057" +
    "\126\060\120\061\117\062\113\063\125\001\002\000\004" +
    "\066\176\001\002\000\046\004\uffe7\005\uffe7\006\uffe7\007" +
    "\uffe7\010\uffe7\015\uffe7\016\uffe7\024\uffe7\027\uffe7\030\uffe7" +
    "\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\037\uffe7\065" +
    "\uffe7\066\uffe7\001\002\000\032\011\062\020\063\021\056" +
    "\022\075\023\060\036\071\050\072\052\073\053\070\054" +
    "\077\055\074\065\065\001\002\000\040\012\201\040\122" +
    "\041\112\042\127\043\116\044\115\045\123\046\114\047" +
    "\111\056\121\057\126\060\120\061\117\062\113\063\125" +
    "\001\002\000\004\066\202\001\002\000\046\004\uffe8\005" +
    "\uffe8\006\uffe8\007\uffe8\010\uffe8\015\uffe8\016\uffe8\024\uffe8" +
    "\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035" +
    "\uffe8\037\uffe8\065\uffe8\066\uffe8\001\002\000\046\004\uffd9" +
    "\005\uffd9\006\uffd9\007\uffd9\010\uffd9\015\uffd9\016\uffd9\024" +
    "\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9" +
    "\035\uffd9\037\uffd9\065\uffd9\066\uffd9\001\002\000\052\004" +
    "\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\015\uffe4\016\uffe4" +
    "\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032" +
    "\uffe4\033\uffe4\034\uffe4\035\uffe4\037\uffe4\065\uffe4\066\uffe4" +
    "\001\002\000\042\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010" +
    "\uffe2\015\uffe2\016\uffe2\024\uffe2\027\uffe2\030\uffe2\032\uffe2" +
    "\033\uffe2\034\uffe2\035\uffe2\037\uffe2\065\uffe2\001\002\000" +
    "\032\011\062\020\063\021\056\022\075\023\060\036\071" +
    "\050\072\052\073\053\070\054\077\055\074\065\065\001" +
    "\002\000\040\012\210\040\122\041\112\042\127\043\116" +
    "\044\115\045\123\046\114\047\111\056\121\057\126\060" +
    "\120\061\117\062\113\063\125\001\002\000\004\015\023" +
    "\001\002\000\010\025\215\026\214\066\212\001\002\000" +
    "\046\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\015\uffe0" +
    "\016\uffe0\024\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033" +
    "\uffe0\034\uffe0\035\uffe0\037\uffe0\065\uffe0\066\uffe0\001\002" +
    "\000\006\025\225\026\224\001\002\000\004\015\023\001" +
    "\002\000\004\011\216\001\002\000\032\011\062\020\063" +
    "\021\056\022\075\023\060\036\071\050\072\052\073\053" +
    "\070\054\077\055\074\065\065\001\002\000\040\012\220" +
    "\040\122\041\112\042\127\043\116\044\115\045\123\046" +
    "\114\047\111\056\121\057\126\060\120\061\117\062\113" +
    "\063\125\001\002\000\004\015\023\001\002\000\006\025" +
    "\uffdd\026\uffdd\001\002\000\004\066\223\001\002\000\046" +
    "\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\015\uffdf\016" +
    "\uffdf\024\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf" +
    "\034\uffdf\035\uffdf\037\uffdf\065\uffdf\066\uffdf\001\002\000" +
    "\004\015\023\001\002\000\004\011\226\001\002\000\032" +
    "\011\062\020\063\021\056\022\075\023\060\036\071\050" +
    "\072\052\073\053\070\054\077\055\074\065\065\001\002" +
    "\000\040\012\230\040\122\041\112\042\127\043\116\044" +
    "\115\045\123\046\114\047\111\056\121\057\126\060\120" +
    "\061\117\062\113\063\125\001\002\000\004\015\023\001" +
    "\002\000\006\025\uffdc\026\uffdc\001\002\000\004\066\233" +
    "\001\002\000\046\004\uffde\005\uffde\006\uffde\007\uffde\010" +
    "\uffde\015\uffde\016\uffde\024\uffde\027\uffde\030\uffde\031\uffde" +
    "\032\uffde\033\uffde\034\uffde\035\uffde\037\uffde\065\uffde\066" +
    "\uffde\001\002\000\050\004\uffc9\005\uffc9\006\uffc9\007\uffc9" +
    "\010\uffc9\015\uffc9\016\uffc9\017\uffc9\024\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\037\uffc9" +
    "\065\uffc9\066\uffc9\001\002\000\034\011\062\015\237\020" +
    "\063\021\056\022\075\023\060\036\071\050\072\052\073" +
    "\053\070\054\077\055\074\065\065\001\002\000\004\066" +
    "\255\001\002\000\010\016\242\021\245\023\243\001\002" +
    "\000\040\040\122\041\112\042\127\043\116\044\115\045" +
    "\123\046\114\047\111\056\121\057\126\060\120\061\117" +
    "\062\113\063\125\066\241\001\002\000\050\004\uffc7\005" +
    "\uffc7\006\uffc7\007\uffc7\010\uffc7\015\uffc7\016\uffc7\017\uffc7" +
    "\024\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034" +
    "\uffc7\035\uffc7\037\uffc7\065\uffc7\066\uffc7\001\002\000\004" +
    "\066\uffd5\001\002\000\006\016\uffd0\017\uffd0\001\002\000" +
    "\006\016\uffd3\017\253\001\002\000\006\016\uffd2\017\uffd2" +
    "\001\002\000\006\016\uffd4\017\251\001\002\000\004\016" +
    "\250\001\002\000\004\066\uffd6\001\002\000\004\021\252" +
    "\001\002\000\006\016\uffd1\017\uffd1\001\002\000\004\023" +
    "\254\001\002\000\006\016\uffcf\017\uffcf\001\002\000\050" +
    "\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\015\uffc8\016" +
    "\uffc8\017\uffc8\024\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8" +
    "\033\uffc8\034\uffc8\035\uffc8\037\uffc8\065\uffc8\066\uffc8\001" +
    "\002\000\040\040\122\041\112\042\127\043\116\044\115" +
    "\045\123\046\114\047\111\056\121\057\126\060\120\061" +
    "\117\062\113\063\125\066\260\001\002\000\046\004\uffd8" +
    "\005\uffd8\006\uffd8\007\uffd8\010\uffd8\015\uffd8\016\uffd8\024" +
    "\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8" +
    "\035\uffd8\037\uffd8\065\uffd8\066\uffd8\001\002\000\046\004" +
    "\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\015\uffd7\016\uffd7" +
    "\024\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034" +
    "\uffd7\035\uffd7\037\uffd7\065\uffd7\066\uffd7\001\002\000\006" +
    "\013\146\051\262\001\002\000\032\011\062\020\063\021" +
    "\056\022\075\023\060\036\071\050\072\052\073\053\070" +
    "\054\077\055\074\065\065\001\002\000\040\040\122\041" +
    "\112\042\127\043\116\044\115\045\123\046\114\047\111" +
    "\056\121\057\126\060\120\061\117\062\113\063\125\066" +
    "\264\001\002\000\050\004\uffca\005\uffca\006\uffca\007\uffca" +
    "\010\uffca\015\uffca\016\uffca\017\uffca\024\uffca\027\uffca\030" +
    "\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\037\uffca" +
    "\065\uffca\066\uffca\001\002\000\004\031\266\001\002\000" +
    "\004\011\267\001\002\000\032\011\062\020\063\021\056" +
    "\022\075\023\060\036\071\050\072\052\073\053\070\054" +
    "\077\055\074\065\065\001\002\000\040\012\271\040\122" +
    "\041\112\042\127\043\116\044\115\045\123\046\114\047" +
    "\111\056\121\057\126\060\120\061\117\062\113\063\125" +
    "\001\002\000\004\066\272\001\002\000\046\004\uffdb\005" +
    "\uffdb\006\uffdb\007\uffdb\010\uffdb\015\uffdb\016\uffdb\024\uffdb" +
    "\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035" +
    "\uffdb\037\uffdb\065\uffdb\066\uffdb\001\002\000\006\012\uffc6" +
    "\017\uffc6\001\002\000\016\004\007\005\010\006\011\007" +
    "\014\010\004\037\012\001\002\000\004\015\023\001\002" +
    "\000\004\066\277\001\002\000\020\002\ufffe\004\ufffe\005" +
    "\ufffe\006\ufffe\007\ufffe\010\ufffe\037\ufffe\001\002\000\004" +
    "\065\301\001\002\000\006\012\uffc5\017\uffc5\001\002\000" +
    "\004\002\001\001\002\000\020\002\uffff\004\uffff\005\uffff" +
    "\006\uffff\007\uffff\010\uffff\037\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\010\002\004\003\012\005\005\001\001\000" +
    "\002\001\001\000\006\003\302\005\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\020\026" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\023\001\001\000\032\005\030\006\043\007\045\010" +
    "\026\011\041\012\040\013\036\014\033\016\035\017\046" +
    "\024\032\025\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\005\030\006\264\007\045\010\026\011\041" +
    "\014\033\016\035\017\046\024\032\025\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\056\010\060\030\255\031\075\032\065\033\077\034" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\030\006\043\007\045\010\026\011\041" +
    "\013\204\014\033\016\035\017\046\024\032\025\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\030\024\032\025\053\001\001\000\002\001\001\000" +
    "\020\004\056\010\060\030\066\031\075\032\065\033\077" +
    "\034\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\004\056\010\060" +
    "\030\170\031\075\032\065\033\077\034\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\004\056\010\060\030\153\031\075\032\065" +
    "\033\077\034\106\001\001\000\002\001\001\000\006\005" +
    "\101\024\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\101\024\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\004\056\010\060\030\107\031\075\032" +
    "\065\033\077\034\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\004\056\010\060\030" +
    "\144\031\075\032\065\033\077\034\106\001\001\000\020" +
    "\004\056\010\060\030\143\031\075\032\065\033\077\034" +
    "\106\001\001\000\020\004\056\010\060\030\142\031\075" +
    "\032\065\033\077\034\106\001\001\000\020\004\056\010" +
    "\060\030\141\031\075\032\065\033\077\034\106\001\001" +
    "\000\020\004\056\010\060\030\140\031\075\032\065\033" +
    "\077\034\106\001\001\000\020\004\056\010\060\030\137" +
    "\031\075\032\065\033\077\034\106\001\001\000\020\004" +
    "\056\010\060\030\136\031\075\032\065\033\077\034\106" +
    "\001\001\000\020\004\056\010\060\030\135\031\075\032" +
    "\065\033\077\034\106\001\001\000\020\004\056\010\060" +
    "\030\134\031\075\032\065\033\077\034\106\001\001\000" +
    "\020\004\056\010\060\030\133\031\075\032\065\033\077" +
    "\034\106\001\001\000\020\004\056\010\060\030\132\031" +
    "\075\032\065\033\077\034\106\001\001\000\002\001\001" +
    "\000\020\004\056\010\060\030\131\031\075\032\065\033" +
    "\077\034\106\001\001\000\020\004\056\010\060\030\130" +
    "\031\075\032\065\033\077\034\106\001\001\000\020\004" +
    "\056\010\060\030\127\031\075\032\065\033\077\034\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\004\056\010\060\030" +
    "\147\031\075\032\065\033\077\034\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\056\010\060\030\164\031\075\032\065\033" +
    "\077\034\106\001\001\000\002\001\001\000\026\005\030" +
    "\006\166\007\045\010\026\011\041\014\033\016\035\017" +
    "\046\024\032\025\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\004" +
    "\056\010\060\030\173\031\075\032\065\033\077\034\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\004\056\010\060\030\177\031\075\032\065" +
    "\033\077\034\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\004\056\010\060\030\206\031" +
    "\075\032\065\033\077\034\106\001\001\000\002\001\001" +
    "\000\004\011\210\001\001\000\004\015\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\221\001\001" +
    "\000\002\001\001\000\020\004\056\010\060\030\216\031" +
    "\075\032\065\033\077\034\106\001\001\000\002\001\001" +
    "\000\004\011\220\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\231\001\001\000\002" +
    "\001\001\000\020\004\056\010\060\030\226\031\075\032" +
    "\065\033\077\034\106\001\001\000\002\001\001\000\004" +
    "\011\230\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\004\056\010\060" +
    "\020\235\030\237\031\075\032\065\033\077\034\106\001" +
    "\001\000\002\001\001\000\010\021\246\022\245\023\243" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\004\056" +
    "\010\060\030\262\031\075\032\065\033\077\034\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\004\056\010\060\030\267\031" +
    "\075\032\065\033\077\034\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\277\001\001\000\004\011\275\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


  LexerCup lex;
  @SuppressWarnings("deprecation")
  public Sintax(LexerCup lex){
    this.lex=lex;
    this.symbolFactory= new DefaultSymbolFactory();
  };

public void report_error(String message, Object info) {
        if (info instanceof Symbol) {
            Symbol symbol = (Symbol) info;
            System.err.println("Error en línea " + symbol.left + ", columna " + symbol.right + ": " + message);
        } else {
            System.err.println("Error: " + message);
        }
    };





/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {


    public void uno(){
        System.out.println("123");
    }
    public void dos(){
        System.out.println("456");
    }

  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= navidad EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // navidad ::= saco_function_definition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("navidad",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // navidad ::= navidad saco_function_definition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("navidad",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // saco_function_definition ::= gorro_navidad_type_specifier RECORRIDO PERSONA ABRECUENTO pesebre_args CIERRACUENTO calcetin_compound_statement FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("saco_function_definition",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // saco_function_definition ::= gorro_navidad_type_specifier RECORRIDO PERSONA ABRECUENTO CIERRACUENTO calcetin_compound_statement FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("saco_function_definition",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // arbol_constant ::= l_NOEL 
            {
              Object RESULT =null;
		int l_intleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int l_intright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l_int = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = l_int;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // arbol_constant ::= l_NICOLAS 
            {
              Object RESULT =null;
		int l_floleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int l_floright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l_flo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = l_flo;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // arbol_constant ::= l_COLACHO 
            {
              Object RESULT =null;
		int l_chleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int l_chright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l_ch = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = l_ch;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // arbol_constant ::= l_SANTA 
            {
              Object RESULT =null;
		int l_stleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int l_stright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l_st = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = l_st;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // arbol_constant ::= l_t_CLAUS 
            {
              Object RESULT =null;
		int l_tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int l_tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l_t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = l_t;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // arbol_constant ::= l_f_CLAUS 
            {
              Object RESULT =null;
		int l_fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int l_fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l_f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = l_f;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // arbol_constant ::= NARIZROJA 
            {
              Object RESULT =null;
		int nilleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nilright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object nil = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = nil;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // gorro_navidad_type_specifier ::= SINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("gorro_navidad_type_specifier",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // gorro_navidad_type_specifier ::= COLACHO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("gorro_navidad_type_specifier",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // gorro_navidad_type_specifier ::= SANTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("gorro_navidad_type_specifier",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // gorro_navidad_type_specifier ::= NOEL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("gorro_navidad_type_specifier",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // gorro_navidad_type_specifier ::= NICOLAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("gorro_navidad_type_specifier",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // gorro_navidad_type_specifier ::= CLAUS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("gorro_navidad_type_specifier",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement_risa_santa ::= calcetin_compound_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_risa_santa",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement_risa_santa ::= candelabro_assignment_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_risa_santa",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement_risa_santa ::= deseos_selection_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_risa_santa",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement_risa_santa ::= caramelo_iteration_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_risa_santa",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement_risa_santa ::= calcetin_jump_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_risa_santa",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement_risa_santa ::= lazo_io_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_risa_santa",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement_risa_santa ::= belen_function_call_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_risa_santa",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // lazo_io_statement ::= NARRA ABRECUENTO incienzo_expression CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lazo_io_statement",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lazo_io_statement ::= ESCUCHA ABRECUENTO incienzo_expression CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lazo_io_statement",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // belen_function_call_statement ::= PERSONA ABRECUENTO reyes_magicos_list_expr CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("belen_function_call_statement",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // calcetin_compound_statement ::= ABREREGALO CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("calcetin_compound_statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // calcetin_compound_statement ::= ABREREGALO empaque_block_item_list CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("calcetin_compound_statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // empaque_block_item_list ::= carta_block_item 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("empaque_block_item_list",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // empaque_block_item_list ::= empaque_block_item_list carta_block_item 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("empaque_block_item_list",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // carta_block_item ::= statement_risa_santa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("carta_block_item",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // deseos_selection_statement ::= ELFO ABRECUENTO incienzo_expression CIERRACUENTO calcetin_compound_statement FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("deseos_selection_statement",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // deseos_selection_statement ::= ELFO ABRECUENTO incienzo_expression CIERRACUENTO calcetin_compound_statement DUENDE calcetin_compound_statement FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("deseos_selection_statement",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // deseos_selection_statement ::= ELFO ABRECUENTO incienzo_expression CIERRACUENTO calcetin_compound_statement tradicion_elif_statement DUENDE calcetin_compound_statement FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("deseos_selection_statement",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tradicion_elif_statement ::= HADA ABRECUENTO incienzo_expression CIERRACUENTO calcetin_compound_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tradicion_elif_statement",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tradicion_elif_statement ::= tradicion_elif_statement HADA ABRECUENTO incienzo_expression CIERRACUENTO calcetin_compound_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tradicion_elif_statement",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // caramelo_iteration_statement ::= HACE statement_risa_santa REVISA ABRECUENTO incienzo_expression CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("caramelo_iteration_statement",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // caramelo_iteration_statement ::= ENVUELVE ABRECUENTO candelabro_assignment_expression CHIMENEA leche_relational_expr CHIMENEA incienzo_expression CIERRACUENTO statement_risa_santa FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("caramelo_iteration_statement",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // calcetin_jump_statement ::= CORTA FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("calcetin_jump_statement",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // calcetin_jump_statement ::= ENVIA FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("calcetin_jump_statement",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // calcetin_jump_statement ::= ENVIA incienzo_expression FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("calcetin_jump_statement",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // nochebuena_initializer ::= ABREREGALO pino_initializer_list CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("nochebuena_initializer",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // nochebuena_initializer ::= ABREREGALO CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("nochebuena_initializer",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // pino_initializer_list ::= campanas_initializer_list_integer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pino_initializer_list",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // pino_initializer_list ::= guirnaldas_initializer_list_char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pino_initializer_list",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // campanas_initializer_list_integer ::= l_NOEL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("campanas_initializer_list_integer",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // campanas_initializer_list_integer ::= campanas_initializer_list_integer CHIMENEA l_NOEL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("campanas_initializer_list_integer",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // guirnaldas_initializer_list_char ::= l_COLACHO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("guirnaldas_initializer_list_char",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // guirnaldas_initializer_list_char ::= guirnaldas_initializer_list_char CHIMENEA l_COLACHO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("guirnaldas_initializer_list_char",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // estrella_assign_array ::= gorro_navidad_type_specifier PERSONA ABREEMPAQUE CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estrella_assign_array",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // estrella_assign_array ::= gorro_navidad_type_specifier ABREEMPAQUE CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estrella_assign_array",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // estrella_assign_array ::= gorro_navidad_type_specifier PERSONA ABREEMPAQUE incienzo_expression CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estrella_assign_array",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // estrella_assign_array ::= gorro_navidad_type_specifier ABREEMPAQUE incienzo_expression CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estrella_assign_array",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // candelabro_assignment_expression ::= gorro_navidad_type_specifier PERSONA ENTREGA incienzo_expression FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("candelabro_assignment_expression",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // candelabro_assignment_expression ::= estrella_assign_array FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("candelabro_assignment_expression",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // candelabro_assignment_expression ::= estrella_assign_array ENTREGA nochebuena_initializer FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("candelabro_assignment_expression",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // candelabro_assignment_expression ::= estrella_assign_array ENTREGA incienzo_expression FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("candelabro_assignment_expression",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // pesebre_args ::= gorro_navidad_type_specifier PERSONA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pesebre_args",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // pesebre_args ::= pesebre_args CHIMENEA gorro_navidad_type_specifier PERSONA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pesebre_args",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // reyes_magicos_list_expr ::= PERSONA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reyes_magicos_list_expr",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // reyes_magicos_list_expr ::= reyes_magicos_list_expr CHIMENEA PERSONA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reyes_magicos_list_expr",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // incienzo_expression ::= arbol_constant 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // incienzo_expression ::= PERSONA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // incienzo_expression ::= ABRECUENTO incienzo_expression CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // incienzo_expression ::= belen_function_call_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // incienzo_expression ::= bastoncillo_arithmetic_expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // incienzo_expression ::= galleta_logic_expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // incienzo_expression ::= leche_relational_expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // diciembre_operation_array ::= QUIEN estrella_assign_array 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("diciembre_operation_array",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // diciembre_operation_array ::= GRINCH estrella_assign_array 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("diciembre_operation_array",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // bastoncillo_arithmetic_expr ::= incienzo_expression TRUENO incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // bastoncillo_arithmetic_expr ::= incienzo_expression RODOLFO incienzo_expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // bastoncillo_arithmetic_expr ::= incienzo_expression JUGUETON incienzo_expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // bastoncillo_arithmetic_expr ::= incienzo_expression RELAMPAGO incienzo_expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // bastoncillo_arithmetic_expr ::= incienzo_expression CUPIDO incienzo_expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // bastoncillo_arithmetic_expr ::= incienzo_expression COMETA incienzo_expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // bastoncillo_arithmetic_expr ::= QUIEN PERSONA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // bastoncillo_arithmetic_expr ::= GRINCH PERSONA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // bastoncillo_arithmetic_expr ::= diciembre_operation_array 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // galleta_logic_expr ::= incienzo_expression GASPAR incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("galleta_logic_expr",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // galleta_logic_expr ::= incienzo_expression MELCHOR incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("galleta_logic_expr",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // galleta_logic_expr ::= BALTASAR incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("galleta_logic_expr",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // leche_relational_expr ::= incienzo_expression ALABASTRO incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("leche_relational_expr",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // leche_relational_expr ::= incienzo_expression EVERGEEN incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("leche_relational_expr",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // leche_relational_expr ::= incienzo_expression MINSTIX incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("leche_relational_expr",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // leche_relational_expr ::= incienzo_expression UPATREE incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("leche_relational_expr",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // leche_relational_expr ::= incienzo_expression OPENSLAE incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("leche_relational_expr",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // leche_relational_expr ::= incienzo_expression MARY incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("leche_relational_expr",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
