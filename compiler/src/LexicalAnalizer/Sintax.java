
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package LexicalAnalizer;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\003\003\000\002\003\003\000\002\004\011" +
    "\000\002\004\010\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\007\007\000\002\007\007\000" +
    "\002\010\007\000\002\011\004\000\002\011\005\000\002" +
    "\012\003\000\002\012\004\000\002\013\003\000\002\014" +
    "\003\000\002\014\004\000\002\015\010\000\002\015\012" +
    "\000\002\015\013\000\002\016\007\000\002\016\010\000" +
    "\002\017\011\000\002\017\010\000\002\020\004\000\002" +
    "\020\004\000\002\020\004\000\002\021\005\000\002\021" +
    "\004\000\002\022\003\000\002\022\003\000\002\023\003" +
    "\000\002\023\005\000\002\024\003\000\002\024\005\000" +
    "\002\025\006\000\002\025\005\000\002\025\007\000\002" +
    "\025\006\000\002\026\007\000\002\026\006\000\002\026" +
    "\004\000\002\026\006\000\002\027\004\000\002\027\006" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\004" +
    "\000\002\031\004\000\002\031\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\004\000\002\032\003\000\002" +
    "\032\003\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\040\004\015\005\021\006\020\007\016\010" +
    "\034\015\031\020\026\023\037\024\004\026\017\027\032" +
    "\034\033\035\035\043\007\071\025\001\002\000\040\004" +
    "\015\005\021\006\020\007\016\010\034\015\031\020\026" +
    "\023\037\024\004\026\017\027\032\034\033\035\035\043" +
    "\007\071\025\001\002\000\042\002\ufffe\004\ufffe\005\ufffe" +
    "\006\ufffe\007\ufffe\010\ufffe\015\ufffe\020\ufffe\023\ufffe\024" +
    "\ufffe\026\ufffe\027\ufffe\034\ufffe\035\ufffe\043\ufffe\071\ufffe" +
    "\001\002\000\046\002\uffee\004\uffee\005\uffee\006\uffee\007" +
    "\uffee\010\uffee\015\uffee\016\uffee\020\uffee\023\uffee\024\uffee" +
    "\025\uffee\026\uffee\027\uffee\034\uffee\035\uffee\043\uffee\071" +
    "\uffee\001\002\000\010\013\ufffa\070\ufffa\071\ufffa\001\002" +
    "\000\046\002\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010" +
    "\ufff1\015\ufff1\016\ufff1\020\ufff1\023\ufff1\024\ufff1\025\ufff1" +
    "\026\ufff1\027\ufff1\034\ufff1\035\ufff1\043\ufff1\071\ufff1\001" +
    "\002\000\010\013\066\070\245\071\065\001\002\000\042" +
    "\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\015" +
    "\ufffd\020\ufffd\023\ufffd\024\ufffd\026\ufffd\027\ufffd\034\ufffd" +
    "\035\ufffd\043\ufffd\071\ufffd\001\002\000\046\002\ufff0\004" +
    "\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\015\ufff0\016\ufff0" +
    "\020\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\034" +
    "\ufff0\035\ufff0\043\ufff0\071\ufff0\001\002\000\046\002\ufff3" +
    "\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\015\ufff3\016" +
    "\ufff3\020\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3" +
    "\034\ufff3\035\ufff3\043\ufff3\071\ufff3\001\002\000\010\013" +
    "\ufff7\070\ufff7\071\ufff7\001\002\000\010\013\ufff9\070\ufff9" +
    "\071\ufff9\001\002\000\030\011\051\030\043\031\047\042" +
    "\053\054\045\056\041\057\052\060\057\061\044\071\042" +
    "\072\243\001\002\000\010\013\ufff8\070\ufff8\071\ufff8\001" +
    "\002\000\010\013\ufff6\070\ufff6\071\ufff6\001\002\000\042" +
    "\002\242\004\015\005\021\006\020\007\016\010\034\015" +
    "\031\020\026\023\037\024\004\026\017\027\032\034\033" +
    "\035\035\043\007\071\025\001\002\000\046\002\uffef\004" +
    "\uffef\005\uffef\006\uffef\007\uffef\010\uffef\015\uffef\016\uffef" +
    "\020\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\034" +
    "\uffef\035\uffef\043\uffef\071\uffef\001\002\000\046\002\ufff4" +
    "\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\015\ufff4\016" +
    "\ufff4\020\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4" +
    "\034\ufff4\035\ufff4\043\ufff4\071\ufff4\001\002\000\004\011" +
    "\230\001\002\000\004\011\202\001\002\000\006\055\160" +
    "\072\161\001\002\000\042\002\000\004\000\005\000\006" +
    "\000\007\000\010\000\015\000\020\000\023\000\024\000" +
    "\026\000\027\000\034\000\035\000\043\000\071\000\001" +
    "\002\000\042\004\015\005\021\006\020\007\016\010\034" +
    "\015\031\016\153\020\026\023\037\024\004\026\017\027" +
    "\032\034\033\035\035\043\007\071\025\001\002\000\004" +
    "\072\151\001\002\000\004\011\145\001\002\000\010\013" +
    "\ufff5\070\ufff5\071\ufff5\001\002\000\004\011\141\001\002" +
    "\000\046\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\015\ufff2\016\ufff2\020\ufff2\023\ufff2\024\ufff2\025\ufff2" +
    "\026\ufff2\027\ufff2\034\ufff2\035\ufff2\043\ufff2\071\ufff2\001" +
    "\002\000\004\011\040\001\002\000\030\011\051\030\043" +
    "\031\047\042\053\054\045\056\041\057\052\060\057\061" +
    "\044\071\042\072\046\001\002\000\104\002\uffb5\004\uffb5" +
    "\005\uffb5\006\uffb5\007\uffb5\010\uffb5\012\uffb5\015\uffb5\016" +
    "\uffb5\020\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5" +
    "\034\uffb5\035\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047" +
    "\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\062\uffb5\063\uffb5" +
    "\064\uffb5\065\uffb5\067\uffb5\071\uffb5\072\uffb5\001\002\000" +
    "\104\002\uffc1\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1" +
    "\012\uffc1\015\uffc1\016\uffc1\020\uffc1\023\uffc1\024\uffc1\025" +
    "\uffc1\026\uffc1\027\uffc1\034\uffc1\035\uffc1\043\uffc1\044\uffc1" +
    "\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053" +
    "\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\067\uffc1\071\uffc1" +
    "\072\uffc1\001\002\000\104\002\uffc3\004\uffc3\005\uffc3\006" +
    "\uffc3\007\uffc3\010\uffc3\012\uffc3\015\uffc3\016\uffc3\020\uffc3" +
    "\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\034\uffc3\035" +
    "\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3" +
    "\051\uffc3\052\uffc3\053\uffc3\062\uffc3\063\uffc3\064\uffc3\065" +
    "\uffc3\067\uffc3\071\uffc3\072\uffc3\001\002\000\004\071\140" +
    "\001\002\000\026\011\051\030\043\031\047\042\053\054" +
    "\045\056\041\057\052\060\057\061\044\071\042\001\002" +
    "\000\032\011\uffe5\012\uffe5\030\uffe5\031\uffe5\042\uffe5\054" +
    "\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5\071\uffe5\072\uffe5" +
    "\001\002\000\104\002\uffc4\004\uffc4\005\uffc4\006\uffc4\007" +
    "\uffc4\010\uffc4\012\uffc4\015\uffc4\016\uffc4\020\uffc4\023\uffc4" +
    "\024\uffc4\025\uffc4\026\uffc4\027\uffc4\034\uffc4\035\uffc4\043" +
    "\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4" +
    "\052\uffc4\053\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\067" +
    "\uffc4\071\uffc4\072\uffc4\001\002\000\104\002\uffc7\004\uffc7" +
    "\005\uffc7\006\uffc7\007\uffc7\010\uffc7\012\uffc7\015\uffc7\016" +
    "\uffc7\020\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7" +
    "\034\uffc7\035\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047" +
    "\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\062\uffc7\063\uffc7" +
    "\064\uffc7\065\uffc7\067\uffc7\071\uffc7\072\uffc7\001\002\000" +
    "\026\011\051\030\043\031\047\042\053\054\045\056\041" +
    "\057\052\060\057\061\044\071\042\001\002\000\104\002" +
    "\uffb4\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\012\uffb4" +
    "\015\uffb4\016\uffb4\020\uffb4\023\uffb4\024\uffb4\025\uffb4\026" +
    "\uffb4\027\uffb4\034\uffb4\035\uffb4\043\uffb4\044\uffb4\045\uffb4" +
    "\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\062" +
    "\uffb4\063\uffb4\064\uffb4\065\uffb4\067\uffb4\071\uffb4\072\uffb4" +
    "\001\002\000\104\002\uffc2\004\uffc2\005\uffc2\006\uffc2\007" +
    "\uffc2\010\uffc2\012\uffc2\015\uffc2\016\uffc2\020\uffc2\023\uffc2" +
    "\024\uffc2\025\uffc2\026\uffc2\027\uffc2\034\uffc2\035\uffc2\043" +
    "\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2" +
    "\052\uffc2\053\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2\067" +
    "\uffc2\071\uffc2\072\uffc2\001\002\000\104\002\uffc5\004\uffc5" +
    "\005\uffc5\006\uffc5\007\uffc5\010\uffc5\012\uffc5\015\uffc5\016" +
    "\uffc5\020\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5" +
    "\034\uffc5\035\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047" +
    "\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\062\uffc5\063\uffc5" +
    "\064\uffc5\065\uffc5\067\uffc5\071\uffc5\072\uffc5\001\002\000" +
    "\036\044\111\045\102\046\115\047\104\050\106\051\113" +
    "\052\103\053\101\062\110\063\114\064\107\065\105\067" +
    "\112\072\134\001\002\000\104\002\uffc6\004\uffc6\005\uffc6" +
    "\006\uffc6\007\uffc6\010\uffc6\012\uffc6\015\uffc6\016\uffc6\020" +
    "\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\034\uffc6" +
    "\035\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050" +
    "\uffc6\051\uffc6\052\uffc6\053\uffc6\062\uffc6\063\uffc6\064\uffc6" +
    "\065\uffc6\067\uffc6\071\uffc6\072\uffc6\001\002\000\004\071" +
    "\133\001\002\000\030\011\051\030\043\031\047\042\053" +
    "\054\045\056\041\057\052\060\057\061\044\071\042\072" +
    "\046\001\002\000\004\012\062\001\002\000\040\004\015" +
    "\005\021\006\020\007\016\010\034\015\031\020\026\023" +
    "\037\024\004\026\017\027\032\034\033\035\035\043\007" +
    "\071\025\001\002\000\006\013\066\071\065\001\002\000" +
    "\046\002\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd" +
    "\015\uffdd\016\uffdd\020\uffdd\023\uffdd\024\uffdd\025\uffdd\026" +
    "\uffdd\027\uffdd\034\uffdd\035\uffdd\043\uffdd\071\uffdd\001\002" +
    "\000\006\013\073\055\072\001\002\000\006\004\070\014" +
    "\067\001\002\000\006\055\uffd0\072\uffd0\001\002\000\004" +
    "\014\071\001\002\000\006\055\uffce\072\uffce\001\002\000" +
    "\026\011\051\030\043\031\047\042\053\054\045\056\041" +
    "\057\052\060\057\061\044\071\042\001\002\000\006\004" +
    "\075\014\074\001\002\000\006\055\uffd1\072\uffd1\001\002" +
    "\000\004\014\076\001\002\000\006\055\uffcf\072\uffcf\001" +
    "\002\000\036\044\111\045\102\046\115\047\104\050\106" +
    "\051\113\052\103\053\101\062\110\063\114\064\107\065" +
    "\105\067\112\072\100\001\002\000\046\002\uffcd\004\uffcd" +
    "\005\uffcd\006\uffcd\007\uffcd\010\uffcd\015\uffcd\016\uffcd\020" +
    "\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\034\uffcd" +
    "\035\uffcd\043\uffcd\071\uffcd\001\002\000\026\011\051\030" +
    "\043\031\047\042\053\054\045\056\041\057\052\060\057" +
    "\061\044\071\042\001\002\000\026\011\051\030\043\031" +
    "\047\042\053\054\045\056\041\057\052\060\057\061\044" +
    "\071\042\001\002\000\026\011\051\030\043\031\047\042" +
    "\053\054\045\056\041\057\052\060\057\061\044\071\042" +
    "\001\002\000\026\011\051\030\043\031\047\042\053\054" +
    "\045\056\041\057\052\060\057\061\044\071\042\001\002" +
    "\000\026\011\051\030\043\031\047\042\053\054\045\056" +
    "\041\057\052\060\057\061\044\071\042\001\002\000\026" +
    "\011\051\030\043\031\047\042\053\054\045\056\041\057" +
    "\052\060\057\061\044\071\042\001\002\000\026\011\051" +
    "\030\043\031\047\042\053\054\045\056\041\057\052\060" +
    "\057\061\044\071\042\001\002\000\026\011\051\030\043" +
    "\031\047\042\053\054\045\056\041\057\052\060\057\061" +
    "\044\071\042\001\002\000\026\011\051\030\043\031\047" +
    "\042\053\054\045\056\041\057\052\060\057\061\044\071" +
    "\042\001\002\000\026\011\051\030\043\031\047\042\053" +
    "\054\045\056\041\057\052\060\057\061\044\071\042\001" +
    "\002\000\026\011\051\030\043\031\047\042\053\054\045" +
    "\056\041\057\052\060\057\061\044\071\042\001\002\000" +
    "\026\011\051\030\043\031\047\042\053\054\045\056\041" +
    "\057\052\060\057\061\044\071\042\001\002\000\026\011" +
    "\051\030\043\031\047\042\053\054\045\056\041\057\052" +
    "\060\057\061\044\071\042\001\002\000\104\002\uffb0\004" +
    "\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\012\uffb0\015\uffb0" +
    "\016\uffb0\020\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027" +
    "\uffb0\034\uffb0\035\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0" +
    "\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\062\110\063" +
    "\114\064\107\065\105\067\112\071\uffb0\072\uffb0\001\002" +
    "\000\104\002\uffbf\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010" +
    "\uffbf\012\uffbf\015\uffbf\016\uffbf\020\uffbf\023\uffbf\024\uffbf" +
    "\025\uffbf\026\uffbf\027\uffbf\034\uffbf\035\uffbf\043\uffbf\044" +
    "\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf" +
    "\053\uffbf\062\uffbf\063\114\064\uffbf\065\uffbf\067\uffbf\071" +
    "\uffbf\072\uffbf\001\002\000\104\002\uffaf\004\uffaf\005\uffaf" +
    "\006\uffaf\007\uffaf\010\uffaf\012\uffaf\015\uffaf\016\uffaf\020" +
    "\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\034\uffaf" +
    "\035\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050" +
    "\uffaf\051\uffaf\052\uffaf\053\uffaf\062\110\063\114\064\107" +
    "\065\105\067\112\071\uffaf\072\uffaf\001\002\000\104\002" +
    "\uffbc\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc\012\uffbc" +
    "\015\uffbc\016\uffbc\020\uffbc\023\uffbc\024\uffbc\025\uffbc\026" +
    "\uffbc\027\uffbc\034\uffbc\035\uffbc\043\uffbc\044\uffbc\045\uffbc" +
    "\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\062" +
    "\uffbc\063\114\064\uffbc\065\uffbc\067\uffbc\071\uffbc\072\uffbc" +
    "\001\002\000\104\002\uffb3\004\uffb3\005\uffb3\006\uffb3\007" +
    "\uffb3\010\uffb3\012\uffb3\015\uffb3\016\uffb3\020\uffb3\023\uffb3" +
    "\024\uffb3\025\uffb3\026\uffb3\027\uffb3\034\uffb3\035\uffb3\043" +
    "\uffb3\044\uffb3\045\uffb3\046\115\047\104\050\106\051\113" +
    "\052\uffb3\053\uffb3\062\110\063\114\064\107\065\105\067" +
    "\112\071\uffb3\072\uffb3\001\002\000\104\002\uffc0\004\uffc0" +
    "\005\uffc0\006\uffc0\007\uffc0\010\uffc0\012\uffc0\015\uffc0\016" +
    "\uffc0\020\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0" +
    "\034\uffc0\035\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047" +
    "\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\062\uffc0\063\114" +
    "\064\107\065\105\067\112\071\uffc0\072\uffc0\001\002\000" +
    "\104\002\uffbe\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe" +
    "\012\uffbe\015\uffbe\016\uffbe\020\uffbe\023\uffbe\024\uffbe\025" +
    "\uffbe\026\uffbe\027\uffbe\034\uffbe\035\uffbe\043\uffbe\044\uffbe" +
    "\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053" +
    "\uffbe\062\uffbe\063\114\064\uffbe\065\uffbe\067\uffbe\071\uffbe" +
    "\072\uffbe\001\002\000\104\002\uffae\004\uffae\005\uffae\006" +
    "\uffae\007\uffae\010\uffae\012\uffae\015\uffae\016\uffae\020\uffae" +
    "\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae\034\uffae\035" +
    "\uffae\043\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae" +
    "\051\uffae\052\uffae\053\uffae\062\110\063\114\064\107\065" +
    "\105\067\112\071\uffae\072\uffae\001\002\000\104\002\uffbd" +
    "\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\012\uffbd\015" +
    "\uffbd\016\uffbd\020\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd" +
    "\027\uffbd\034\uffbd\035\uffbd\043\uffbd\044\uffbd\045\uffbd\046" +
    "\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\062\uffbd" +
    "\063\114\064\uffbd\065\uffbd\067\uffbd\071\uffbd\072\uffbd\001" +
    "\002\000\104\002\uffb1\004\uffb1\005\uffb1\006\uffb1\007\uffb1" +
    "\010\uffb1\012\uffb1\015\uffb1\016\uffb1\020\uffb1\023\uffb1\024" +
    "\uffb1\025\uffb1\026\uffb1\027\uffb1\034\uffb1\035\uffb1\043\uffb1" +
    "\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052" +
    "\uffb1\053\uffb1\062\110\063\114\064\107\065\105\067\112" +
    "\071\uffb1\072\uffb1\001\002\000\104\002\uffb8\004\uffb8\005" +
    "\uffb8\006\uffb8\007\uffb8\010\uffb8\012\uffb8\015\uffb8\016\uffb8" +
    "\020\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\034" +
    "\uffb8\035\uffb8\043\uffb8\044\111\045\102\046\115\047\104" +
    "\050\106\051\113\052\uffb8\053\uffb8\062\110\063\114\064" +
    "\107\065\105\067\112\071\uffb8\072\uffb8\001\002\000\104" +
    "\002\uffb2\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\012" +
    "\uffb2\015\uffb2\016\uffb2\020\uffb2\023\uffb2\024\uffb2\025\uffb2" +
    "\026\uffb2\027\uffb2\034\uffb2\035\uffb2\043\uffb2\044\uffb2\045" +
    "\uffb2\046\115\047\104\050\106\051\113\052\uffb2\053\uffb2" +
    "\062\110\063\114\064\107\065\105\067\112\071\uffb2\072" +
    "\uffb2\001\002\000\104\002\uffb7\004\uffb7\005\uffb7\006\uffb7" +
    "\007\uffb7\010\uffb7\012\uffb7\015\uffb7\016\uffb7\020\uffb7\023" +
    "\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\034\uffb7\035\uffb7" +
    "\043\uffb7\044\111\045\102\046\115\047\104\050\106\051" +
    "\113\052\uffb7\053\uffb7\062\110\063\114\064\107\065\105" +
    "\067\112\071\uffb7\072\uffb7\001\002\000\104\002\uffba\004" +
    "\uffba\005\uffba\006\uffba\007\uffba\010\uffba\012\uffba\015\uffba" +
    "\016\uffba\020\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027" +
    "\uffba\034\uffba\035\uffba\043\uffba\044\uffba\045\uffba\046\uffba" +
    "\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\062\uffba\063" +
    "\uffba\064\uffba\065\uffba\067\uffba\071\uffba\072\uffba\001\002" +
    "\000\032\011\uffe4\012\uffe4\030\uffe4\031\uffe4\042\uffe4\054" +
    "\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\071\uffe4\072\uffe4" +
    "\001\002\000\036\012\136\044\111\045\102\046\115\047" +
    "\104\050\106\051\113\052\103\053\101\062\110\063\114" +
    "\064\107\065\105\067\112\001\002\000\104\002\uffb9\004" +
    "\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\012\uffb9\015\uffb9" +
    "\016\uffb9\020\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027" +
    "\uffb9\034\uffb9\035\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9" +
    "\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\062\uffb9\063" +
    "\uffb9\064\uffb9\065\uffb9\067\uffb9\071\uffb9\072\uffb9\001\002" +
    "\000\104\002\uffb6\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010" +
    "\uffb6\012\uffb6\015\uffb6\016\uffb6\020\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\026\uffb6\027\uffb6\034\uffb6\035\uffb6\043\uffb6\044" +
    "\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6" +
    "\053\uffb6\062\uffb6\063\114\064\uffb6\065\uffb6\067\uffb6\071" +
    "\uffb6\072\uffb6\001\002\000\104\002\uffbb\004\uffbb\005\uffbb" +
    "\006\uffbb\007\uffbb\010\uffbb\012\uffbb\015\uffbb\016\uffbb\020" +
    "\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\034\uffbb" +
    "\035\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050" +
    "\uffbb\051\uffbb\052\uffbb\053\uffbb\062\uffbb\063\uffbb\064\uffbb" +
    "\065\uffbb\067\uffbb\071\uffbb\072\uffbb\001\002\000\004\032" +
    "\142\001\002\000\004\012\143\001\002\000\004\072\144" +
    "\001\002\000\046\002\uffec\004\uffec\005\uffec\006\uffec\007" +
    "\uffec\010\uffec\015\uffec\016\uffec\020\uffec\023\uffec\024\uffec" +
    "\025\uffec\026\uffec\027\uffec\034\uffec\035\uffec\043\uffec\071" +
    "\uffec\001\002\000\004\032\146\001\002\000\004\012\147" +
    "\001\002\000\004\072\150\001\002\000\046\002\uffed\004" +
    "\uffed\005\uffed\006\uffed\007\uffed\010\uffed\015\uffed\016\uffed" +
    "\020\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\034" +
    "\uffed\035\uffed\043\uffed\071\uffed\001\002\000\046\002\uffdc" +
    "\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\015\uffdc\016" +
    "\uffdc\020\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc" +
    "\034\uffdc\035\uffdc\043\uffdc\071\uffdc\001\002\000\042\004" +
    "\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\015\uffe6\016\uffe6" +
    "\020\uffe6\023\uffe6\024\uffe6\026\uffe6\027\uffe6\034\uffe6\035" +
    "\uffe6\043\uffe6\071\uffe6\001\002\000\054\002\uffea\004\uffea" +
    "\005\uffea\006\uffea\007\uffea\010\uffea\015\uffea\016\uffea\020" +
    "\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea" +
    "\027\uffea\034\uffea\035\uffea\043\uffea\071\uffea\072\uffea\001" +
    "\002\000\042\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8" +
    "\015\uffe8\016\uffe8\020\uffe8\023\uffe8\024\uffe8\026\uffe8\027" +
    "\uffe8\034\uffe8\035\uffe8\043\uffe8\071\uffe8\001\002\000\042" +
    "\004\015\005\021\006\020\007\016\010\034\015\031\016" +
    "\156\020\026\023\037\024\004\026\017\027\032\034\033" +
    "\035\035\043\007\071\025\001\002\000\054\002\uffe9\004" +
    "\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\015\uffe9\016\uffe9" +
    "\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026" +
    "\uffe9\027\uffe9\034\uffe9\035\uffe9\043\uffe9\071\uffe9\072\uffe9" +
    "\001\002\000\042\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010" +
    "\uffe7\015\uffe7\016\uffe7\020\uffe7\023\uffe7\024\uffe7\026\uffe7" +
    "\027\uffe7\034\uffe7\035\uffe7\043\uffe7\071\uffe7\001\002\000" +
    "\030\011\051\015\164\030\043\031\047\042\053\054\045" +
    "\056\041\057\052\060\057\061\044\071\042\001\002\000" +
    "\046\002\uffcb\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb" +
    "\015\uffcb\016\uffcb\020\uffcb\023\uffcb\024\uffcb\025\uffcb\026" +
    "\uffcb\027\uffcb\034\uffcb\035\uffcb\043\uffcb\071\uffcb\001\002" +
    "\000\004\072\201\001\002\000\036\044\111\045\102\046" +
    "\115\047\104\050\106\051\113\052\103\053\101\062\110" +
    "\063\114\064\107\065\105\067\112\072\200\001\002\000" +
    "\010\016\165\031\170\033\166\001\002\000\004\072\uffd8" +
    "\001\002\000\006\016\uffd3\017\uffd3\001\002\000\004\016" +
    "\177\001\002\000\006\016\uffd5\017\uffd5\001\002\000\006" +
    "\016\uffd7\017\175\001\002\000\006\016\uffd6\017\173\001" +
    "\002\000\004\033\174\001\002\000\006\016\uffd2\017\uffd2" +
    "\001\002\000\004\031\176\001\002\000\006\016\uffd4\017" +
    "\uffd4\001\002\000\004\072\uffd9\001\002\000\046\002\uffca" +
    "\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca\015\uffca\016" +
    "\uffca\020\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca" +
    "\034\uffca\035\uffca\043\uffca\071\uffca\001\002\000\046\002" +
    "\uffcc\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\015\uffcc" +
    "\016\uffcc\020\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027" +
    "\uffcc\034\uffcc\035\uffcc\043\uffcc\071\uffcc\001\002\000\026" +
    "\011\051\030\043\031\047\042\053\054\045\056\041\057" +
    "\052\060\057\061\044\071\042\001\002\000\036\012\204" +
    "\044\111\045\102\046\115\047\104\050\106\051\113\052" +
    "\103\053\101\062\110\063\114\064\107\065\105\067\112" +
    "\001\002\000\004\015\031\001\002\000\010\021\210\022" +
    "\207\072\206\001\002\000\046\002\uffe3\004\uffe3\005\uffe3" +
    "\006\uffe3\007\uffe3\010\uffe3\015\uffe3\016\uffe3\020\uffe3\023" +
    "\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\034\uffe3\035\uffe3" +
    "\043\uffe3\071\uffe3\001\002\000\004\015\031\001\002\000" +
    "\004\011\222\001\002\000\006\021\213\022\212\001\002" +
    "\000\004\015\031\001\002\000\004\011\214\001\002\000" +
    "\026\011\051\030\043\031\047\042\053\054\045\056\041" +
    "\057\052\060\057\061\044\071\042\001\002\000\036\012" +
    "\216\044\111\045\102\046\115\047\104\050\106\051\113" +
    "\052\103\053\101\062\110\063\114\064\107\065\105\067" +
    "\112\001\002\000\004\015\031\001\002\000\006\021\uffdf" +
    "\022\uffdf\001\002\000\004\072\221\001\002\000\046\002" +
    "\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\015\uffe1" +
    "\016\uffe1\020\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027" +
    "\uffe1\034\uffe1\035\uffe1\043\uffe1\071\uffe1\001\002\000\026" +
    "\011\051\030\043\031\047\042\053\054\045\056\041\057" +
    "\052\060\057\061\044\071\042\001\002\000\036\012\224" +
    "\044\111\045\102\046\115\047\104\050\106\051\113\052" +
    "\103\053\101\062\110\063\114\064\107\065\105\067\112" +
    "\001\002\000\004\015\031\001\002\000\006\021\uffe0\022" +
    "\uffe0\001\002\000\004\072\227\001\002\000\046\002\uffe2" +
    "\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\015\uffe2\016" +
    "\uffe2\020\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2" +
    "\034\uffe2\035\uffe2\043\uffe2\071\uffe2\001\002\000\016\004" +
    "\015\005\021\006\020\007\016\010\034\043\007\001\002" +
    "\000\006\012\235\017\234\001\002\000\004\071\233\001" +
    "\002\000\006\012\uffc9\017\uffc9\001\002\000\016\004\015" +
    "\005\021\006\020\007\016\010\034\043\007\001\002\000" +
    "\004\072\236\001\002\000\046\002\uffeb\004\uffeb\005\uffeb" +
    "\006\uffeb\007\uffeb\010\uffeb\015\uffeb\016\uffeb\020\uffeb\023" +
    "\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\034\uffeb\035\uffeb" +
    "\043\uffeb\071\uffeb\001\002\000\004\071\240\001\002\000" +
    "\006\012\uffc8\017\uffc8\001\002\000\042\002\uffff\004\uffff" +
    "\005\uffff\006\uffff\007\uffff\010\uffff\015\uffff\020\uffff\023" +
    "\uffff\024\uffff\026\uffff\027\uffff\034\uffff\035\uffff\043\uffff" +
    "\071\uffff\001\002\000\004\002\001\001\002\000\046\002" +
    "\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\015\uffdb" +
    "\016\uffdb\020\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027" +
    "\uffdb\034\uffdb\035\uffdb\043\uffdb\071\uffdb\001\002\000\100" +
    "\002\uffda\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\015" +
    "\uffda\016\uffda\020\uffda\023\uffda\024\uffda\025\uffda\026\uffda" +
    "\027\uffda\034\uffda\035\uffda\043\uffda\044\111\045\102\046" +
    "\115\047\104\050\106\051\113\052\103\053\101\062\110" +
    "\063\114\064\107\065\105\067\112\071\uffda\001\002\000" +
    "\004\071\246\001\002\000\004\011\247\001\002\000\020" +
    "\004\015\005\021\006\020\007\016\010\034\012\251\043" +
    "\007\001\002\000\006\012\253\017\234\001\002\000\004" +
    "\015\031\001\002\000\042\002\ufffb\004\ufffb\005\ufffb\006" +
    "\ufffb\007\ufffb\010\ufffb\015\ufffb\020\ufffb\023\ufffb\024\ufffb" +
    "\026\ufffb\027\ufffb\034\ufffb\035\ufffb\043\ufffb\071\ufffb\001" +
    "\002\000\004\015\031\001\002\000\042\002\ufffc\004\ufffc" +
    "\005\ufffc\006\ufffc\007\ufffc\010\ufffc\015\ufffc\020\ufffc\023" +
    "\ufffc\024\ufffc\026\ufffc\027\ufffc\034\ufffc\035\ufffc\043\ufffc" +
    "\071\ufffc\001\002\000\004\025\256\001\002\000\004\011" +
    "\257\001\002\000\026\011\051\030\043\031\047\042\053" +
    "\054\045\056\041\057\052\060\057\061\044\071\042\001" +
    "\002\000\036\012\261\044\111\045\102\046\115\047\104" +
    "\050\106\051\113\052\103\053\101\062\110\063\114\064" +
    "\107\065\105\067\112\001\002\000\004\072\262\001\002" +
    "\000\046\002\uffde\004\uffde\005\uffde\006\uffde\007\uffde\010" +
    "\uffde\015\uffde\016\uffde\020\uffde\023\uffde\024\uffde\025\uffde" +
    "\026\uffde\027\uffde\034\uffde\035\uffde\043\uffde\071\uffde\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\034\002\021\003\027\004\004\005\010\006" +
    "\011\007\022\010\005\011\023\015\035\017\007\020\012" +
    "\025\026\026\013\001\001\000\026\005\062\006\254\007" +
    "\022\010\005\011\023\015\035\017\007\020\012\025\026" +
    "\026\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\030\243\031\047\032\055" +
    "\033\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\003\240\004\004\005\010\006\011\007\022\010\005" +
    "\011\023\015\035\017\007\020\012\025\026\026\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\005\062\006\151\007\022\010\005\011\023\012\154" +
    "\013\153\015\035\017\007\020\012\025\026\026\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\014\057\030\054\031\047\032\055\033\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\030\136\031\047\032\055\033\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\030\134\031\047\032\055\033\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\014\060\030\054\031\047\032\055\033\053\001\001\000" +
    "\002\001\001\000\026\005\062\006\063\007\022\010\005" +
    "\011\023\015\035\017\007\020\012\025\026\026\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\030\076\031\047\032\055\033\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\030\131\031\047\032\055\033\053\001\001\000" +
    "\012\030\130\031\047\032\055\033\053\001\001\000\012" +
    "\030\127\031\047\032\055\033\053\001\001\000\012\030" +
    "\126\031\047\032\055\033\053\001\001\000\012\030\125" +
    "\031\047\032\055\033\053\001\001\000\012\030\124\031" +
    "\047\032\055\033\053\001\001\000\012\030\123\031\047" +
    "\032\055\033\053\001\001\000\012\030\122\031\047\032" +
    "\055\033\053\001\001\000\012\030\121\031\047\032\055" +
    "\033\053\001\001\000\012\030\120\031\047\032\055\033" +
    "\053\001\001\000\012\030\117\031\047\032\055\033\053" +
    "\001\001\000\012\030\116\031\047\032\055\033\053\001" +
    "\001\000\012\030\115\031\047\032\055\033\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\005\062\006\151" +
    "\007\022\010\005\011\023\013\156\015\035\017\007\020" +
    "\012\025\026\026\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\021\161\030\162\031\047\032\055\033" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\022\166\023\170\024\171\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\030\202\031\047\032\055\033\053\001\001\000\002" +
    "\001\001\000\004\011\204\001\001\000\004\016\210\001" +
    "\001\000\002\001\001\000\004\011\225\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\217\001\001\000" +
    "\002\001\001\000\012\030\214\031\047\032\055\033\053" +
    "\001\001\000\002\001\001\000\004\011\216\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\030\222\031\047\032\055\033\053\001\001\000\002\001" +
    "\001\000\004\011\224\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\231\027\230\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\236\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\231\027\247" +
    "\001\001\000\002\001\001\000\004\011\251\001\001\000" +
    "\002\001\001\000\004\011\253\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\030\257\031" +
    "\047\032\055\033\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


  LexerCup lex;
  @SuppressWarnings("deprecation")
  public Sintax(LexerCup lex){
    this.lex=lex;
    this.symbolFactory= new DefaultSymbolFactory();
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {


    public void uno(){
        System.out.println("123");
    }
    public void dos(){
        System.out.println("456");
    }

  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main ::= external_declaration 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main ::= main external_declaration 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // external_declaration ::= function_definition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("external_declaration",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // external_declaration ::= statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("external_declaration",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // function_definition ::= type_specifier RECORRIDO PERSONA ABRECUENTO args CIERRACUENTO compound_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("function_definition",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // function_definition ::= type_specifier RECORRIDO PERSONA ABRECUENTO CIERRACUENTO compound_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("function_definition",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type_specifier ::= SINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("type_specifier",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type_specifier ::= COLACHO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("type_specifier",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type_specifier ::= SANTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("type_specifier",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type_specifier ::= NOEL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("type_specifier",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type_specifier ::= NICOLAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("type_specifier",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_specifier ::= CLAUS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("type_specifier",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= compound_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= assignment_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= selection_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= iteration_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= jump_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= io_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= function_call_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // io_statement ::= NARRA ABRECUENTO l_SANTA CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("io_statement",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // io_statement ::= ESCUCHA ABRECUENTO l_SANTA CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("io_statement",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // function_call_statement ::= PERSONA ABRECUENTO args CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("function_call_statement",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // compound_statement ::= ABREREGALO CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("compound_statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // compound_statement ::= ABREREGALO block_item_list CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("compound_statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // block_item_list ::= block_item 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("block_item_list",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // block_item_list ::= block_item_list block_item 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("block_item_list",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // block_item ::= statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("block_item",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression_statement ::= FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expression_statement",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression_statement ::= expression FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expression_statement",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // selection_statement ::= ELFO ABRECUENTO expression CIERRACUENTO compound_statement FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("selection_statement",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // selection_statement ::= ELFO ABRECUENTO expression CIERRACUENTO compound_statement DUENDE compound_statement FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("selection_statement",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // selection_statement ::= ELFO ABRECUENTO expression CIERRACUENTO compound_statement elif_statement DUENDE compound_statement FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("selection_statement",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // elif_statement ::= HADA ABRECUENTO expression CIERRACUENTO compound_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("elif_statement",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // elif_statement ::= elif_statement HADA ABRECUENTO expression CIERRACUENTO compound_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("elif_statement",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // iteration_statement ::= HACE statement REVISA ABRECUENTO expression CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("iteration_statement",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // iteration_statement ::= ENVUELVE ABRECUENTO expression_statement expression_statement CIERRACUENTO statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("iteration_statement",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // jump_statement ::= CORTA FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("jump_statement",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // jump_statement ::= ENVIA FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("jump_statement",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // jump_statement ::= ENVIA expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("jump_statement",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // initializer ::= ABREREGALO initializer_list CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("initializer",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // initializer ::= ABREREGALO CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("initializer",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // initializer_list ::= initializer_list_integer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("initializer_list",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // initializer_list ::= initializer_list_char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("initializer_list",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // initializer_list_integer ::= l_NOEL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("initializer_list_integer",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // initializer_list_integer ::= initializer_list_integer CHIMENEA l_NOEL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("initializer_list_integer",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // initializer_list_char ::= l_COLACHO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("initializer_list_char",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // initializer_list_char ::= initializer_list_char CHIMENEA l_COLACHO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("initializer_list_char",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // assign_array ::= type_specifier PERSONA ABREEMPAQUE CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assign_array",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // assign_array ::= type_specifier ABREEMPAQUE CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assign_array",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // assign_array ::= type_specifier PERSONA ABREEMPAQUE NOEL CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assign_array",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // assign_array ::= type_specifier ABREEMPAQUE NOEL CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assign_array",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // assignment_expression ::= type_specifier PERSONA ENTREGA expression FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assignment_expression",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // assignment_expression ::= assign_array ENTREGA initializer FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assignment_expression",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // assignment_expression ::= assign_array FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assignment_expression",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // assignment_expression ::= assign_array ENTREGA expression FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assignment_expression",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // args ::= type_specifier PERSONA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("args",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // args ::= args CHIMENEA type_specifier PERSONA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("args",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= ArithmeticExpr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expression",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= LogicalExpr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expression",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= RelationalExpr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expression",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= l_NOEL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expression",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= l_NICOLAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expression",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= NARIZROJA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expression",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= PERSONA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expression",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ArithmeticExpr ::= expression RODOLFO expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ArithmeticExpr",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ArithmeticExpr ::= expression TRUENO expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ArithmeticExpr",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ArithmeticExpr ::= expression RELAMPAGO expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ArithmeticExpr",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ArithmeticExpr ::= expression JUGUETON expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ArithmeticExpr",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ArithmeticExpr ::= expression CUPIDO expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ArithmeticExpr",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ArithmeticExpr ::= QUIEN PERSONA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ArithmeticExpr",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ArithmeticExpr ::= GRINCH PERSONA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ArithmeticExpr",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ArithmeticExpr ::= ABRECUENTO expression CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ArithmeticExpr",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LogicalExpr ::= expression GASPAR expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LogicalExpr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LogicalExpr ::= expression MELCHOR expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LogicalExpr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LogicalExpr ::= BALTASAR expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LogicalExpr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LogicalExpr ::= l_t_CLAUS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LogicalExpr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LogicalExpr ::= l_f_CLAUS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LogicalExpr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // RelationalExpr ::= expression ALABASTRO expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RelationalExpr",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // RelationalExpr ::= expression EVERGEEN expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RelationalExpr",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // RelationalExpr ::= expression MINSTIX expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RelationalExpr",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // RelationalExpr ::= expression UPATREE expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RelationalExpr",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // RelationalExpr ::= expression OPENSLAE expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RelationalExpr",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // RelationalExpr ::= expression MARY expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RelationalExpr",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
