
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package LexicalAnalizer;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\002\004\000\002\040\002\000\002\002" +
    "\004\000\002\003\003\000\002\003\004\000\002\005\005" +
    "\000\002\004\006\000\002\041\002\000\002\004\011\000" +
    "\002\004\007\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\011\007\000\002\011\007" +
    "\000\002\012\007\000\002\013\004\000\002\013\005\000" +
    "\002\014\003\000\002\014\004\000\002\015\003\000\002" +
    "\016\010\000\002\016\012\000\002\016\013\000\002\017" +
    "\007\000\002\017\010\000\002\020\011\000\002\020\014" +
    "\000\002\021\004\000\002\021\004\000\002\021\005\000" +
    "\002\022\005\000\002\022\004\000\002\023\003\000\002" +
    "\023\003\000\002\024\003\000\002\024\005\000\002\025" +
    "\003\000\002\025\005\000\002\026\006\000\002\026\007" +
    "\000\002\027\007\000\002\027\005\000\002\027\004\000" +
    "\002\027\006\000\002\027\006\000\002\030\003\000\002" +
    "\030\005\000\002\031\004\000\002\031\007\000\002\032" +
    "\003\000\002\032\005\000\002\033\003\000\002\033\003" +
    "\000\002\033\005\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\034\004\000\002" +
    "\034\004\000\002\035\005\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\035\005\000\002\035\005" +
    "\000\002\035\004\000\002\035\004\000\002\035\003\000" +
    "\002\036\005\000\002\036\005\000\002\036\004\000\002" +
    "\037\005\000\002\037\005\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\037\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\016\004\000\005\000\006\000\007\000\010" +
    "\000\037\000\001\002\000\016\004\012\005\014\006\015" +
    "\007\020\010\010\037\016\001\002\000\004\002\006\001" +
    "\002\000\004\002\001\001\002\000\020\002\uffff\004\012" +
    "\005\014\006\015\007\020\010\010\037\016\001\002\000" +
    "\006\065\uffeb\066\uffeb\001\002\000\004\065\272\001\002" +
    "\000\006\065\uffed\066\uffed\001\002\000\004\015\024\001" +
    "\002\000\006\065\uffec\066\uffec\001\002\000\006\065\uffee" +
    "\066\uffee\001\002\000\006\064\021\065\ufff0\001\002\000" +
    "\020\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe" +
    "\037\ufffe\001\002\000\006\065\uffef\066\uffef\001\002\000" +
    "\004\011\022\001\002\000\004\012\023\001\002\000\004" +
    "\015\ufffb\001\002\000\042\004\012\005\014\006\015\007" +
    "\020\010\010\015\024\016\032\024\042\027\054\030\027" +
    "\032\034\033\045\034\047\035\052\037\030\066\037\001" +
    "\002\000\004\067\026\001\002\000\020\002\ufffc\004\ufffc" +
    "\005\ufffc\006\ufffc\007\ufffc\010\ufffc\037\ufffc\001\002\000" +
    "\040\004\012\005\014\006\015\007\020\010\010\015\024" +
    "\024\042\027\054\030\027\032\034\033\045\034\047\035" +
    "\052\037\030\066\037\001\002\000\004\066\ufff0\001\002" +
    "\000\046\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\015" +
    "\uffe4\016\uffe4\024\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4" +
    "\033\uffe4\034\uffe4\035\uffe4\037\uffe4\066\uffe4\067\uffe4\001" +
    "\002\000\052\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0" +
    "\015\uffe0\016\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\037\uffe0" +
    "\066\uffe0\067\uffe0\001\002\000\004\066\257\001\002\000" +
    "\034\011\064\020\065\021\060\022\077\023\062\036\073" +
    "\050\074\052\075\053\072\054\101\055\076\066\067\067" +
    "\255\001\002\000\006\051\232\067\233\001\002\000\046" +
    "\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\015\uffe8\016" +
    "\uffe8\024\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8" +
    "\034\uffe8\035\uffe8\037\uffe8\066\uffe8\067\uffe8\001\002\000" +
    "\004\011\153\001\002\000\046\004\uffe7\005\uffe7\006\uffe7" +
    "\007\uffe7\010\uffe7\015\uffe7\016\uffe7\024\uffe7\027\uffe7\030" +
    "\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\037\uffe7" +
    "\066\uffe7\067\uffe7\001\002\000\042\004\uffde\005\uffde\006" +
    "\uffde\007\uffde\010\uffde\015\uffde\016\uffde\024\uffde\027\uffde" +
    "\030\uffde\032\uffde\033\uffde\034\uffde\035\uffde\037\uffde\066" +
    "\uffde\001\002\000\004\011\204\001\002\000\042\004\012" +
    "\005\014\006\015\007\020\010\010\015\024\016\202\024" +
    "\042\027\054\030\027\032\034\033\045\034\047\035\052" +
    "\037\030\066\037\001\002\000\046\004\uffea\005\uffea\006" +
    "\uffea\007\uffea\010\uffea\015\uffea\016\uffea\024\uffea\027\uffea" +
    "\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\037" +
    "\uffea\066\uffea\067\uffea\001\002\000\004\067\201\001\002" +
    "\000\042\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\015" +
    "\uffdc\016\uffdc\024\uffdc\027\uffdc\030\uffdc\032\uffdc\033\uffdc" +
    "\034\uffdc\035\uffdc\037\uffdc\066\uffdc\001\002\000\004\011" +
    "\175\001\002\000\046\004\uffe5\005\uffe5\006\uffe5\007\uffe5" +
    "\010\uffe5\015\uffe5\016\uffe5\024\uffe5\027\uffe5\030\uffe5\031" +
    "\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\037\uffe5\066\uffe5" +
    "\067\uffe5\001\002\000\046\004\uffe6\005\uffe6\006\uffe6\007" +
    "\uffe6\010\uffe6\015\uffe6\016\uffe6\024\uffe6\027\uffe6\030\uffe6" +
    "\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\037\uffe6\066" +
    "\uffe6\067\uffe6\001\002\000\004\011\171\001\002\000\046" +
    "\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\015\uffe9\016" +
    "\uffe9\024\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9" +
    "\034\uffe9\035\uffe9\037\uffe9\066\uffe9\067\uffe9\001\002\000" +
    "\004\011\055\001\002\000\016\004\012\005\014\006\015" +
    "\007\020\010\010\037\030\001\002\000\004\017\057\001" +
    "\002\000\032\011\064\020\065\021\060\022\077\023\062" +
    "\036\073\050\074\052\075\053\072\054\101\055\076\066" +
    "\067\001\002\000\046\012\ufff7\014\ufff7\017\ufff7\040\ufff7" +
    "\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047" +
    "\ufff7\056\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7\063\ufff7" +
    "\067\ufff7\001\002\000\046\012\uffbc\014\uffbc\017\uffbc\040" +
    "\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc" +
    "\047\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063" +
    "\uffbc\067\uffbc\001\002\000\046\012\ufff5\014\ufff5\017\ufff5" +
    "\040\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046" +
    "\ufff5\047\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5" +
    "\063\ufff5\067\ufff5\001\002\000\046\012\uffb9\014\uffb9\017" +
    "\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9" +
    "\046\uffb9\047\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\062" +
    "\uffb9\063\uffb9\067\uffb9\001\002\000\032\011\064\020\065" +
    "\021\060\022\077\023\062\036\073\050\074\052\075\053" +
    "\072\054\101\055\076\066\067\001\002\000\046\012\ufff6" +
    "\014\ufff6\017\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044" +
    "\ufff6\045\ufff6\046\ufff6\047\ufff6\056\ufff6\057\ufff6\060\ufff6" +
    "\061\ufff6\062\ufff6\063\ufff6\067\ufff6\001\002\000\040\017" +
    "\162\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6" +
    "\046\uffb6\047\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6\062" +
    "\uffb6\063\uffb6\001\002\000\050\011\153\012\uffbb\014\uffbb" +
    "\017\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045" +
    "\uffbb\046\uffbb\047\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb" +
    "\062\uffbb\063\uffbb\067\uffbb\001\002\000\046\012\uffb8\014" +
    "\uffb8\017\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8" +
    "\045\uffb8\046\uffb8\047\uffb8\056\uffb8\057\uffb8\060\uffb8\061" +
    "\uffb8\062\uffb8\063\uffb8\067\uffb8\001\002\000\036\040\124" +
    "\041\114\042\131\043\117\044\120\045\126\046\116\047" +
    "\113\056\123\057\130\060\122\061\121\062\115\063\127" +
    "\001\002\000\046\012\ufff2\014\ufff2\017\ufff2\040\ufff2\041" +
    "\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2" +
    "\056\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\067" +
    "\ufff2\001\002\000\046\012\ufff1\014\ufff1\017\ufff1\040\ufff1" +
    "\041\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047" +
    "\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1" +
    "\067\ufff1\001\002\000\032\011\064\020\065\021\060\022" +
    "\077\023\062\036\073\050\074\052\075\053\072\054\101" +
    "\055\076\066\067\001\002\000\046\012\ufff3\014\ufff3\017" +
    "\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3" +
    "\046\ufff3\047\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\062" +
    "\ufff3\063\ufff3\067\ufff3\001\002\000\020\004\012\005\014" +
    "\006\015\007\020\010\010\037\030\066\150\001\002\000" +
    "\046\012\ufff4\014\ufff4\017\ufff4\040\ufff4\041\ufff4\042\ufff4" +
    "\043\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4\056\ufff4\057" +
    "\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\067\ufff4\001\002" +
    "\000\046\012\uffab\014\uffab\017\uffab\040\uffab\041\uffab\042" +
    "\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\056\uffab" +
    "\057\uffab\060\uffab\061\uffab\062\uffab\063\uffab\067\uffab\001" +
    "\002\000\020\004\012\005\014\006\015\007\020\010\010" +
    "\037\030\066\103\001\002\000\046\012\uffb7\014\uffb7\017" +
    "\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7" +
    "\046\uffb7\047\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7\062" +
    "\uffb7\063\uffb7\067\uffb7\001\002\000\046\012\uffac\014\uffac" +
    "\017\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045" +
    "\uffac\046\uffac\047\uffac\056\uffac\057\uffac\060\uffac\061\uffac" +
    "\062\uffac\063\uffac\067\uffac\001\002\000\004\066\106\001" +
    "\002\000\046\012\uffb4\014\uffb4\017\uffb4\040\uffb4\041\uffb4" +
    "\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\056" +
    "\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\067\uffb4" +
    "\001\002\000\004\013\107\001\002\000\034\011\064\014" +
    "\110\020\065\021\060\022\077\023\062\036\073\050\074" +
    "\052\075\053\072\054\101\055\076\066\067\001\002\000" +
    "\050\012\uffc9\014\uffc9\017\uffc9\040\uffc9\041\uffc9\042\uffc9" +
    "\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\051\uffc9\056" +
    "\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\067\uffc9" +
    "\001\002\000\046\012\uffb6\014\uffb6\017\uffb6\040\uffb6\041" +
    "\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6" +
    "\056\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\067" +
    "\uffb6\001\002\000\040\014\125\040\124\041\114\042\131" +
    "\043\117\044\120\045\126\046\116\047\113\056\123\057" +
    "\130\060\122\061\121\062\115\063\127\001\002\000\032" +
    "\011\064\020\065\021\060\022\077\023\062\036\073\050" +
    "\074\052\075\053\072\054\101\055\076\066\067\001\002" +
    "\000\032\011\064\020\065\021\060\022\077\023\062\036" +
    "\073\050\074\052\075\053\072\054\101\055\076\066\067" +
    "\001\002\000\032\011\064\020\065\021\060\022\077\023" +
    "\062\036\073\050\074\052\075\053\072\054\101\055\076" +
    "\066\067\001\002\000\032\011\064\020\065\021\060\022" +
    "\077\023\062\036\073\050\074\052\075\053\072\054\101" +
    "\055\076\066\067\001\002\000\032\011\064\020\065\021" +
    "\060\022\077\023\062\036\073\050\074\052\075\053\072" +
    "\054\101\055\076\066\067\001\002\000\032\011\064\020" +
    "\065\021\060\022\077\023\062\036\073\050\074\052\075" +
    "\053\072\054\101\055\076\066\067\001\002\000\032\011" +
    "\064\020\065\021\060\022\077\023\062\036\073\050\074" +
    "\052\075\053\072\054\101\055\076\066\067\001\002\000" +
    "\032\011\064\020\065\021\060\022\077\023\062\036\073" +
    "\050\074\052\075\053\072\054\101\055\076\066\067\001" +
    "\002\000\032\011\064\020\065\021\060\022\077\023\062" +
    "\036\073\050\074\052\075\053\072\054\101\055\076\066" +
    "\067\001\002\000\032\011\064\020\065\021\060\022\077" +
    "\023\062\036\073\050\074\052\075\053\072\054\101\055" +
    "\076\066\067\001\002\000\050\012\uffc8\014\uffc8\017\uffc8" +
    "\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046" +
    "\uffc8\047\uffc8\051\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8" +
    "\062\uffc8\063\uffc8\067\uffc8\001\002\000\032\011\064\020" +
    "\065\021\060\022\077\023\062\036\073\050\074\052\075" +
    "\053\072\054\101\055\076\066\067\001\002\000\032\011" +
    "\064\020\065\021\060\022\077\023\062\036\073\050\074" +
    "\052\075\053\072\054\101\055\076\066\067\001\002\000" +
    "\032\011\064\020\065\021\060\022\077\023\062\036\073" +
    "\050\074\052\075\053\072\054\101\055\076\066\067\001" +
    "\002\000\032\011\064\020\065\021\060\022\077\023\062" +
    "\036\073\050\074\052\075\053\072\054\101\055\076\066" +
    "\067\001\002\000\046\012\uffa4\014\uffa4\017\uffa4\040\uffa4" +
    "\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046\116\047" +
    "\113\056\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4" +
    "\067\uffa4\001\002\000\046\012\uffb3\014\uffb3\017\uffb3\040" +
    "\124\041\114\042\131\043\117\044\120\045\126\046\116" +
    "\047\113\056\uffb3\057\uffb3\060\122\061\121\062\115\063" +
    "\127\067\uffb3\001\002\000\046\012\uffaf\014\uffaf\017\uffaf" +
    "\040\124\041\114\042\131\043\117\044\120\045\126\046" +
    "\116\047\113\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf" +
    "\063\uffaf\067\uffaf\001\002\000\046\012\uffa3\014\uffa3\017" +
    "\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3" +
    "\046\116\047\113\056\uffa3\057\uffa3\060\uffa3\061\uffa3\062" +
    "\uffa3\063\uffa3\067\uffa3\001\002\000\046\012\uffa7\014\uffa7" +
    "\017\uffa7\040\uffa7\041\uffa7\042\131\043\117\044\120\045" +
    "\126\046\116\047\113\056\uffa7\057\uffa7\060\uffa7\061\uffa7" +
    "\062\uffa7\063\uffa7\067\uffa7\001\002\000\046\012\uffb2\014" +
    "\uffb2\017\uffb2\040\124\041\114\042\131\043\117\044\120" +
    "\045\126\046\116\047\113\056\uffb2\057\uffb2\060\122\061" +
    "\121\062\115\063\127\067\uffb2\001\002\000\046\012\uffb0" +
    "\014\uffb0\017\uffb0\040\124\041\114\042\131\043\117\044" +
    "\120\045\126\046\116\047\113\056\uffb0\057\uffb0\060\uffb0" +
    "\061\uffb0\062\115\063\127\067\uffb0\001\002\000\046\012" +
    "\uffb1\014\uffb1\017\uffb1\040\124\041\114\042\131\043\117" +
    "\044\120\045\126\046\116\047\113\056\uffb1\057\uffb1\060" +
    "\uffb1\061\uffb1\062\115\063\127\067\uffb1\001\002\000\046" +
    "\012\uffa2\014\uffa2\017\uffa2\040\uffa2\041\uffa2\042\uffa2\043" +
    "\uffa2\044\uffa2\045\uffa2\046\116\047\113\056\uffa2\057\uffa2" +
    "\060\uffa2\061\uffa2\062\uffa2\063\uffa2\067\uffa2\001\002\000" +
    "\046\012\uffa5\014\uffa5\017\uffa5\040\uffa5\041\uffa5\042\uffa5" +
    "\043\uffa5\044\uffa5\045\uffa5\046\116\047\113\056\uffa5\057" +
    "\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5\067\uffa5\001\002" +
    "\000\046\012\uffaa\014\uffaa\017\uffaa\040\uffaa\041\uffaa\042" +
    "\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\113\056\uffaa" +
    "\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\067\uffaa\001" +
    "\002\000\046\012\uffae\014\uffae\017\uffae\040\124\041\114" +
    "\042\131\043\117\044\120\045\126\046\116\047\113\056" +
    "\uffae\057\uffae\060\uffae\061\uffae\062\uffae\063\uffae\067\uffae" +
    "\001\002\000\046\012\uffa6\014\uffa6\017\uffa6\040\uffa6\041" +
    "\uffa6\042\131\043\117\044\120\045\126\046\116\047\113" +
    "\056\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6\063\uffa6\067" +
    "\uffa6\001\002\000\046\012\uffa9\014\uffa9\017\uffa9\040\uffa9" +
    "\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047" +
    "\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9" +
    "\067\uffa9\001\002\000\046\012\uffad\014\uffad\017\uffad\040" +
    "\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad" +
    "\047\uffad\056\uffad\057\uffad\060\uffad\061\uffad\062\uffad\063" +
    "\uffad\067\uffad\001\002\000\046\012\uffb5\014\uffb5\017\uffb5" +
    "\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046" +
    "\uffb5\047\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5" +
    "\063\uffb5\067\uffb5\001\002\000\046\012\uffa8\014\uffa8\017" +
    "\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8" +
    "\046\uffa8\047\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8\062" +
    "\uffa8\063\uffa8\067\uffa8\001\002\000\004\066\154\001\002" +
    "\000\006\012\uffbe\017\uffbe\001\002\000\006\012\157\017" +
    "\156\001\002\000\004\066\161\001\002\000\004\067\160" +
    "\001\002\000\110\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010" +
    "\uffe1\012\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\024\uffe1" +
    "\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035" +
    "\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1" +
    "\045\uffe1\046\uffe1\047\uffe1\056\uffe1\057\uffe1\060\uffe1\061" +
    "\uffe1\062\uffe1\063\uffe1\066\uffe1\067\uffe1\001\002\000\006" +
    "\012\uffbd\017\uffbd\001\002\000\032\011\064\020\065\021" +
    "\060\022\077\023\062\036\073\050\074\052\075\053\072" +
    "\054\101\055\076\066\067\001\002\000\040\012\164\040" +
    "\124\041\114\042\131\043\117\044\120\045\126\046\116" +
    "\047\113\056\123\057\130\060\122\061\121\062\115\063" +
    "\127\001\002\000\040\004\012\005\014\006\015\007\020" +
    "\010\010\015\024\024\042\027\054\030\027\032\034\033" +
    "\045\034\047\035\052\037\030\066\037\001\002\000\004" +
    "\067\166\001\002\000\046\004\uffd5\005\uffd5\006\uffd5\007" +
    "\uffd5\010\uffd5\015\uffd5\016\uffd5\024\uffd5\027\uffd5\030\uffd5" +
    "\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\037\uffd5\066" +
    "\uffd5\067\uffd5\001\002\000\040\012\170\040\124\041\114" +
    "\042\131\043\117\044\120\045\126\046\116\047\113\056" +
    "\123\057\130\060\122\061\121\062\115\063\127\001\002" +
    "\000\046\012\uffba\014\uffba\017\uffba\040\uffba\041\uffba\042" +
    "\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba\056\uffba" +
    "\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba\067\uffba\001" +
    "\002\000\032\011\064\020\065\021\060\022\077\023\062" +
    "\036\073\050\074\052\075\053\072\054\101\055\076\066" +
    "\067\001\002\000\040\012\173\040\124\041\114\042\131" +
    "\043\117\044\120\045\126\046\116\047\113\056\123\057" +
    "\130\060\122\061\121\062\115\063\127\001\002\000\004" +
    "\067\174\001\002\000\046\004\uffe2\005\uffe2\006\uffe2\007" +
    "\uffe2\010\uffe2\015\uffe2\016\uffe2\024\uffe2\027\uffe2\030\uffe2" +
    "\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\037\uffe2\066" +
    "\uffe2\067\uffe2\001\002\000\032\011\064\020\065\021\060" +
    "\022\077\023\062\036\073\050\074\052\075\053\072\054" +
    "\101\055\076\066\067\001\002\000\040\012\177\040\124" +
    "\041\114\042\131\043\117\044\120\045\126\046\116\047" +
    "\113\056\123\057\130\060\122\061\121\062\115\063\127" +
    "\001\002\000\004\067\200\001\002\000\046\004\uffe3\005" +
    "\uffe3\006\uffe3\007\uffe3\010\uffe3\015\uffe3\016\uffe3\024\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035" +
    "\uffe3\037\uffe3\066\uffe3\067\uffe3\001\002\000\046\004\uffd4" +
    "\005\uffd4\006\uffd4\007\uffd4\010\uffd4\015\uffd4\016\uffd4\024" +
    "\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4" +
    "\035\uffd4\037\uffd4\066\uffd4\067\uffd4\001\002\000\052\004" +
    "\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\015\uffdf\016\uffdf" +
    "\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032" +
    "\uffdf\033\uffdf\034\uffdf\035\uffdf\037\uffdf\066\uffdf\067\uffdf" +
    "\001\002\000\042\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010" +
    "\uffdd\015\uffdd\016\uffdd\024\uffdd\027\uffdd\030\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\037\uffdd\066\uffdd\001\002\000" +
    "\032\011\064\020\065\021\060\022\077\023\062\036\073" +
    "\050\074\052\075\053\072\054\101\055\076\066\067\001" +
    "\002\000\040\012\206\040\124\041\114\042\131\043\117" +
    "\044\120\045\126\046\116\047\113\056\123\057\130\060" +
    "\122\061\121\062\115\063\127\001\002\000\004\015\024" +
    "\001\002\000\010\025\213\026\212\067\210\001\002\000" +
    "\046\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\015\uffdb" +
    "\016\uffdb\024\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033" +
    "\uffdb\034\uffdb\035\uffdb\037\uffdb\066\uffdb\067\uffdb\001\002" +
    "\000\006\025\223\026\222\001\002\000\004\015\024\001" +
    "\002\000\004\011\214\001\002\000\032\011\064\020\065" +
    "\021\060\022\077\023\062\036\073\050\074\052\075\053" +
    "\072\054\101\055\076\066\067\001\002\000\040\012\216" +
    "\040\124\041\114\042\131\043\117\044\120\045\126\046" +
    "\116\047\113\056\123\057\130\060\122\061\121\062\115" +
    "\063\127\001\002\000\004\015\024\001\002\000\006\025" +
    "\uffd8\026\uffd8\001\002\000\004\067\221\001\002\000\046" +
    "\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\015\uffda\016" +
    "\uffda\024\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda" +
    "\034\uffda\035\uffda\037\uffda\066\uffda\067\uffda\001\002\000" +
    "\004\015\024\001\002\000\004\011\224\001\002\000\032" +
    "\011\064\020\065\021\060\022\077\023\062\036\073\050" +
    "\074\052\075\053\072\054\101\055\076\066\067\001\002" +
    "\000\040\012\226\040\124\041\114\042\131\043\117\044" +
    "\120\045\126\046\116\047\113\056\123\057\130\060\122" +
    "\061\121\062\115\063\127\001\002\000\004\015\024\001" +
    "\002\000\006\025\uffd7\026\uffd7\001\002\000\004\067\231" +
    "\001\002\000\046\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010" +
    "\uffd9\015\uffd9\016\uffd9\024\uffd9\027\uffd9\030\uffd9\031\uffd9" +
    "\032\uffd9\033\uffd9\034\uffd9\035\uffd9\037\uffd9\066\uffd9\067" +
    "\uffd9\001\002\000\034\011\064\015\235\020\065\021\060" +
    "\022\077\023\062\036\073\050\074\052\075\053\072\054" +
    "\101\055\076\066\067\001\002\000\050\004\uffc5\005\uffc5" +
    "\006\uffc5\007\uffc5\010\uffc5\015\uffc5\016\uffc5\017\uffc5\024" +
    "\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5" +
    "\035\uffc5\037\uffc5\066\uffc5\067\uffc5\001\002\000\004\067" +
    "\253\001\002\000\010\016\240\021\244\023\241\001\002" +
    "\000\040\040\124\041\114\042\131\043\117\044\120\045" +
    "\126\046\116\047\113\056\123\057\130\060\122\061\121" +
    "\062\115\063\127\067\237\001\002\000\050\004\uffc3\005" +
    "\uffc3\006\uffc3\007\uffc3\010\uffc3\015\uffc3\016\uffc3\017\uffc3" +
    "\024\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034" +
    "\uffc3\035\uffc3\037\uffc3\066\uffc3\067\uffc3\001\002\000\004" +
    "\067\uffd0\001\002\000\006\016\uffcb\017\uffcb\001\002\000" +
    "\006\016\uffce\017\251\001\002\000\006\016\uffcf\017\247" +
    "\001\002\000\006\016\uffcd\017\uffcd\001\002\000\004\016" +
    "\246\001\002\000\004\067\uffd1\001\002\000\004\021\250" +
    "\001\002\000\006\016\uffcc\017\uffcc\001\002\000\004\023" +
    "\252\001\002\000\006\016\uffca\017\uffca\001\002\000\050" +
    "\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\015\uffc4\016" +
    "\uffc4\017\uffc4\024\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\035\uffc4\037\uffc4\066\uffc4\067\uffc4\001" +
    "\002\000\040\040\124\041\114\042\131\043\117\044\120" +
    "\045\126\046\116\047\113\056\123\057\130\060\122\061" +
    "\121\062\115\063\127\067\256\001\002\000\046\004\uffd3" +
    "\005\uffd3\006\uffd3\007\uffd3\010\uffd3\015\uffd3\016\uffd3\024" +
    "\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3" +
    "\035\uffd3\037\uffd3\066\uffd3\067\uffd3\001\002\000\046\004" +
    "\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\015\uffd2\016\uffd2" +
    "\024\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\035\uffd2\037\uffd2\066\uffd2\067\uffd2\001\002\000\010" +
    "\013\107\051\260\067\261\001\002\000\032\011\064\020" +
    "\065\021\060\022\077\023\062\036\073\050\074\052\075" +
    "\053\072\054\101\055\076\066\067\001\002\000\050\004" +
    "\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\015\uffc6\016\uffc6" +
    "\017\uffc6\024\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033" +
    "\uffc6\034\uffc6\035\uffc6\037\uffc6\066\uffc6\067\uffc6\001\002" +
    "\000\040\040\124\041\114\042\131\043\117\044\120\045" +
    "\126\046\116\047\113\056\123\057\130\060\122\061\121" +
    "\062\115\063\127\067\263\001\002\000\050\004\uffc7\005" +
    "\uffc7\006\uffc7\007\uffc7\010\uffc7\015\uffc7\016\uffc7\017\uffc7" +
    "\024\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034" +
    "\uffc7\035\uffc7\037\uffc7\066\uffc7\067\uffc7\001\002\000\004" +
    "\031\265\001\002\000\004\011\266\001\002\000\032\011" +
    "\064\020\065\021\060\022\077\023\062\036\073\050\074" +
    "\052\075\053\072\054\101\055\076\066\067\001\002\000" +
    "\040\012\270\040\124\041\114\042\131\043\117\044\120" +
    "\045\126\046\116\047\113\056\123\057\130\060\122\061" +
    "\121\062\115\063\127\001\002\000\004\067\271\001\002" +
    "\000\046\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\015" +
    "\uffd6\016\uffd6\024\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6" +
    "\033\uffd6\034\uffd6\035\uffd6\037\uffd6\066\uffd6\067\uffd6\001" +
    "\002\000\004\066\273\001\002\000\004\011\274\001\002" +
    "\000\020\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\012" +
    "\276\037\ufffa\001\002\000\016\004\012\005\014\006\015" +
    "\007\020\010\010\037\030\001\002\000\004\015\ufff8\001" +
    "\002\000\006\012\307\017\306\001\002\000\006\012\uffc2" +
    "\017\uffc2\001\002\000\004\066\302\001\002\000\010\012" +
    "\uffc0\013\303\017\uffc0\001\002\000\032\011\064\020\065" +
    "\021\060\022\077\023\062\036\073\050\074\052\075\053" +
    "\072\054\101\055\076\066\067\001\002\000\040\014\305" +
    "\040\124\041\114\042\131\043\117\044\120\045\126\046" +
    "\116\047\113\056\123\057\130\060\122\061\121\062\115" +
    "\063\127\001\002\000\006\012\uffbf\017\uffbf\001\002\000" +
    "\016\004\012\005\014\006\015\007\020\010\010\037\030" +
    "\001\002\000\004\015\ufff9\001\002\000\006\012\uffc1\017" +
    "\uffc1\001\002\000\020\002\ufffd\004\ufffd\005\ufffd\006\ufffd" +
    "\007\ufffd\010\ufffd\037\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\006\002\004\040\003\001\001\000\012\003" +
    "\006\004\012\005\016\007\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\012\005\310\007\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\007\032\010\045\011\047\012\030\013\043\014\042" +
    "\015\040\016\035\020\037\021\050\026\034\027\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\007\032" +
    "\010\263\011\047\012\030\013\043\016\035\020\037\021" +
    "\050\026\034\027\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\006" +
    "\060\012\062\033\253\034\077\035\067\036\101\037\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\007\032\010\045\011\047\012\030\013\043\015" +
    "\202\016\035\020\037\021\050\026\034\027\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\032\026\034\027\055\001\001\000\002\001\001\000\020" +
    "\006\060\012\062\033\070\034\077\035\067\036\101\037" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\006\060\012\062\033" +
    "\166\034\077\035\067\036\101\037\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\006\060\012\062\033\151\034\077\035\067\036" +
    "\101\037\110\001\001\000\002\001\001\000\006\007\103" +
    "\026\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\103\026\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\006\060\012\062\033\111\034\077\035\067" +
    "\036\101\037\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\006\060\012\062\033\146" +
    "\034\077\035\067\036\101\037\110\001\001\000\020\006" +
    "\060\012\062\033\145\034\077\035\067\036\101\037\110" +
    "\001\001\000\020\006\060\012\062\033\144\034\077\035" +
    "\067\036\101\037\110\001\001\000\020\006\060\012\062" +
    "\033\143\034\077\035\067\036\101\037\110\001\001\000" +
    "\020\006\060\012\062\033\142\034\077\035\067\036\101" +
    "\037\110\001\001\000\020\006\060\012\062\033\141\034" +
    "\077\035\067\036\101\037\110\001\001\000\020\006\060" +
    "\012\062\033\140\034\077\035\067\036\101\037\110\001" +
    "\001\000\020\006\060\012\062\033\137\034\077\035\067" +
    "\036\101\037\110\001\001\000\020\006\060\012\062\033" +
    "\136\034\077\035\067\036\101\037\110\001\001\000\020" +
    "\006\060\012\062\033\135\034\077\035\067\036\101\037" +
    "\110\001\001\000\002\001\001\000\020\006\060\012\062" +
    "\033\134\034\077\035\067\036\101\037\110\001\001\000" +
    "\020\006\060\012\062\033\133\034\077\035\067\036\101" +
    "\037\110\001\001\000\020\006\060\012\062\033\132\034" +
    "\077\035\067\036\101\037\110\001\001\000\020\006\060" +
    "\012\062\033\131\034\077\035\067\036\101\037\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\006\060\012" +
    "\062\033\162\034\077\035\067\036\101\037\110\001\001" +
    "\000\002\001\001\000\026\007\032\010\164\011\047\012" +
    "\030\013\043\016\035\020\037\021\050\026\034\027\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\006\060\012\062\033\171" +
    "\034\077\035\067\036\101\037\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\006\060" +
    "\012\062\033\175\034\077\035\067\036\101\037\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\006\060\012\062\033\204\034\077\035\067\036\101" +
    "\037\110\001\001\000\002\001\001\000\004\013\206\001" +
    "\001\000\004\017\210\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\217\001\001\000\002\001\001\000" +
    "\020\006\060\012\062\033\214\034\077\035\067\036\101" +
    "\037\110\001\001\000\002\001\001\000\004\013\216\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\227\001\001\000\002\001\001\000\020\006" +
    "\060\012\062\033\224\034\077\035\067\036\101\037\110" +
    "\001\001\000\002\001\001\000\004\013\226\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\006\060\012\062\022\233\033\235\034\077\035\067\036" +
    "\101\037\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\023\244\024\242\025\241\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\006\060\012\062\033\261\034" +
    "\077\035\067\036\101\037\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\006\060\012\062\033\266\034\077" +
    "\035\067\036\101\037\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\274\001\001\000\010\007\300\030" +
    "\276\031\277\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\006\060\012\062\033\303\034\077\035\067\036\101" +
    "\037\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\300\031\307\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


  LexerCup lex;
  @SuppressWarnings("deprecation")
  public Sintax(LexerCup lex){
    this.lex=lex;
    this.symbolFactory= new DefaultSymbolFactory();
  };
public void report_error(Object info) {
        if (info instanceof Symbol) {
            Symbol symbol = (Symbol) info;
            System.err.println("Error en línea " + symbol.left + ", columna " + symbol.right + ": ");
        } else {
            System.err.println("Error: no se pudo recuperar el token de origen para el error sintáctico");
        }
    };
public void unrecovered_syntax_error(Symbol token) throws java.lang.Exception {
    throw new Exception("Error de sintaxis no puede ser recuperado. Encontrado en la línea " + token.left + " colúmna " + token.right + ": " + token.value);
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {



    HashMap<String, ArrayList<SymbolT>> listaTablasSimbolos = new HashMap<String, ArrayList<SymbolT>>();
    String currentHash;

    public void imprimirTablaSimbolos(){
        for (String key: listaTablasSimbolos.keySet()){
            System.out.println("Tabla de simbolos: " + key);
            System.out.println("Valores: ");
            for (SymbolT item: listaTablasSimbolos.get(key)) {
                System.out.println(item.toString());
            }
            System.out.println("");
        }
    }

    public void definirHash(String hash) {
        currentHash = hash;
        listaTablasSimbolos.put(hash, new ArrayList<SymbolT>());
    }

    public void anadirSimbolo(SymbolT sym){
        listaTablasSimbolos.get(currentHash).add(sym);
    }


  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= navidad EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
System.out.println("Inicio de parseo");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // navidad ::= NT$0 navidadAux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		imprimirTablaSimbolos(); System.out.println("Fin de parseo");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("navidad",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // navidadAux ::= saco_function_definition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("navidadAux",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // navidadAux ::= navidadAux saco_function_definition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("navidadAux",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // saco_function_definition ::= saco_function_definition_aux calcetin_compound_statement FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("saco_function_definition",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // saco_function_definition_aux ::= SINREGALO MAINNAVIDAD ABRECUENTO CIERRACUENTO 
            {
              Object RESULT =null;
		definirHash("main");
                                                                                                         anadirSimbolo(new SymbolT("function", "integer", "Main"));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("saco_function_definition_aux",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              Object RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
definirHash(id.toString());
                                                                                                         anadirSimbolo(new SymbolT("function", ty.toString(), id.toString()));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$1",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // saco_function_definition_aux ::= gorro_navidad_type_specifier RECORRIDO PERSONA ABRECUENTO NT$1 pesebre_args CIERRACUENTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("saco_function_definition_aux",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // saco_function_definition_aux ::= gorro_navidad_type_specifier RECORRIDO PERSONA ABRECUENTO CIERRACUENTO 
            {
              Object RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		definirHash(id.toString());
                                                                                                         anadirSimbolo(new SymbolT("function", ty.toString(), id.toString()));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("saco_function_definition_aux",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // arbol_constant ::= l_NOEL 
            {
              Object RESULT =null;
		int l_intleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int l_intright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l_int = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = l_int;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // arbol_constant ::= l_NICOLAS 
            {
              Object RESULT =null;
		int l_floleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int l_floright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l_flo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = l_flo;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // arbol_constant ::= l_COLACHO 
            {
              Object RESULT =null;
		int l_chleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int l_chright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l_ch = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = l_ch;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // arbol_constant ::= l_SANTA 
            {
              Object RESULT =null;
		int l_stleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int l_stright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l_st = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = l_st;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // arbol_constant ::= l_t_CLAUS 
            {
              Object RESULT =null;
		int l_tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int l_tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l_t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = l_t;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // arbol_constant ::= l_f_CLAUS 
            {
              Object RESULT =null;
		int l_fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int l_fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l_f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = l_f;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // arbol_constant ::= NARIZROJA 
            {
              Object RESULT =null;
		int nilleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nilright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object nil = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = nil;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // gorro_navidad_type_specifier ::= SINREGALO 
            {
              Object RESULT =null;
		int srleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int srright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object sr = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = sr;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("gorro_navidad_type_specifier",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // gorro_navidad_type_specifier ::= COLACHO 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = c;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("gorro_navidad_type_specifier",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // gorro_navidad_type_specifier ::= SANTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = s;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("gorro_navidad_type_specifier",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // gorro_navidad_type_specifier ::= NOEL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = n;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("gorro_navidad_type_specifier",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // gorro_navidad_type_specifier ::= NICOLAS 
            {
              Object RESULT =null;
		int nileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int niright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ni = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = ni;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("gorro_navidad_type_specifier",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // gorro_navidad_type_specifier ::= CLAUS 
            {
              Object RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = cl;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("gorro_navidad_type_specifier",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement_risa_santa ::= calcetin_compound_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_risa_santa",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement_risa_santa ::= candelabro_assignment_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_risa_santa",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement_risa_santa ::= deseos_selection_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_risa_santa",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement_risa_santa ::= caramelo_iteration_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_risa_santa",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement_risa_santa ::= calcetin_jump_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_risa_santa",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement_risa_santa ::= lazo_io_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_risa_santa",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement_risa_santa ::= belen_function_call_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_risa_santa",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lazo_io_statement ::= NARRA ABRECUENTO incienzo_expression CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lazo_io_statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lazo_io_statement ::= ESCUCHA ABRECUENTO incienzo_expression CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lazo_io_statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // belen_function_call_statement ::= PERSONA ABRECUENTO reyes_magicos_list_expr CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("belen_function_call_statement",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // calcetin_compound_statement ::= ABREREGALO CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("calcetin_compound_statement",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // calcetin_compound_statement ::= ABREREGALO empaque_block_item_list CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("calcetin_compound_statement",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // empaque_block_item_list ::= carta_block_item 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("empaque_block_item_list",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // empaque_block_item_list ::= empaque_block_item_list carta_block_item 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("empaque_block_item_list",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // carta_block_item ::= statement_risa_santa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("carta_block_item",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // deseos_selection_statement ::= ELFO ABRECUENTO incienzo_expression CIERRACUENTO calcetin_compound_statement FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("deseos_selection_statement",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // deseos_selection_statement ::= ELFO ABRECUENTO incienzo_expression CIERRACUENTO calcetin_compound_statement DUENDE calcetin_compound_statement FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("deseos_selection_statement",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // deseos_selection_statement ::= ELFO ABRECUENTO incienzo_expression CIERRACUENTO calcetin_compound_statement tradicion_elif_statement DUENDE calcetin_compound_statement FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("deseos_selection_statement",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tradicion_elif_statement ::= HADA ABRECUENTO incienzo_expression CIERRACUENTO calcetin_compound_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tradicion_elif_statement",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tradicion_elif_statement ::= tradicion_elif_statement HADA ABRECUENTO incienzo_expression CIERRACUENTO calcetin_compound_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tradicion_elif_statement",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // caramelo_iteration_statement ::= HACE statement_risa_santa REVISA ABRECUENTO incienzo_expression CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("caramelo_iteration_statement",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // caramelo_iteration_statement ::= ENVUELVE ABRECUENTO candelabro_assignment_expression CHIMENEA leche_relational_expr CHIMENEA incienzo_expression CIERRACUENTO statement_risa_santa FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("caramelo_iteration_statement",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // calcetin_jump_statement ::= CORTA FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("calcetin_jump_statement",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // calcetin_jump_statement ::= ENVIA FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("calcetin_jump_statement",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // calcetin_jump_statement ::= ENVIA incienzo_expression FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("calcetin_jump_statement",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // nochebuena_initializer ::= ABREREGALO pino_initializer_list CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("nochebuena_initializer",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // nochebuena_initializer ::= ABREREGALO CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("nochebuena_initializer",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // pino_initializer_list ::= campanas_initializer_list_integer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pino_initializer_list",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // pino_initializer_list ::= guirnaldas_initializer_list_char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pino_initializer_list",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // campanas_initializer_list_integer ::= l_NOEL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("campanas_initializer_list_integer",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // campanas_initializer_list_integer ::= campanas_initializer_list_integer CHIMENEA l_NOEL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("campanas_initializer_list_integer",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // guirnaldas_initializer_list_char ::= l_COLACHO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("guirnaldas_initializer_list_char",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // guirnaldas_initializer_list_char ::= guirnaldas_initializer_list_char CHIMENEA l_COLACHO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("guirnaldas_initializer_list_char",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // estrella_assign_array ::= gorro_navidad_type_specifier PERSONA ABREEMPAQUE CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		anadirSimbolo(new SymbolT("variable local", ty.toString(), id.toString()));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estrella_assign_array",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // estrella_assign_array ::= gorro_navidad_type_specifier PERSONA ABREEMPAQUE incienzo_expression CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		anadirSimbolo(new SymbolT("variable local", ty.toString(), id.toString()));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estrella_assign_array",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // candelabro_assignment_expression ::= gorro_navidad_type_specifier PERSONA ENTREGA incienzo_expression FINREGALO 
            {
              Object RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		anadirSimbolo(new SymbolT("variable local", ty.toString(), id.toString()));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("candelabro_assignment_expression",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // candelabro_assignment_expression ::= gorro_navidad_type_specifier PERSONA FINREGALO 
            {
              Object RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		anadirSimbolo(new SymbolT("variable local", ty.toString(), id.toString()));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("candelabro_assignment_expression",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // candelabro_assignment_expression ::= estrella_assign_array FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("candelabro_assignment_expression",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // candelabro_assignment_expression ::= estrella_assign_array ENTREGA nochebuena_initializer FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("candelabro_assignment_expression",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // candelabro_assignment_expression ::= estrella_assign_array ENTREGA incienzo_expression FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("candelabro_assignment_expression",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // pesebre_args ::= pesebre_arg 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pesebre_args",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // pesebre_args ::= pesebre_args CHIMENEA pesebre_arg 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pesebre_args",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // pesebre_arg ::= gorro_navidad_type_specifier PERSONA 
            {
              Object RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		anadirSimbolo(new SymbolT("argumento de funcion", ty.toString(), id.toString()));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pesebre_arg",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // pesebre_arg ::= gorro_navidad_type_specifier PERSONA ABREEMPAQUE incienzo_expression CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		anadirSimbolo(new SymbolT("argumento de funcion", ty.toString(), id.toString()));
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pesebre_arg",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // reyes_magicos_list_expr ::= PERSONA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reyes_magicos_list_expr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // reyes_magicos_list_expr ::= reyes_magicos_list_expr CHIMENEA PERSONA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reyes_magicos_list_expr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // incienzo_expression ::= arbol_constant 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // incienzo_expression ::= PERSONA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // incienzo_expression ::= ABRECUENTO incienzo_expression CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // incienzo_expression ::= belen_function_call_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // incienzo_expression ::= bastoncillo_arithmetic_expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // incienzo_expression ::= galleta_logic_expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // incienzo_expression ::= leche_relational_expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // diciembre_operation_array ::= QUIEN estrella_assign_array 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("diciembre_operation_array",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // diciembre_operation_array ::= GRINCH estrella_assign_array 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("diciembre_operation_array",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // bastoncillo_arithmetic_expr ::= incienzo_expression TRUENO incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // bastoncillo_arithmetic_expr ::= incienzo_expression RODOLFO incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // bastoncillo_arithmetic_expr ::= incienzo_expression JUGUETON incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // bastoncillo_arithmetic_expr ::= incienzo_expression RELAMPAGO incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // bastoncillo_arithmetic_expr ::= incienzo_expression CUPIDO incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // bastoncillo_arithmetic_expr ::= incienzo_expression COMETA incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // bastoncillo_arithmetic_expr ::= QUIEN PERSONA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // bastoncillo_arithmetic_expr ::= GRINCH PERSONA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // bastoncillo_arithmetic_expr ::= diciembre_operation_array 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // galleta_logic_expr ::= incienzo_expression GASPAR incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("galleta_logic_expr",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // galleta_logic_expr ::= incienzo_expression MELCHOR incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("galleta_logic_expr",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // galleta_logic_expr ::= BALTASAR incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("galleta_logic_expr",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // leche_relational_expr ::= incienzo_expression ALABASTRO incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("leche_relational_expr",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // leche_relational_expr ::= incienzo_expression EVERGEEN incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("leche_relational_expr",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // leche_relational_expr ::= incienzo_expression MINSTIX incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("leche_relational_expr",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // leche_relational_expr ::= incienzo_expression UPATREE incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("leche_relational_expr",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // leche_relational_expr ::= incienzo_expression OPENSLAE incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("leche_relational_expr",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // leche_relational_expr ::= incienzo_expression MARY incienzo_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("leche_relational_expr",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
