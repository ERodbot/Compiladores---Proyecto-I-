
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package LexicalAnalizer;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\003\012\000\002\003\011\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\007\007\000\002\007\007\000\002\010\007\000\002\011" +
    "\004\000\002\011\005\000\002\012\003\000\002\012\004" +
    "\000\002\013\003\000\002\014\010\000\002\014\012\000" +
    "\002\014\013\000\002\014\010\000\002\015\007\000\002" +
    "\015\010\000\002\016\011\000\002\016\014\000\002\017" +
    "\004\000\002\017\004\000\002\017\005\000\002\020\005" +
    "\000\002\020\004\000\002\021\003\000\002\021\003\000" +
    "\002\022\003\000\002\022\005\000\002\023\003\000\002" +
    "\023\005\000\002\024\006\000\002\024\005\000\002\024" +
    "\007\000\002\024\006\000\002\025\007\000\002\025\004" +
    "\000\002\025\006\000\002\025\006\000\002\026\004\000" +
    "\002\026\006\000\002\027\004\000\002\027\006\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\004\000\002\031\004\000\002\031\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\004\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\315\000\016\004\007\005\010\006\011\007\014\010" +
    "\004\037\012\001\002\000\010\013\ufff0\064\ufff0\065\ufff0" +
    "\001\002\000\020\002\316\004\007\005\010\006\011\007" +
    "\014\010\004\037\012\001\002\000\004\064\015\001\002" +
    "\000\010\013\ufff2\064\ufff2\065\ufff2\001\002\000\010\013" +
    "\ufff1\064\ufff1\065\ufff1\001\002\000\010\013\ufff3\064\ufff3" +
    "\065\ufff3\001\002\000\010\013\ufff5\064\ufff5\065\ufff5\001" +
    "\002\000\020\002\000\004\000\005\000\006\000\007\000" +
    "\010\000\037\000\001\002\000\010\013\ufff4\064\ufff4\065" +
    "\ufff4\001\002\000\004\065\016\001\002\000\004\011\017" +
    "\001\002\000\020\004\007\005\010\006\011\007\014\010" +
    "\004\012\022\037\012\001\002\000\006\012\311\017\310" +
    "\001\002\000\004\065\307\001\002\000\004\015\023\001" +
    "\002\000\042\004\007\005\010\006\011\007\014\010\004" +
    "\015\023\016\030\024\040\027\052\030\026\032\032\033" +
    "\044\034\045\035\050\037\012\065\035\001\002\000\004" +
    "\066\025\001\002\000\020\002\ufffd\004\ufffd\005\ufffd\006" +
    "\ufffd\007\ufffd\010\ufffd\037\ufffd\001\002\000\040\004\007" +
    "\005\010\006\011\007\014\010\004\015\023\024\040\027" +
    "\052\030\026\032\032\033\044\034\045\035\050\037\012" +
    "\065\035\001\002\000\046\004\uffe9\005\uffe9\006\uffe9\007" +
    "\uffe9\010\uffe9\015\uffe9\016\uffe9\024\uffe9\027\uffe9\030\uffe9" +
    "\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\037\uffe9\065" +
    "\uffe9\066\uffe9\001\002\000\052\004\uffe5\005\uffe5\006\uffe5" +
    "\007\uffe5\010\uffe5\015\uffe5\016\uffe5\024\uffe5\025\uffe5\026" +
    "\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5" +
    "\035\uffe5\037\uffe5\065\uffe5\066\uffe5\001\002\000\006\013" +
    "\266\065\265\001\002\000\034\011\063\020\126\021\122" +
    "\022\140\023\124\036\134\050\136\052\137\053\133\054" +
    "\066\055\061\065\130\066\263\001\002\000\006\051\240" +
    "\066\241\001\002\000\046\004\uffed\005\uffed\006\uffed\007" +
    "\uffed\010\uffed\015\uffed\016\uffed\024\uffed\027\uffed\030\uffed" +
    "\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\037\uffed\065" +
    "\uffed\066\uffed\001\002\000\004\011\155\001\002\000\046" +
    "\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\015\uffec\016" +
    "\uffec\024\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec" +
    "\034\uffec\035\uffec\037\uffec\065\uffec\066\uffec\001\002\000" +
    "\042\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\015\uffe3" +
    "\016\uffe3\024\uffe3\027\uffe3\030\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\037\uffe3\065\uffe3\001\002\000\004\011\212" +
    "\001\002\000\042\004\007\005\010\006\011\007\014\010" +
    "\004\015\023\016\210\024\040\027\052\030\026\032\032" +
    "\033\044\034\045\035\050\037\012\065\035\001\002\000" +
    "\046\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\015\uffef" +
    "\016\uffef\024\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033" +
    "\uffef\034\uffef\035\uffef\037\uffef\065\uffef\066\uffef\001\002" +
    "\000\042\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\015" +
    "\uffe1\016\uffe1\024\uffe1\027\uffe1\030\uffe1\032\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\037\uffe1\065\uffe1\001\002\000\004\066" +
    "\207\001\002\000\004\011\203\001\002\000\046\004\uffea" +
    "\005\uffea\006\uffea\007\uffea\010\uffea\015\uffea\016\uffea\024" +
    "\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea" +
    "\035\uffea\037\uffea\065\uffea\066\uffea\001\002\000\046\004" +
    "\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\015\uffeb\016\uffeb" +
    "\024\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034" +
    "\uffeb\035\uffeb\037\uffeb\065\uffeb\066\uffeb\001\002\000\004" +
    "\011\174\001\002\000\046\004\uffee\005\uffee\006\uffee\007" +
    "\uffee\010\uffee\015\uffee\016\uffee\024\uffee\027\uffee\030\uffee" +
    "\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee\037\uffee\065" +
    "\uffee\066\uffee\001\002\000\004\011\053\001\002\000\016" +
    "\004\007\005\010\006\011\007\014\010\004\037\012\001" +
    "\002\000\004\017\055\001\002\000\016\011\063\020\060" +
    "\021\062\054\066\055\061\065\056\001\002\000\050\011" +
    "\155\012\uffba\014\uffba\017\uffba\040\uffba\041\uffba\042\uffba" +
    "\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba\056\uffba\057" +
    "\uffba\060\uffba\061\uffba\062\uffba\063\uffba\066\uffba\001\002" +
    "\000\046\012\uffbb\014\uffbb\017\uffbb\040\uffbb\041\uffbb\042" +
    "\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\056\uffbb" +
    "\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\066\uffbb\001" +
    "\002\000\046\012\uffb8\014\uffb8\017\uffb8\040\uffb8\041\uffb8" +
    "\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\056" +
    "\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\066\uffb8" +
    "\001\002\000\004\065\173\001\002\000\046\012\uffb7\014" +
    "\uffb7\017\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7" +
    "\045\uffb7\046\uffb7\047\uffb7\056\uffb7\057\uffb7\060\uffb7\061" +
    "\uffb7\062\uffb7\063\uffb7\066\uffb7\001\002\000\016\011\063" +
    "\020\060\021\062\054\066\055\061\065\056\001\002\000" +
    "\004\017\121\001\002\000\032\040\100\041\071\042\104" +
    "\043\073\044\074\045\101\056\077\057\103\060\076\061" +
    "\075\062\072\063\102\001\002\000\004\065\070\001\002" +
    "\000\046\012\uffb9\014\uffb9\017\uffb9\040\uffb9\041\uffb9\042" +
    "\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\056\uffb9" +
    "\057\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\066\uffb9\001" +
    "\002\000\046\012\uffa6\014\uffa6\017\uffa6\040\uffa6\041\uffa6" +
    "\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\056" +
    "\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6\063\uffa6\066\uffa6" +
    "\001\002\000\016\011\063\020\060\021\062\054\066\055" +
    "\061\065\056\001\002\000\016\011\063\020\060\021\062" +
    "\054\066\055\061\065\056\001\002\000\016\011\063\020" +
    "\060\021\062\054\066\055\061\065\056\001\002\000\016" +
    "\011\063\020\060\021\062\054\066\055\061\065\056\001" +
    "\002\000\016\011\063\020\060\021\062\054\066\055\061" +
    "\065\056\001\002\000\016\011\063\020\060\021\062\054" +
    "\066\055\061\065\056\001\002\000\016\011\063\020\060" +
    "\021\062\054\066\055\061\065\056\001\002\000\016\011" +
    "\063\020\060\021\062\054\066\055\061\065\056\001\002" +
    "\000\016\011\063\020\060\021\062\054\066\055\061\065" +
    "\056\001\002\000\016\011\063\020\060\021\062\054\066" +
    "\055\061\065\056\001\002\000\016\011\063\020\060\021" +
    "\062\054\066\055\061\065\056\001\002\000\016\011\063" +
    "\020\060\021\062\054\066\055\061\065\056\001\002\000" +
    "\030\012\uff9e\017\uff9e\046\uff9e\047\uff9e\056\077\057\103" +
    "\060\076\061\075\062\072\063\102\066\uff9e\001\002\000" +
    "\046\012\uffad\014\uffad\017\uffad\040\uffad\041\uffad\042\uffad" +
    "\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad\056\uffad\057" +
    "\uffad\060\076\061\075\062\072\063\102\066\uffad\001\002" +
    "\000\046\012\uffa9\014\uffa9\017\uffa9\040\uffa9\041\uffa9\042" +
    "\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\056\uffa9" +
    "\057\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9\066\uffa9\001" +
    "\002\000\030\012\uff9d\017\uff9d\046\uff9d\047\uff9d\056\077" +
    "\057\103\060\076\061\075\062\072\063\102\066\uff9d\001" +
    "\002\000\030\012\uffa1\017\uffa1\046\uffa1\047\uffa1\056\077" +
    "\057\103\060\076\061\075\062\072\063\102\066\uffa1\001" +
    "\002\000\046\012\uffac\014\uffac\017\uffac\040\uffac\041\uffac" +
    "\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\056" +
    "\uffac\057\uffac\060\076\061\075\062\072\063\102\066\uffac" +
    "\001\002\000\046\012\uffaa\014\uffaa\017\uffaa\040\uffaa\041" +
    "\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa" +
    "\056\uffaa\057\uffaa\060\uffaa\061\uffaa\062\072\063\102\066" +
    "\uffaa\001\002\000\046\012\uffab\014\uffab\017\uffab\040\uffab" +
    "\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047" +
    "\uffab\056\uffab\057\uffab\060\uffab\061\uffab\062\072\063\102" +
    "\066\uffab\001\002\000\030\012\uff9c\017\uff9c\046\uff9c\047" +
    "\uff9c\056\077\057\103\060\076\061\075\062\072\063\102" +
    "\066\uff9c\001\002\000\030\012\uff9f\017\uff9f\046\uff9f\047" +
    "\uff9f\056\077\057\103\060\076\061\075\062\072\063\102" +
    "\066\uff9f\001\002\000\046\012\uffa8\014\uffa8\017\uffa8\040" +
    "\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8" +
    "\047\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8\063" +
    "\uffa8\066\uffa8\001\002\000\030\012\uffa0\017\uffa0\046\uffa0" +
    "\047\uffa0\056\077\057\103\060\076\061\075\062\072\063" +
    "\102\066\uffa0\001\002\000\032\011\063\020\126\021\122" +
    "\022\140\023\124\036\134\050\136\052\137\053\133\054" +
    "\066\055\061\065\130\001\002\000\036\012\ufffc\040\uffb7" +
    "\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\056\uffb7\057" +
    "\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7\066\ufffc\001\002" +
    "\000\006\012\uffbe\066\uffbe\001\002\000\006\012\ufffa\066" +
    "\ufffa\001\002\000\042\012\uffbc\040\uffb9\041\uffb9\042\uffb9" +
    "\043\uffb9\044\uffb9\045\uffb9\046\uffb3\047\uffb3\056\uffb9\057" +
    "\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\066\uffbc\001\002" +
    "\000\036\012\ufffb\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044" +
    "\uffb8\045\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8" +
    "\063\uffb8\066\ufffb\001\002\000\012\012\uffbf\046\uffb5\047" +
    "\uffb5\066\uffbf\001\002\000\044\011\155\012\uffbd\040\uffba" +
    "\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffb4\047" +
    "\uffb4\056\uffba\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba" +
    "\066\uffbd\001\002\000\036\012\uffc1\040\uffbb\041\uffbb\042" +
    "\uffbb\043\uffbb\044\uffbb\045\uffbb\056\uffbb\057\uffbb\060\uffbb" +
    "\061\uffbb\062\uffbb\063\uffbb\066\uffc1\001\002\000\004\012" +
    "\166\001\002\000\012\012\ufff7\046\uffb1\047\uffb1\066\ufff7" +
    "\001\002\000\006\012\ufff6\066\ufff6\001\002\000\006\046" +
    "\152\047\151\001\002\000\024\011\063\020\060\021\062" +
    "\050\136\052\142\053\145\054\066\055\061\065\143\001" +
    "\002\000\012\012\ufff8\046\uffb2\047\uffb2\066\ufff8\001\002" +
    "\000\006\012\ufff9\066\ufff9\001\002\000\012\012\uffc0\046" +
    "\uffb6\047\uffb6\066\uffc0\001\002\000\012\012\uffb2\046\uffb2" +
    "\047\uffb2\066\uffb2\001\002\000\044\011\155\012\uffb4\040" +
    "\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffb4" +
    "\047\uffb4\056\uffba\057\uffba\060\uffba\061\uffba\062\uffba\063" +
    "\uffba\066\uffb4\001\002\000\012\012\uffa2\046\uffa2\047\uffa2" +
    "\066\uffa2\001\002\000\012\012\uffb1\046\uffb1\047\uffb1\066" +
    "\uffb1\001\002\000\012\012\uffb5\046\uffb5\047\uffb5\066\uffb5" +
    "\001\002\000\012\012\uffb6\046\uffb6\047\uffb6\066\uffb6\001" +
    "\002\000\042\012\uffb3\040\uffb9\041\uffb9\042\uffb9\043\uffb9" +
    "\044\uffb9\045\uffb9\046\uffb3\047\uffb3\056\uffb9\057\uffb9\060" +
    "\uffb9\061\uffb9\062\uffb9\063\uffb9\066\uffb3\001\002\000\024" +
    "\011\063\020\060\021\062\050\136\052\142\053\145\054" +
    "\066\055\061\065\143\001\002\000\024\011\063\020\060" +
    "\021\062\050\136\052\142\053\145\054\066\055\061\065" +
    "\143\001\002\000\012\012\uffa4\046\uffa4\047\151\066\uffa4" +
    "\001\002\000\012\012\uffa3\046\uffa3\047\uffa3\066\uffa3\001" +
    "\002\000\016\004\007\005\010\006\011\007\014\010\004" +
    "\037\012\001\002\000\004\065\165\001\002\000\006\012" +
    "\161\017\160\001\002\000\016\004\007\005\010\006\011" +
    "\007\014\010\004\037\012\001\002\000\004\066\162\001" +
    "\002\000\110\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6" +
    "\012\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\024\uffe6\027" +
    "\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6" +
    "\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045" +
    "\uffe6\046\uffe6\047\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6" +
    "\062\uffe6\063\uffe6\065\uffe6\066\uffe6\001\002\000\004\065" +
    "\164\001\002\000\006\012\uffc2\017\uffc2\001\002\000\006" +
    "\012\uffc3\017\uffc3\001\002\000\040\004\007\005\010\006" +
    "\011\007\014\010\004\015\023\024\040\027\052\030\026" +
    "\032\032\033\044\034\045\035\050\037\012\065\035\001" +
    "\002\000\004\066\170\001\002\000\046\004\uffd9\005\uffd9" +
    "\006\uffd9\007\uffd9\010\uffd9\015\uffd9\016\uffd9\024\uffd9\027" +
    "\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9" +
    "\037\uffd9\065\uffd9\066\uffd9\001\002\000\020\012\172\056" +
    "\077\057\103\060\076\061\075\062\072\063\102\001\002" +
    "\000\046\012\uffa5\014\uffa5\017\uffa5\040\uffa5\041\uffa5\042" +
    "\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\056\uffa5" +
    "\057\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5\066\uffa5\001" +
    "\002\000\046\012\uffa7\014\uffa7\017\uffa7\040\uffa7\041\uffa7" +
    "\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\056" +
    "\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7\066\uffa7" +
    "\001\002\000\006\022\177\065\176\001\002\000\004\012" +
    "\201\001\002\000\006\011\155\012\uffb0\001\002\000\004" +
    "\012\uffae\001\002\000\004\012\uffaf\001\002\000\004\066" +
    "\202\001\002\000\046\004\uffe7\005\uffe7\006\uffe7\007\uffe7" +
    "\010\uffe7\015\uffe7\016\uffe7\024\uffe7\027\uffe7\030\uffe7\031" +
    "\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\037\uffe7\065\uffe7" +
    "\066\uffe7\001\002\000\006\022\177\065\176\001\002\000" +
    "\004\012\205\001\002\000\004\066\206\001\002\000\046" +
    "\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\015\uffe8\016" +
    "\uffe8\024\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8" +
    "\034\uffe8\035\uffe8\037\uffe8\065\uffe8\066\uffe8\001\002\000" +
    "\046\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\015\uffd8" +
    "\016\uffd8\024\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033" +
    "\uffd8\034\uffd8\035\uffd8\037\uffd8\065\uffd8\066\uffd8\001\002" +
    "\000\052\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\015" +
    "\uffe4\016\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4" +
    "\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\037\uffe4\065" +
    "\uffe4\066\uffe4\001\002\000\042\004\uffe2\005\uffe2\006\uffe2" +
    "\007\uffe2\010\uffe2\015\uffe2\016\uffe2\024\uffe2\027\uffe2\030" +
    "\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\037\uffe2\065\uffe2" +
    "\001\002\000\024\011\063\020\060\021\062\050\136\052" +
    "\142\053\145\054\066\055\061\065\143\001\002\000\010" +
    "\012\214\046\152\047\151\001\002\000\004\015\023\001" +
    "\002\000\010\025\221\026\217\066\216\001\002\000\046" +
    "\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\015\uffe0\016" +
    "\uffe0\024\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0" +
    "\034\uffe0\035\uffe0\037\uffe0\065\uffe0\066\uffe0\001\002\000" +
    "\004\015\023\001\002\000\052\004\uffdd\005\uffdd\006\uffdd" +
    "\007\uffdd\010\uffdd\015\uffdd\016\uffdd\024\uffdd\025\227\026" +
    "\226\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd" +
    "\035\uffdd\037\uffdd\065\uffdd\066\uffdd\001\002\000\004\011" +
    "\222\001\002\000\024\011\063\020\060\021\062\050\136" +
    "\052\142\053\145\054\066\055\061\065\143\001\002\000" +
    "\010\012\224\046\152\047\151\001\002\000\004\015\023" +
    "\001\002\000\052\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010" +
    "\uffdc\015\uffdc\016\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\037" +
    "\uffdc\065\uffdc\066\uffdc\001\002\000\004\015\023\001\002" +
    "\000\004\011\230\001\002\000\024\011\063\020\060\021" +
    "\062\050\136\052\142\053\145\054\066\055\061\065\143" +
    "\001\002\000\010\012\232\046\152\047\151\001\002\000" +
    "\004\015\023\001\002\000\052\004\uffdb\005\uffdb\006\uffdb" +
    "\007\uffdb\010\uffdb\015\uffdb\016\uffdb\024\uffdb\025\uffdb\026" +
    "\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb" +
    "\035\uffdb\037\uffdb\065\uffdb\066\uffdb\001\002\000\004\066" +
    "\235\001\002\000\046\004\uffde\005\uffde\006\uffde\007\uffde" +
    "\010\uffde\015\uffde\016\uffde\024\uffde\027\uffde\030\uffde\031" +
    "\uffde\032\uffde\033\uffde\034\uffde\035\uffde\037\uffde\065\uffde" +
    "\066\uffde\001\002\000\004\066\237\001\002\000\046\004" +
    "\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\015\uffdf\016\uffdf" +
    "\024\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034" +
    "\uffdf\035\uffdf\037\uffdf\065\uffdf\066\uffdf\001\002\000\034" +
    "\011\063\015\243\020\126\021\122\022\140\023\124\036" +
    "\134\050\136\052\137\053\133\054\066\055\061\065\130" +
    "\001\002\000\050\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010" +
    "\uffc8\015\uffc8\016\uffc8\017\uffc8\024\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\037\uffc8\065" +
    "\uffc8\066\uffc8\001\002\000\004\066\261\001\002\000\010" +
    "\016\246\021\251\023\247\001\002\000\004\066\245\001" +
    "\002\000\050\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6" +
    "\015\uffc6\016\uffc6\017\uffc6\024\uffc6\027\uffc6\030\uffc6\031" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\037\uffc6\065\uffc6" +
    "\066\uffc6\001\002\000\004\066\uffd4\001\002\000\006\016" +
    "\uffcf\017\uffcf\001\002\000\006\016\uffd2\017\257\001\002" +
    "\000\006\016\uffd1\017\uffd1\001\002\000\006\016\uffd3\017" +
    "\255\001\002\000\004\016\254\001\002\000\004\066\uffd5" +
    "\001\002\000\004\021\256\001\002\000\006\016\uffd0\017" +
    "\uffd0\001\002\000\004\023\260\001\002\000\006\016\uffce" +
    "\017\uffce\001\002\000\050\004\uffc7\005\uffc7\006\uffc7\007" +
    "\uffc7\010\uffc7\015\uffc7\016\uffc7\017\uffc7\024\uffc7\027\uffc7" +
    "\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\037" +
    "\uffc7\065\uffc7\066\uffc7\001\002\000\004\066\264\001\002" +
    "\000\046\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\015" +
    "\uffd7\016\uffd7\024\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7" +
    "\033\uffd7\034\uffd7\035\uffd7\037\uffd7\065\uffd7\066\uffd7\001" +
    "\002\000\046\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6" +
    "\015\uffd6\016\uffd6\024\uffd6\027\uffd6\030\uffd6\031\uffd6\032" +
    "\uffd6\033\uffd6\034\uffd6\035\uffd6\037\uffd6\065\uffd6\066\uffd6" +
    "\001\002\000\006\013\273\051\272\001\002\000\020\011" +
    "\063\014\270\020\060\021\062\054\066\055\061\065\056" +
    "\001\002\000\020\014\271\056\077\057\103\060\076\061" +
    "\075\062\072\063\102\001\002\000\006\051\uffcc\066\uffcc" +
    "\001\002\000\006\051\uffca\066\uffca\001\002\000\032\011" +
    "\063\020\126\021\122\022\140\023\124\036\134\050\136" +
    "\052\137\053\133\054\066\055\061\065\130\001\002\000" +
    "\020\011\063\014\275\020\060\021\062\054\066\055\061" +
    "\065\056\001\002\000\020\014\276\056\077\057\103\060" +
    "\076\061\075\062\072\063\102\001\002\000\006\051\uffcd" +
    "\066\uffcd\001\002\000\006\051\uffcb\066\uffcb\001\002\000" +
    "\004\066\300\001\002\000\050\004\uffc9\005\uffc9\006\uffc9" +
    "\007\uffc9\010\uffc9\015\uffc9\016\uffc9\017\uffc9\024\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9" +
    "\037\uffc9\065\uffc9\066\uffc9\001\002\000\004\031\302\001" +
    "\002\000\004\011\303\001\002\000\024\011\063\020\060" +
    "\021\062\050\136\052\142\053\145\054\066\055\061\065" +
    "\143\001\002\000\010\012\305\046\152\047\151\001\002" +
    "\000\004\066\306\001\002\000\046\004\uffda\005\uffda\006" +
    "\uffda\007\uffda\010\uffda\015\uffda\016\uffda\024\uffda\027\uffda" +
    "\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\037" +
    "\uffda\065\uffda\066\uffda\001\002\000\006\012\uffc5\017\uffc5" +
    "\001\002\000\016\004\007\005\010\006\011\007\014\010" +
    "\004\037\012\001\002\000\004\015\023\001\002\000\004" +
    "\066\313\001\002\000\020\002\ufffe\004\ufffe\005\ufffe\006" +
    "\ufffe\007\ufffe\010\ufffe\037\ufffe\001\002\000\004\065\315" +
    "\001\002\000\006\012\uffc4\017\uffc4\001\002\000\004\002" +
    "\001\001\002\000\020\002\uffff\004\uffff\005\uffff\006\uffff" +
    "\007\uffff\010\uffff\037\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\315\000\010\002\004\003\012\005\005\001\001\000" +
    "\002\001\001\000\006\003\316\005\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\020\026" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\023\001\001\000\032\005\030\006\042\007\045\010" +
    "\026\011\041\012\040\013\036\014\033\016\035\017\046" +
    "\024\032\025\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\005\030\006\300\007\045\010\026\011\041" +
    "\014\033\016\035\017\046\024\032\025\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\004\122\010\124\030\261\031\130\032\140\033\126\034" +
    "\064\035\134\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\005\030\006\042\007\045\010\026" +
    "\011\041\013\210\014\033\016\035\017\046\024\032\025" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\030\024\032\025\053\001\001\000\002\001" +
    "\001\000\012\010\066\031\056\033\063\034\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\066\031\056" +
    "\034\170\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\066\031\056\034\117\001\001\000\010\010\066\031" +
    "\056\034\116\001\001\000\010\010\066\031\056\034\115" +
    "\001\001\000\010\010\066\031\056\034\114\001\001\000" +
    "\010\010\066\031\056\034\113\001\001\000\010\010\066" +
    "\031\056\034\112\001\001\000\010\010\066\031\056\034" +
    "\111\001\001\000\010\010\066\031\056\034\110\001\001" +
    "\000\010\010\066\031\056\034\107\001\001\000\010\010" +
    "\066\031\056\034\106\001\001\000\010\010\066\031\056" +
    "\034\105\001\001\000\010\010\066\031\056\034\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\004" +
    "\122\010\124\030\131\031\130\032\140\033\126\034\064" +
    "\035\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\010\147\031\056\032\146\033\145\034\064\035" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\010\147\031\056\032\146\033" +
    "\145\034\064\035\153\001\001\000\016\010\147\031\056" +
    "\032\146\033\145\034\064\035\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\155\027\156\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\005\030\006" +
    "\166\007\045\010\026\011\041\014\033\016\035\017\046" +
    "\024\032\025\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\177\036\174\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\177\036\203\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\010\147\031\056\032\146\033\145\034\064\035\212" +
    "\001\001\000\002\001\001\000\004\011\214\001\001\000" +
    "\004\015\217\001\001\000\002\001\001\000\004\011\235" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\010" +
    "\147\031\056\032\146\033\145\034\064\035\222\001\001" +
    "\000\002\001\001\000\004\011\224\001\001\000\002\001" +
    "\001\000\004\011\233\001\001\000\002\001\001\000\016" +
    "\010\147\031\056\032\146\033\145\034\064\035\230\001" +
    "\001\000\002\001\001\000\004\011\232\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\004\122\010\124\020\241" +
    "\030\243\031\130\032\140\033\126\034\064\035\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\021\252" +
    "\022\251\023\247\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\066\031\056\034\266\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\004\122" +
    "\010\124\030\276\031\130\032\140\033\126\034\064\035" +
    "\134\001\001\000\010\010\066\031\056\034\273\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\010\147\031\056\032\146\033\145\034" +
    "\064\035\303\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\313\001" +
    "\001\000\004\011\311\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


  LexerCup lex;
  @SuppressWarnings("deprecation")
  public Sintax(LexerCup lex){
    this.lex=lex;
    this.symbolFactory= new DefaultSymbolFactory();
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {


    public void uno(){
        System.out.println("123");
    }
    public void dos(){
        System.out.println("456");
    }

  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main ::= saco_function_definition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main ::= main saco_function_definition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // saco_function_definition ::= gorro_navidad_type_specifier RECORRIDO PERSONA ABRECUENTO pesebre_args CIERRACUENTO calcetin_compound_statement FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("saco_function_definition",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // saco_function_definition ::= gorro_navidad_type_specifier RECORRIDO PERSONA ABRECUENTO CIERRACUENTO calcetin_compound_statement FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("saco_function_definition",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // arbol_constant ::= l_NOEL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // arbol_constant ::= l_NICOLAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // arbol_constant ::= l_COLACHO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // arbol_constant ::= l_SANTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // arbol_constant ::= l_t_CLAUS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // arbol_constant ::= l_f_CLAUS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // arbol_constant ::= NARIZROJA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("arbol_constant",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // gorro_navidad_type_specifier ::= SINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("gorro_navidad_type_specifier",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // gorro_navidad_type_specifier ::= COLACHO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("gorro_navidad_type_specifier",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // gorro_navidad_type_specifier ::= SANTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("gorro_navidad_type_specifier",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // gorro_navidad_type_specifier ::= NOEL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("gorro_navidad_type_specifier",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // gorro_navidad_type_specifier ::= NICOLAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("gorro_navidad_type_specifier",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // gorro_navidad_type_specifier ::= CLAUS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("gorro_navidad_type_specifier",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // risa_santa ::= calcetin_compound_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("risa_santa",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // risa_santa ::= candelabro_assignment_expression 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("risa_santa",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // risa_santa ::= deseos_selection_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("risa_santa",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // risa_santa ::= caramelo_iteration_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("risa_santa",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // risa_santa ::= calcetin_jump_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("risa_santa",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // risa_santa ::= lazo_io_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("risa_santa",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // risa_santa ::= belen_function_call_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("risa_santa",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // lazo_io_statement ::= NARRA ABRECUENTO pez_general_string_expr CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lazo_io_statement",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lazo_io_statement ::= ESCUCHA ABRECUENTO pez_general_string_expr CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("lazo_io_statement",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // belen_function_call_statement ::= PERSONA ABRECUENTO reyes_magicos_list_expr CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("belen_function_call_statement",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // calcetin_compound_statement ::= ABREREGALO CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("calcetin_compound_statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // calcetin_compound_statement ::= ABREREGALO empaque_block_item_list CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("calcetin_compound_statement",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // empaque_block_item_list ::= carta_block_item 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("empaque_block_item_list",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // empaque_block_item_list ::= empaque_block_item_list carta_block_item 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("empaque_block_item_list",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // carta_block_item ::= risa_santa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("carta_block_item",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // deseos_selection_statement ::= ELFO ABRECUENTO mula_general_boolean_expr CIERRACUENTO calcetin_compound_statement FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("deseos_selection_statement",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // deseos_selection_statement ::= ELFO ABRECUENTO mula_general_boolean_expr CIERRACUENTO calcetin_compound_statement DUENDE calcetin_compound_statement FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("deseos_selection_statement",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // deseos_selection_statement ::= ELFO ABRECUENTO mula_general_boolean_expr CIERRACUENTO calcetin_compound_statement tradicion_elif_statement DUENDE calcetin_compound_statement FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("deseos_selection_statement",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // deseos_selection_statement ::= ELFO ABRECUENTO mula_general_boolean_expr CIERRACUENTO calcetin_compound_statement tradicion_elif_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("deseos_selection_statement",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tradicion_elif_statement ::= HADA ABRECUENTO mula_general_boolean_expr CIERRACUENTO calcetin_compound_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tradicion_elif_statement",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tradicion_elif_statement ::= tradicion_elif_statement HADA ABRECUENTO mula_general_boolean_expr CIERRACUENTO calcetin_compound_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tradicion_elif_statement",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // caramelo_iteration_statement ::= HACE risa_santa REVISA ABRECUENTO mula_general_boolean_expr CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("caramelo_iteration_statement",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // caramelo_iteration_statement ::= ENVUELVE ABRECUENTO candelabro_assignment_expression CHIMENEA leche_relational_expr CHIMENEA incienzo_expression CIERRACUENTO risa_santa FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("caramelo_iteration_statement",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // calcetin_jump_statement ::= CORTA FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("calcetin_jump_statement",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // calcetin_jump_statement ::= ENVIA FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("calcetin_jump_statement",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // calcetin_jump_statement ::= ENVIA incienzo_expression FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("calcetin_jump_statement",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // nochebuena_initializer ::= ABREREGALO pino_initializer_list CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("nochebuena_initializer",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // nochebuena_initializer ::= ABREREGALO CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("nochebuena_initializer",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // pino_initializer_list ::= campanas_initializer_list_integer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pino_initializer_list",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // pino_initializer_list ::= guirnaldas_initializer_list_char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pino_initializer_list",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // campanas_initializer_list_integer ::= l_NOEL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("campanas_initializer_list_integer",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // campanas_initializer_list_integer ::= campanas_initializer_list_integer CHIMENEA l_NOEL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("campanas_initializer_list_integer",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // guirnaldas_initializer_list_char ::= l_COLACHO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("guirnaldas_initializer_list_char",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // guirnaldas_initializer_list_char ::= guirnaldas_initializer_list_char CHIMENEA l_COLACHO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("guirnaldas_initializer_list_char",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // estrella_assign_array ::= gorro_navidad_type_specifier PERSONA ABREEMPAQUE CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estrella_assign_array",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // estrella_assign_array ::= gorro_navidad_type_specifier ABREEMPAQUE CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estrella_assign_array",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // estrella_assign_array ::= gorro_navidad_type_specifier PERSONA ABREEMPAQUE burro_general_numerical_expr CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estrella_assign_array",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // estrella_assign_array ::= gorro_navidad_type_specifier ABREEMPAQUE burro_general_numerical_expr CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("estrella_assign_array",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // candelabro_assignment_expression ::= gorro_navidad_type_specifier PERSONA ENTREGA incienzo_expression FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("candelabro_assignment_expression",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // candelabro_assignment_expression ::= estrella_assign_array FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("candelabro_assignment_expression",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // candelabro_assignment_expression ::= estrella_assign_array ENTREGA nochebuena_initializer FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("candelabro_assignment_expression",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // candelabro_assignment_expression ::= estrella_assign_array ENTREGA incienzo_expression FINREGALO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("candelabro_assignment_expression",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // pesebre_args ::= gorro_navidad_type_specifier PERSONA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pesebre_args",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // pesebre_args ::= pesebre_args CHIMENEA gorro_navidad_type_specifier PERSONA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pesebre_args",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // reyes_magicos_list_expr ::= gorro_navidad_type_specifier PERSONA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reyes_magicos_list_expr",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // reyes_magicos_list_expr ::= reyes_magicos_list_expr CHIMENEA gorro_navidad_type_specifier PERSONA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reyes_magicos_list_expr",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // incienzo_expression ::= bastoncillo_arithmetic_expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // incienzo_expression ::= galleta_logic_expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // incienzo_expression ::= leche_relational_expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // incienzo_expression ::= arbol_constant 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // incienzo_expression ::= PERSONA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // incienzo_expression ::= belen_function_call_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("incienzo_expression",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // burro_general_numerical_expr ::= bastoncillo_arithmetic_expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("burro_general_numerical_expr",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // burro_general_numerical_expr ::= PERSONA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("burro_general_numerical_expr",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // burro_general_numerical_expr ::= belen_function_call_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("burro_general_numerical_expr",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // burro_general_numerical_expr ::= l_NICOLAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("burro_general_numerical_expr",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // burro_general_numerical_expr ::= l_NOEL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("burro_general_numerical_expr",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // mula_general_boolean_expr ::= galleta_logic_expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("mula_general_boolean_expr",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // mula_general_boolean_expr ::= leche_relational_expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("mula_general_boolean_expr",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // mula_general_boolean_expr ::= PERSONA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("mula_general_boolean_expr",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // mula_general_boolean_expr ::= belen_function_call_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("mula_general_boolean_expr",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // mula_general_boolean_expr ::= l_t_CLAUS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("mula_general_boolean_expr",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // mula_general_boolean_expr ::= l_f_CLAUS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("mula_general_boolean_expr",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // pez_general_string_expr ::= PERSONA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pez_general_string_expr",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // pez_general_string_expr ::= belen_function_call_statement 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pez_general_string_expr",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // pez_general_string_expr ::= l_SANTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("pez_general_string_expr",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // bastoncillo_arithmetic_expr ::= burro_general_numerical_expr TRUENO burro_general_numerical_expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // bastoncillo_arithmetic_expr ::= burro_general_numerical_expr RODOLFO burro_general_numerical_expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // bastoncillo_arithmetic_expr ::= burro_general_numerical_expr JUGUETON burro_general_numerical_expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // bastoncillo_arithmetic_expr ::= burro_general_numerical_expr RELAMPAGO burro_general_numerical_expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // bastoncillo_arithmetic_expr ::= burro_general_numerical_expr CUPIDO burro_general_numerical_expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // bastoncillo_arithmetic_expr ::= burro_general_numerical_expr COMETA burro_general_numerical_expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // bastoncillo_arithmetic_expr ::= QUIEN PERSONA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // bastoncillo_arithmetic_expr ::= GRINCH PERSONA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // bastoncillo_arithmetic_expr ::= ABRECUENTO burro_general_numerical_expr CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bastoncillo_arithmetic_expr",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // galleta_logic_expr ::= mula_general_boolean_expr GASPAR mula_general_boolean_expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("galleta_logic_expr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // galleta_logic_expr ::= mula_general_boolean_expr MELCHOR mula_general_boolean_expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("galleta_logic_expr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // galleta_logic_expr ::= BALTASAR mula_general_boolean_expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("galleta_logic_expr",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // leche_relational_expr ::= burro_general_numerical_expr ALABASTRO burro_general_numerical_expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("leche_relational_expr",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // leche_relational_expr ::= burro_general_numerical_expr EVERGEEN burro_general_numerical_expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("leche_relational_expr",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // leche_relational_expr ::= burro_general_numerical_expr MINSTIX burro_general_numerical_expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("leche_relational_expr",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // leche_relational_expr ::= burro_general_numerical_expr UPATREE burro_general_numerical_expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("leche_relational_expr",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // leche_relational_expr ::= burro_general_numerical_expr OPENSLAE burro_general_numerical_expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("leche_relational_expr",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // leche_relational_expr ::= burro_general_numerical_expr MARY burro_general_numerical_expr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("leche_relational_expr",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
